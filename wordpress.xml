<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.0" created="2014-11-09 11:39" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>bruno fernandez-ruiz</title>
	<link>http://www.olympum.com</link>
	<description>random thoughts from a 0xCAFED00D</description>
	<pubDate>Sun, 09 Nov 2014 11:39:05 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.olympum.com</wp:base_site_url>
	<wp:base_blog_url>http://www.olympum.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>brunofr@olympum.com</wp:author_email><wp:author_display_name><![CDATA[Bruno Fernandez-Ruiz]]></wp:author_display_name><wp:author_first_name><![CDATA[Bruno]]></wp:author_first_name><wp:author_last_name><![CDATA[Fernandez-Ruiz]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>19</wp:term_id><wp:category_nicename>architecture</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Architecture]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>16</wp:term_id><wp:category_nicename>frameworks</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Frameworks]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename>future</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Future]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>22</wp:term_id><wp:category_nicename>google</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Google]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>30</wp:term_id><wp:category_nicename>imps</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[IMPS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>9</wp:term_id><wp:category_nicename>internet</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Internet]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>java</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Java]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>14</wp:term_id><wp:category_nicename>linux</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Linux]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>17</wp:term_id><wp:category_nicename>mobile</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Mobile]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>other</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Other]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>21</wp:term_id><wp:category_nicename>policy</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Policy]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>18</wp:term_id><wp:category_nicename>saas</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[SaaS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename>security</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Security]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>yahoo</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Yahoo!]]></wp:cat_name></wp:category>

	<generator>http://wordpress.org/?v=4.0</generator>

	<item>
				<title>Yahoo! Customer Service removes my account.</title>
		<link>http://www.olympum.com/?attachment_id=33</link>
		<pubDate>Sun, 11 Feb 2007 18:11:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/wp-content/uploads/2007/02/screenshot.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date>2007-02-11 18:11:30</wp:post_date>
		<wp:post_date_gmt>2007-02-11 18:11:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>yahoo-customer-service-removes-my-account</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.olympum.com/wordpress/wp-content/uploads/2007/02/screenshot.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/var/www/olympum.com/www/htdocs/wp-content/uploads/2007/02/screenshot.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:786;s:6:"height";i:560;s:14:"hwstring_small";s:23:"height='91' width='128'";s:4:"file";s:73:"/var/www/olympum.com/www/htdocs/wp-content/uploads/2007/02/screenshot.png";s:5:"thumb";s:24:"screenshot.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>A Vulnerable Business Model Powers the Internet</title>
		<link>http://www.olympum.com/?p=73</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=73</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://reddit.com/info/612s9/comments/c02i8eq">Power of the mobs and Giuliani</a>. A vulnerable business model powers the internet.

Openness: the end of the social network vendor lock-in strategy.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date>2012-01-30 00:09:04</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Caffeine</title>
		<link>http://www.olympum.com/?page_id=174</link>
		<pubDate>Thu, 12 Mar 2009 15:55:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?page_id=174</guid>
		<description></description>
		<content:encoded><![CDATA[Caffeine is a free high-performing interoperability solution between the <a href="http://java.sun.com/">Java platform</a> and the <a href="http://msdn.microsoft.com/library/">.NET framework</a>. Caffeine's key differentiator is that does not replace the Java Virtual Machine. Instead, your JVM of choice is hosted within the .NET runtime, ensuring that vendor-specific VM optimizations are preserved. The specific objectives of Caffeine are:
<ul>
	<li>Run on any combination of .NET runtime (1.0+) and Java Virtual Machine (1.2+).</li>
	<li>Allow full reuse of any Java library from a .NET environment, working exclusively at the API level and avoiding bytecode translation of the actual implementation.</li>
	<li>Provide optimal performance, running the JVM and .NET under the same process and avoiding network or IPC costs.</li>
</ul>

Please check the <a href="http://caffeine.berlios.de/">Caffeine project on Berlios</a>, the <a href="http://caffeine.berlios.de/site/development/jni-net-guide.html">architecture guide</a>, and the introduction to <a href="http://caffeine.berlios.de/site/resources/interop.html">runtime interoperability</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date>2009-03-12 15:55:35</wp:post_date>
		<wp:post_date_gmt>2009-03-12 15:55:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>caffeine</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Wireless Village</title>
		<link>http://www.olympum.com/?page_id=181</link>
		<pubDate>Thu, 12 Mar 2009 16:10:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?page_id=181</guid>
		<description></description>
		<content:encoded><![CDATA[The first startup I funded a few years back was Yamigo, a mobile instant messaging solution based on the Wireless Village initiative, later integrated into the Open Mobile Alliance (OMA) and renamed as Instant Messaging and Presence Services (IMPS). Interestingly, native chat clients using OMA IMPS are found in almost 500 million handsets, yet it is little used. Yamigo did remarkably well despite operators not being friendly, building up to 150,000 users.  I am not involved any longer with this service.

My second attempt to get mobile instant messaging was Onesoup. Onesoup was pretty much like Yamigo, but with a simpler user experience, and no registration required, all transparent. I am not any longer associated with Onesoup.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2009-03-12 16:10:01</wp:post_date>
		<wp:post_date_gmt>2009-03-12 16:10:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wireless-village</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GtkGL#</title>
		<link>http://www.olympum.com/?page_id=185</link>
		<pubDate>Thu, 12 Mar 2009 16:10:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?page_id=185</guid>
		<description></description>
		<content:encoded><![CDATA[GtkGL# is a managed .NET assembly for using the OpenGL graphics library together with the Gtk# windowing toolkit. GtkGL# is free software, and is licensed under a permissive 3-clause BSD license. See COPYING for license details.

I needed to draw 2D network graphs and animations of the Simetron simulator. OpenGL is supported by graphic hardware vendors, so it basically cannot get any faster! I found no support for OpenGL in Gtk#, which is the widget toolkit we use in Simetron. I needed something like CsGL, which allows you to use OpenGL in System.Windows.Forms, but for Gtk#.

GtkGL# has been tested to work on Linux. I don't have access to Windows, so you should not expect it to work on Windows without modifications.

<a href="http://www.opengl.org/">OpenGL</a> is a royalty-free platform-independent rendering API. OpenGL is supported by most of the graphic card manufacturers, and when hardware accelaration is available, OpenGL provides one of the best performance for 3D/2D graphics. For Linux, you can get free OpenGL libraries from XFree86/Mesa.

<a href="http://gtk-sharp.sf.net/">Gtk#</a> is an open source .NET language binding for the Gtk+ toolkit and assorted GNOME libraries.

<a href="http://www.go-mono.com/">Mono</a> is an open source implementation of the .NET framework.
<h2>Dependencies</h2>
The only native libraries that GtkGL# depends on are XLib/X11 and OpenGL/Mesa. GtkGL# uses glX functions, meaning that you need X11 to be installed. X11 is normally installed on most Linux boxes, and it is available both for Linux and for Cygwin on Windows (not tested).

For the managed side of things, you will to have Mono and Gtk# installed. GtkGL# has been tested against Gtk# 0.13 and Mono 0.28 releases.
<h2>Configuration</h2>
GtkGL# uses the GNU auto* tool chain. To ensure that Mono picks up the shared libraries while loading you will need to pass the path where Mono is installed to the <code>autogen.sh</code> or <code>configure</code> script (depends whether you checked out the code from CVS or got a tarball). For example, given that Mono is intalled in <code>/opt/mono</code> and that you are using a CVS checkout:

<code>
$ ./autogen.sh --prefix=/opt/mono
$ make
$ make install
</code>

Among others, install will copy the following files into your Mono installation:

<code>
$prefix/lib/libgtkgl_sharp.so
$prefix/lib/gtkglsharp.dll
</code>
<h2>Usage and Samples</h2>
You can find GtkGL# samples under the samples directory.
<h2>Known Bugs</h2>
On some versions of OpenGL/Mesa, the double buffer does not seem to work always correctly, and the widget may become blank. Resizing the widget fixes the problem.
<h2>Download</h2>
You can download the latest binary release of GtkGL# from the <a href="http://forge.novell.com/modules/xfmod/project/showfiles.php?group_id=1309">Novell project page</a>. Alternatively, you can obtain the sources from the <a href="http://forge.novell.com/modules/xfmod/cvs/cvspage.php/simetron/">CVS repository</a>.
<h2>Screenshots</h2>
Getting the traditional GL gears example to work was straight forward. You can find the C# sources under the sample directory in the release tarball.

 

[caption id="attachment_194" align="aligncenter" width="318" caption="Gears using GtkGL#"]<img class="size-full wp-image-194" title="gears-20030914" src="http://www.olympum.com/wordpress/wp-content/uploads/2009/03/gears-20030914.png" alt="Gears using GtkGL#" width="318" height="309" />[/caption]

 

 
<h2>Bugs</h2>
You can send questions, bugs and patches to brunofr _at_ olympum _dot_ com.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date>2009-03-12 16:10:34</wp:post_date>
		<wp:post_date_gmt>2009-03-12 16:10:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gtkgl-sharp</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Cibeles</title>
		<link>http://www.olympum.com/?page_id=188</link>
		<pubDate>Thu, 12 Mar 2009 16:10:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?page_id=188</guid>
		<description></description>
		<content:encoded><![CDATA[Cibeles was a simple workflow manager based on Petri network model semantics. I later on rewrote the code using bytecode emit and the ASM library for a client, and Cibeles sort of died since then. The original interpreted code is still available on the <a href="http://developer.novell.com/wiki/index.php/Special:Downloads/simetron/cibeles/0.01/">Novell project page</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date>2009-03-12 16:10:58</wp:post_date>
		<wp:post_date_gmt>2009-03-12 16:10:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cibeles</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>gears-20030914</title>
		<link>http://www.olympum.com/?attachment_id=194#main</link>
		<pubDate>Thu, 12 Mar 2009 21:04:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/wp-content/uploads/2009/03/gears-20030914.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Gears using GtkGL#]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date>2009-03-12 21:04:37</wp:post_date>
		<wp:post_date_gmt>2009-03-12 21:04:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gears-20030914</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>185</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.olympum.com/wordpress/wp-content/uploads/2009/03/gears-20030914.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/gears-20030914.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"318";s:6:"height";s:3:"309";s:14:"hwstring_small";s:22:"height='95' width='98'";s:4:"file";s:26:"2009/03/gears-20030914.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"gears-20030914-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:26:"gears-20030914-300x291.png";s:5:"width";s:3:"300";s:6:"height";s:3:"291";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>About</title>
		<link>http://www.olympum.com/about/</link>
		<pubDate>Thu, 12 Mar 2009 21:20:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?page_id=207</guid>
		<description></description>
		<content:encoded><![CDATA[I am a cafe dude, technology entrepreneur and wanna-be investor. I am driven by the technical prowess that creates new business opportunities. I currently work at Yahoo!, where I am a fellow, focused in targeting personalized ads & content, especially for mobile.

I enjoy coding and I don't think it's possible to remain a technologist without coding. I started off with a Sinclair ZX81 my dad bought me for Christmas in 1982, right after its release. The Spectrum has a built-in BASIC interpreter and is able to generate a 16-colour palette and some degree of sound modulation. All in a grand 1024 bytes. The Spectrum was quite a novelty, but honestly quite boring otherwise. It would power up, show a black screen, then a copyright on a white background, and finally you would get a prompt "&gt;" where to type "load" and start the tape.

Loading a program would take anything between 3 and 5 minutes, and most frequently the load would fail right at the end of the tape - back to the white screen. Applications on the Spectrum were really not good at all. I got tired of playing the load-the-tape-to-reboot game, so I decided to explore the assembler for the ZX81. Ah, fun! The ZX81 assembler had suddenly opened what I thought at the time were infinite opportunities. From the early Sinclair days, I was hooked into software development and programming languages, moving through BASIC, C, 8088 assembler, Lisp, Pascal, Fortran, C++, Smalltalk, Java, Ruby, Scala, Clojure, JavaScript and recently Go.

I am obviously grateful to my parents for opening the doors to what then was a hobby and that would eventually become my professional career.

<p style="color: #800080;font-weight: bold;text-decoration: underline;">The opinions expressed here are my own personal perspectives and do not necessarily reflect or represent my employer's view.</p>

You can follow me on twitter as <a href="http://twitter.com/olympum">@olympum</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date>2009-03-12 21:20:20</wp:post_date>
		<wp:post_date_gmt>2009-03-12 21:20:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>26798</wp:comment_id>
			<wp:comment_author><![CDATA[Benjamin]]></wp:comment_author>
			<wp:comment_author_email>giby_the_kid@yahoo.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.20.214.240</wp:comment_author_IP>
			<wp:comment_date>2013-09-02 23:48:28</wp:comment_date>
			<wp:comment_date_gmt>2013-09-02 23:48:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Hi :)</p>

<p>I went to your site after having fond in a project I'm involved in this ref:</p>

<ul>
<li>GtkGL# - OpenGL Graphics Library for the Gtk# Toolkit
*

<ul>
<li>Copyright (c) 2002-2004 The Olympum Group, http://www.olympum.com/</li>
</ul></li>
</ul>

<p>Have you written that? It do need an update cus it do not support quartz… is there any newer version?</p>

<p>Thanks</p>
]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1378165708.86812;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1399129372.3064251;s:7:"message";s:46:"admin changed the comment status to unapproved";s:5:"event";s:17:"status-unapproved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Facebook application breakdown</title>
		<link>http://www.olympum.com/internet/why-facebook-is-just-a-game/attachment/app_breakdown3vq2vabv4x448s0sk080s8wws8td8r2s3w1cs4kksc4okksgg8th/#main</link>
		<pubDate>Tue, 14 Apr 2009 16:35:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/wordpress/wp-content/uploads/2008/05/app_breakdown3vq2vabv4x448s0sk080s8wws8td8r2s3w1cs4kksc4okksgg8th.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[Facebook application breakdown]]></content:encoded>
		<excerpt:encoded><![CDATA[Facebook application breakdown]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date>2009-04-14 16:35:20</wp:post_date>
		<wp:post_date_gmt>2009-04-14 16:35:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>app_breakdown3vq2vabv4x448s0sk080s8wws8td8r2s3w1cs4kksc4okksgg8th</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>77</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.olympum.com/wordpress/wp-content/uploads/2008/05/app_breakdown3vq2vabv4x448s0sk080s8wws8td8r2s3w1cs4kksc4okksgg8th.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2008/05/app_breakdown3vq2vabv4x448s0sk080s8wws8td8r2s3w1cs4kksc4okksgg8th.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"530";s:6:"height";s:3:"512";s:14:"hwstring_small";s:22:"height='96' width='99'";s:4:"file";s:78:"2008/05/app_breakdown3vq2vabv4x448s0sk080s8wws8td8r2s3w1cs4kksc4okksgg8th.jpeg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:77:"app_breakdown3vq2vabv4x448s0sk080s8wws8td8r2s3w1cs4kksc4okksgg8th-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:77:"app_breakdown3vq2vabv4x448s0sk080s8wws8td8r2s3w1cs4kksc4okksgg8th-300x289.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"289";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Cibeles source code</title>
		<link>http://www.olympum.com/?attachment_id=275</link>
		<pubDate>Fri, 04 Dec 2009 07:03:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/wordpress/wp-content/uploads/2009/03/cibeles-0.01.tar.gz</guid>
		<description></description>
		<content:encoded><![CDATA[Java source code for the cibeles workflow engine]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2009-12-04 07:03:59</wp:post_date>
		<wp:post_date_gmt>2009-12-04 07:03:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cibeles-0-01-tar</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>188</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.olympum.com/wordpress/wp-content/uploads/2009/03/cibeles-0.01.tar.gz</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/03/cibeles-0.01.tar.gz]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>You Don&#039;t Know What You Don&#039;t Know</title>
		<link>http://www.olympum.com/?p=280</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=280</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2012-01-30 00:09:04</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>The Machine Librarian</title>
		<link>http://www.olympum.com/?p=282</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=282</guid>
		<description></description>
		<content:encoded><![CDATA[Once there was search ... etc.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date>2012-01-30 00:09:04</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ASCII Spam</title>
		<link>http://www.olympum.com/?p=308</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=308</guid>
		<description></description>
		<content:encoded><![CDATA[Certainly note new, but always amusing. Weird thing is, to decipher them, avoid soft wraps, I had to expand the second message across my 24'' monitor. So clearly, clever technique, but probably wrong audience. Or maybe not?
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date>2012-01-30 00:09:04</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ascii-art-spam</title>
		<link>http://www.olympum.com/?attachment_id=310</link>
		<pubDate>Thu, 10 Jun 2010 00:29:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/wordpress/wp-content/uploads/2010/06/ascii-art-spam.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date>2010-06-10 00:29:09</wp:post_date>
		<wp:post_date_gmt>2010-06-10 00:29:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ascii-art-spam</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.olympum.com/wordpress/wp-content/uploads/2010/06/ascii-art-spam.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/06/ascii-art-spam.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:4:"1579";s:6:"height";s:3:"488";s:14:"hwstring_small";s:23:"height='39' width='128'";s:4:"file";s:26:"2010/06/ascii-art-spam.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ascii-art-spam-2</title>
		<link>http://www.olympum.com/?attachment_id=311</link>
		<pubDate>Thu, 10 Jun 2010 00:29:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/wordpress/wp-content/uploads/2010/06/ascii-art-spam-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date>2010-06-10 00:29:10</wp:post_date>
		<wp:post_date_gmt>2010-06-10 00:29:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ascii-art-spam-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.olympum.com/wordpress/wp-content/uploads/2010/06/ascii-art-spam-2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/06/ascii-art-spam-2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:4:"1920";s:6:"height";s:3:"871";s:14:"hwstring_small";s:23:"height='58' width='128'";s:4:"file";s:28:"2010/06/ascii-art-spam-2.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>test from emacs</title>
		<link>http://www.olympum.com/?p=319</link>
		<pubDate>Tue, 07 Sep 2010 12:46:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=319</guid>
		<description></description>
		<content:encoded><![CDATA[something]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>319</wp:post_id>
		<wp:post_date>2010-09-07 12:46:43</wp:post_date>
		<wp:post_date_gmt>2010-09-07 12:46:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>The Cloud Search Open Source Landscape</title>
		<link>http://www.olympum.com/?p=360</link>
		<pubDate>Mon, 09 Jan 2012 07:23:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=360</guid>
		<description></description>
		<content:encoded><![CDATA[## Search Architecture 101

To provide distributed search, and be able to encompass for increasing scale in queries and documents, the search index must be sharded. **Distributed indexing** may happen either by document sharding or by term sharding:

1. By document: each shard has index for subset of docs. A K word query requires O(K*N) disk seeks on N shards.
2. By word: each shard has subset of words for all docs. A K word query requires O(K) disk seeks, but much higher network bandwidth needed to index.

For most deployments, *sharding by document is the preferred approach* for providing distributed indexing.

In addition to distributed indexing, search queries must be spread and routed to the relevant search nodes. The options for **distributed search** are:

1. Dedicated load-balancer(s) in front of the search nodes. The corpus is broken into N shards, each replicated R times, for a total of RxN search nodes. A load-balancer picks one of the shard replica sets, and then fans out the query to the N shards in the replica set. This design introduces an additional point of complexity and is complex to scale elastically, but provides the best-possible query latency. This is the approach that Solr and Solandra follow.

                                       query
										 |
										 |
										 v										 
                             replica balancing server
							 |                     |
							 |                     |
							 v                     v
		  shard routing web-server                shard routing web server
		   |         |         |				   |         |         |
		   |         |         |				   |         |         |
		   v         v         v		   		   v         v         v
		  shard     shard     shard		  		 shard     shard     shard

2. Every search node is a peer and capable of answering any query, and the search node's storage system provides the distribution mechanisms for the index. This is simple from a serving standpoint, allows elastic cluster operations, but introduces additional latency. This is the approach that ElasticSearch and LuceneHbase follow.

                                        query
										  |
										  |
										  v
					 layer 3 direct server return load balancer
					 |           |            |             |
					 |			 |			  |				|
					 v			 v			  v				v
                     node		node		 node		  node
					 |           |            |             |
					 |			 |			  |				|
					 v			 v			  v				v
		        	 search index in elastic distributed storage

In [Apache Lucene](http://lucene.apache.org/), the index and search design looks like this:

	{doc} --> IndexWriter --> FSDirectory <-- IndexReader <-- IndexSearcher <-- {query}
								  |
								  |
								  v
							   	disk

In a load-balanced architecture, we can split the search index across Lucene instances and have the load balancer route and spread queries. This is powerful and extremely scalable, but architecturally it makes it more complex to scale elastically, as rebalancing shards is hard since the index needs to be fully recomputed. Solr follows this design.

When following a peer-based search node design, there are two possible ways of performing distributed indexing with Lucene:

1. Implementing custom `IndexWriter` and `IndexReader`, i.e. there are no index segment files, distribution is solved by an underlying distributed store and the indices are stored in a format optimized for that distributed store. This is relatively simple and is what Solandra and HBasene do. See [[article on LuceneHbase](http://www.infoq.com/articles/LuceneHbase)] for details. In this design, all search nodes are equal as the IndexReader reroutes behind the scenes.

		{doc} --> IndexWriter --> FSDirectory <-- IndexReader <-- IndexSearcher <-- {query}
					  |					               |
					  |					               |
					  v					  			   v
				 Custom IndexWriter				Custom IndexReader
				      |                                |
				      |                                |
					  -----> Distributed Storage <------
					   
2. Implementing custom `FSDirectory`, i.e. index segment files are distributed across filesystems on multiple nodes. This is simple architecturally but harder to implement than (1). This is what ElasticSearch does. In this design, all nodes are "equal" and can be used for querying, as `FSDirectory` hides the distributed store.

		{doc} --> IndexWriter --> FSDirectory <-- IndexReader <-- IndexSearcher <-- {query}
									  |
									  |
									  v
    						 Distributed storage

## Concerns

What are we looking for?

* Distributed indexing
* Distributed querying
* Near real-time indexing
* Faceted search
* Hadoop and HBase friendly
* Custom scoring algorithms
* Custom indexing algorithms
* Maintainability
* Operability

## Alternatives

Alternatives (search systems):

* Solr
* ElasticSearch
* Solandra
* HBasene
* Sensei (Zoie, Bobo)
* IndexTank
* Lily

### Solr

[Solr](http://lucene.apache.org/solr/) is the grandfather of all the Lucene-based search systems. Now part of Apache, and originally developed at CNET, Solr offers an HTTP indexer and query engine running on top of Lucene and Jetty. Solr offers a lot of features and has an active community. Historically Solr suffered from: (1) lack of distributed indexing, (2) complex distributed search, and (3) lock-collision between the indexer (writer) and the query engine (reader).

Work has been done in trunk to introduce distributed search via Zookeeper. Index segment files are stored in each solr host in the file system, and Zookeper is used to coordinate the configuration. Search nodes are aware of each other and a search query can be sent to any node which will in turn distribute to all other nodes. To achieve scalability and HA replicas can be created and Solr will automatically load-balance.

Distributed indexing is still not available. See [JIRA-2358](https://issues.apache.org/jira/browse/SOLR-2358). As a result the client initiating the doc indexing is responsible for distributing the indexing requests across the shards.

In regards to the index reader/writer collision, inserts and updates may severely degrade read performance in Solr. By design, Solr is optimized for fast search (reads), and therefore indexes new documents as a batch, and installs a new version of the entire index. Installing a new index is costly and no way near real-time. By design, Solr is not trying to address this in the "persistent" form of the index (from Solr's wiki):

>If you desire frequent new collections in order for your most recent changes to appear "live online", you must have both frequent commits/snapshots and frequent snappulls. The most frequently you can distribute index changes and maintain good performance is probably in the range of 1 to 5 minutes, depending on your reliance on caching for good query times, and the time it takes to autowarm those caches.

> Cache autowarming may be crucial to performance. On one hand a new cache version must be populated with enough entries so that subsequent queries will be served from the cache after the system switches to the new version of the collection. On the other hand, autowarming (populating) a new collection could take a lot of time, especially since it uses only one thread and one CPU. If your settings fire off snapinstaller too frequently, then a Solr slave could be in the undesirable condition of handing-off queries to one (old) collection, and, while warming a new collection, a second “new” one could be snapped and begin warming!

In trunk we can find some near real-time features. Soft commits are used to get the document in a near realtime view of the index. Hard commits ensure that documents are on stable storage. From the wiki:

> A common configuration might be to 'hard' auto commit every 1-10 minutes and 'soft' auto commit every second. With this configuration, new documents will show up within about a second of being added, and if the power goes out, you will be certain to have a consistent index up to the last 'hard' commit.

In summary, pros:

* Large community support.
* Large deployments.
* Actively developed.
* Feature rich.
* Fast (caches index in-memory from disk).
* Zk-based distributed search.

Cons:

* No distributed indexing.
* Manual replication and sharding.
* Difficult to distribute NRT "soft" commit. 
* Tuning for writes is very difficult.

### ElasticSearch

[ElasticSearch](http://www.elasticsearch.org/) offers an out-of-the-box clustered search solution. Also, in contrast with Solr, ES is optimized for near real-time search, i.e. updates (writes). ES is based on Netty and offers an HTTP JSON protocol and a native thrift-based protocol. It uses an older version of Lucene that Solr, which means some Solr features are not available.

ES fully leverages the `IndexWriter` and `IndexReader` from Lucene, and provides a custom implementation of `FSDirectory` that ensure replication and sharding.

ES nodes are discovered either via multicast at startup, or via configuration (not Zk). ES is designed for all replica nodes to do the indexing to ensure a near real-time index. Documents are indexed on a primary shard and propagated to all replicas to ensure availability (index copies). ES manages failures and keeps automatically rebalancing index segments in the cluster, by splitting large indexes into smaller ones. Indices move as nodes are added or removed. To be able to recover in case of failures, ES keeps a long-term persistent copy of the indices in a "gateway" component.

ES is primarily developed by Shay Banon. The code is well documented, and has good testing coverage. The user documentation is sufficient but could be improved.

**Pros**:

* Distributed indexing.
* Distributed search.
* Near real-time.
* Active community.
* Large (?) deployments at StumbleUpon and Mozilla.
* Fast for big indices.
* Multi-tenancy.
* Operability.

**Cons**:

* Multicast-based or config-based node discovery.
* Documentation.
* Recovery from failure (from "gateway").

### Solandra

[Solandra](http://www.datastax.com/wp-content/uploads/2011/07/Scaling_Solr_with_Cassandra-CassandraSF2011.pdf) is Solr on Cassandra. Solandra implements a custom `IndexReader` and the `IndexWriter` that store the index in Cassandra (instead of using segment files). Cassandra adds automatic sharding and replication, as well as near real-time (as there is no commit). Solr runs _in_ Cassandra (same JVM).

**Pros**:

* Distributed indexing
* Distributed search
* Near real-time search

**Cons**:

* Slow
* Memory greedy
* No community
* No support (?)
* Requires additional load-balancer
* Term-based partitioning

Solandra By-passes most of Lucene's NRT index segment optimizations

### HBasene

[HBasene](https://github.com/akkumar/hbasene) is architecturally similar to Solandra, but using Hbase instead of Cassandra. HBasene does not seem to be maintained.

### Sensei

[Sensei](http://senseidb.com/) is LinkedIn's search system, which uses Zoie for near real-time search indexing and Bobo for faceted search. It follows the same approach as Solandra and HBasese, and provides implementations of `IndexReader` and `IndexWriter` that distributed the index. It's a complex J2EE application. Small (no?) community. **There are no unit tests in the open source version**.

### IndexTank

[IndexTank](https://github.com/linkedin/indextank-engine) wrote a search engine from the ground up. IndexTank uses parts of Lucene: the tokenizers, to be compatible with the query syntax, and the index format for persistence on disk. **There are no unit tests in the open source version**.

### Lily

[Lily](http://docs.outerthought.org/lily-docs-current/ext/toc/) is a Solr based system. The index is stored in Solr, and the original document in HBase. Lily adds automatic distributed indexing and routing on top of Solr. It shares the same limitation with Solr that it's not elastic:

> Shards cannot be added or removed on the fly: if you decide you want more or less shards, you need to define a new index and re-index your content into that new index. Nonetheless, Lily allows changing the sharding configuration of existing indexes on the fly without complaining. When doing this, working indexers will be restarted to take the new configuration into account (a running index re-building job would be unaffected). You have to consider yourself if the changes you make have sense without rebuilding the index.
 
## Summary

First in terms of high-level design choices:

* Document-based partitioning is the way to go for most use cases.
* Elasticity and multi-tenancy can only be achieved realistically in peer search node solutions.

In terms of implementation alternatives:

* IndexTank and Sensei get ruled out because of the no-availability of unit tests.
* Solr and Lily get ruled out because they do not offer a peer search solution.
* Solandra gets ruled out because it requires Cassandra.

ElasticSearch and Lucene on HBase are the best solutions to the problem:

* ElasticSeach requires work to add a more cloud-friendly node discovery mechanism and an ability to access the search index segments from Hadoop.
* Lucene on Hbase requires substantial work and ongoing support in order to be able to compete in performance and scalability (cost of scaling) with ElasticSearch, as less of Lucene's optimized index segment infrastructure is used.

## Other Resources

* [Lucene at twitter (PDF)](http://www.lucenerevolution.org/sites/default/files/Lucene%20Rev%20Preso%20Busch%20Realtime_Search_LR1010.pdf)
* [ElasticSearch and Solr feature comparison (Google Docs)](https://docs.google.com/present/view?id=dc6zhtt5_1frfxwfff&pli=1)
* [Google's search system design evolution (video)](http://videolectures.net/wsdm09_dean_cblirs/)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>360</wp:post_id>
		<wp:post_date>2012-01-09 07:23:20</wp:post_date>
		<wp:post_date_gmt>2012-01-09 07:23:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>nodejs_innov_advantage</title>
		<link>http://www.olympum.com/architecture/the-nodejs-innovation-advantage/attachment/nodejs_innov_advantage/#main</link>
		<pubDate>Sat, 28 Jan 2012 21:39:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/wordpress/wp-content/uploads/2012/01/nodejs_innov_advantage.png</guid>
		<description></description>
		<content:encoded><![CDATA[Turnaround comparison from idea to proof of concept]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>367</wp:post_id>
		<wp:post_date>2012-01-28 21:39:44</wp:post_date>
		<wp:post_date_gmt>2012-01-28 21:39:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nodejs_innov_advantage</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>363</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.olympum.com/wordpress/wp-content/uploads/2012/01/nodejs_innov_advantage.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[The NodeJS innovation advantage]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"504";s:6:"height";s:3:"366";s:14:"hwstring_small";s:23:"height='92' width='128'";s:4:"file";s:34:"2012/01/nodejs_innov_advantage.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/01/nodejs_innov_advantage.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Archives</title>
		<link>http://www.olympum.com/?page_id=397</link>
		<pubDate>Sun, 29 Jan 2012 23:00:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?page_id=397</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>397</wp:post_id>
		<wp:post_date>2012-01-29 23:00:37</wp:post_date>
		<wp:post_date_gmt>2012-01-29 23:00:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>archives</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Ring-based push cluster</title>
		<link>http://www.olympum.com/?attachment_id=587</link>
		<pubDate>Thu, 23 Feb 2012 05:30:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/wordpress/wp-content/uploads/2012/02/design.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>587</wp:post_id>
		<wp:post_date>2012-02-23 05:30:04</wp:post_date>
		<wp:post_date_gmt>2012-02-23 05:30:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>design</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.olympum.com/wordpress/wp-content/uploads/2012/02/design.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"588";s:6:"height";s:3:"461";s:14:"hwstring_small";s:23:"height='96' width='122'";s:4:"file";s:18:"2012/02/design.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/02/design.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>SOAP and RMI</title>
		<link>http://www.olympum.com/java/soap-and-rmi/</link>
		<pubDate>Thu, 03 Nov 2005 07:52:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=7</guid>
		<description></description>
		<content:encoded><![CDATA[Latest benchmark results on WebSphere 6.0.1 seem to indicate that SOAP/HTTP outperforms  RMI/IIOP. Interesting, it makes me wonder if the reason comes down to IBM abandoning CORBA and placing the best developers on the SOA field. Otherwise there is really no other explanation I can think of. I'll have to instrument some code to understand the why.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2005-11-03 07:52:00</wp:post_date>
		<wp:post_date_gmt>2005-11-03 07:52:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>soap-and-rmi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409310970937344]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>AJAX Performance</title>
		<link>http://www.olympum.com/architecture/ajax-performance/</link>
		<pubDate>Tue, 29 Nov 2005 14:42:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=8</guid>
		<description></description>
		<content:encoded><![CDATA[AJAX is the new pink. In fact, Web 2.0 could be the internet revolution that makes even Bill Gates wonder about the future of software. The enhanced usability in AJAX implies a couple of things for web applications:
<ul>
	<li>Some of the controller logic is moved from the server to the client. Less CPU cycles on the server per page, more on the client.</li>
	<li>Clients make more frequent requests to the server, but with significantly smaller payloads.  The business logic on the server is broken up into smaller, more self-contained XML services (SOAP, REST). In essence, same aggregate CPU, more I/O.</li>
</ul>
Add to that a higher level of concurrency. More frequent, less expensive requests, same user, results in higher transaction rates, which will require more concurrent threads. More threads will consume more resources, both CPU and I/O.

During a simple AJAX revamping exercise, for the same amount of functionality, user CPU time is likely to be reduced on the server, and network I/O to go up. The extreme case with an AJAX MVC, and the server providing only web services, will actually reduce the CPU requirements on the server.

However, there are a few catches software architects should really start to consider:
<ol>
	<li>AJAX will increase bandwidth requirements on the server, and reduce the ability to scale up hardware to CPU saturation, increasing the average hardware cost per CPU cycle. In other words, AJAX is not a server efficient technology unless you revisit the data going back and forth.</li>
	<li>Once the AJAX-night fever comes down, a next wave of web design will start to put more emphasis on orchestration and collaboration. Web services transaction management will start to be more mainstream due to additional client requirements, and stateful web services will appear (sadly?).</li>
	<li>Current server tuning rules will no longer apply, given to changes in usage patterns. Multi-core architectures, such as Niagara and Power5 will be best placed to serve the increase in threading. Niagara being a lower power, high bandwidth chip, but not necessarily a fast CPU, will be one of the best architectures to run AJAXed applications.</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2005-11-29 14:42:00</wp:post_date>
		<wp:post_date_gmt>2005-11-29 14:42:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ajax-performance</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409308060495872]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>First Entry</title>
		<link>http://www.olympum.com/other/first-entry/</link>
		<pubDate>Tue, 01 Nov 2005 11:03:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[Not the first blog, and likely not the last one. Too many tasks, and short of time. Priorities change. And here I am on a new blog, tired of running my own. I don't like the chores blogging, and I hate the whole 'hoo, haa, I got trizillion hits'.

Anyway, to the point, the objective of this blog is to prepare short articles for my forthcoming book on performance analysis for web applications.

And who am I you may wonder? I usually get referred as being a 'technical architect', some call me a 'performance architect'. On my title now it says 'enterprise architect - operational engineering'. Ney. Software and systems are nowhere close to been at the level of maturity of engineering, including the 'real' architecture, so I would hardly classify myself as an 'architect' anyway. I like drawing and painting though, and I am pretty decent, I think.

Some people call me a technical troubleshooter. I like this description much better.

A highly technology focused critical entrepreneur, I have been building software and systems for the last 22 years, only the last 8 doing it full time. It all started with a good old Sinclair Spectrum48 my dad bought me when I was in my early teens. It had a built-in BASIC interpreter and 48k of memory. The key thing to do with it was to play. And games, well, were not that good to be honest. So I quickly got tired of playing, it was not creative, it was not very stimulating.

So I started doing PEEK and POKE. Wow, what a difference it made. Now the little computer had become creative. And I got hooked to it. I evolved to an x286, where I learnt FORTRAN, PASCAL, C and C++. I wrote graphic libraries, windowing toolkits, learnt OOP, all in the late 80s and beginning of the 90s. It was wonderful. There was always so much one could learn. So much I could learn. At the time I was at School in Madrid, Spain, studying 'Caminos', a hybrid between civil engineering, applied mathematics and solid mechanics. School was tough, mentally exhausting for 6 years, and I found on programming, along with playing music, a great way to relax with my creative side of the brain. And then one day, like everybody else, I got my degree. Faced with the duty of earning my bread, I started working ...

I have done a bit of everything over the course of the last years, ranging from low level kernel programming to business development. On the side I have always maintained contact with the open source community, and I maintain (somehow) <a href="http://caffeine.berlios.de/">caffeine</a>, a hosted Java Virtual Machine (JVM) for the .NET runtime.

Nowadays I live in <a href="http://www.kent.gov.uk/">Kent</a>, UK with my wife Reeta and daughter Ana<span style="font-size: 10pt">ï</span>s.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2005-11-01 11:03:00</wp:post_date>
		<wp:post_date_gmt>2005-11-01 11:03:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-entry</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409311449505792]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Ruby on Rails and J2EE</title>
		<link>http://www.olympum.com/frameworks/ruby-on-rails-and-j2ee/</link>
		<pubDate>Thu, 05 Jan 2006 16:40:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=10</guid>
		<description></description>
		<content:encoded><![CDATA[I have spent some time over Christmas period playing here and there with <a href="http://www.rubyonrails.com/">Ruby on Rails</a> and getting an overdose of AJAX. I really wanted to see whether all the hype and marketing from <a href="http://www.37things.com/">37things.com</a> and associates makes any sense.

I have two objectives in mind:
<ol>
	<li>Should I throw away J2EE for Rails?</li>
	<li>Should I throw away PHP for Rails?</li>
</ol>
My impression of Rails has been extremely good so far. However, I am really more pleased with Ruby than I am with Rails itself. Rails is interesting, don't get me wrong, but far from being revolutionary. All concepts and patterns in Rails have existed for a while in the Java and J2EE world for a while now. If so, why is Rails so cool and sexy? I'll give you a few reasons I found for myself:
<ul>
	<li>Ruby is a very expressive language for those like us coming from strongly typed language background.</li>
	<li>Rails makes agile development easy. It is extremely easy to come up with a concept in the morning, and have a prototype in the afternoon to show to your client. This is because development and execution architectures are tightly coupled.</li>
	<li>Rails principle of convention over configuration works great for 99% of the cases. No need to know how to define or configure something - it just works as long as you follow the principles.</li>
	<li>Rails provides a really easy-to-use and lightweight structured MVC architecture for those PHP addicts hacking web site after web site.</li>
</ul>
Would I throw J2EE away now that I encountered Rails? No. J2EE is a distributed component on steroids - so if you don't need distributed components, you don't need J2EE. But if you rely on JMS, JCA, JTA and distributed components, then Rails is not your medicine. Rails is a pure web application framework, with some quick O/R mapping facilities to ease the pain of DB access -- it's great for those web applications only backed by one database custom developed for the particular application. Rails is more of a pain relief for PHP folks than for Java programmers.

<span style="font-style: italic">If you have been doing pure web frontends in Java using JSP and JDBC, well, sorry, I think you should go back and examine Python (Django), Ruby (Rails) and PHP (Yellow Duck, BlueShoes) and stop wasting your time.</span>

Then there is <a href="https://trails.dev.java.net/">Trails</a>, a Java replica of Rails, using the "best-of-breed" Tapestry-Spring-Hibernate (yeah, fits my resume). However, I feel there is no much meaning in Trails nor TRAX. If I have complex problems (integration, distribution, transaction management, and messaging), I'll use Spring or directly the J2EE APIs, and will not rely on a generation framework and convention. I will want configuration, and full control.

Finally, there is also  <a href="http://www.phpontrax.com/">PHP On TRAX</a>, a Rails version for PHP. It might have a niche market, for those loyal to PHP. But given Ruby is sooo expressive, why would anybody program in PHP?

Bottom line, Rails and J2EE cover different needs and developer populations. There will surely always be an overlap - and over time they will both mutate to copy features from each other. But it is more likely that we see Ruby 2.0 running on the JVM, than iBatis or Hibernate on Rails!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2006-01-05 16:40:00</wp:post_date>
		<wp:post_date_gmt>2006-01-05 16:40:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-on-rails-and-j2ee</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="frameworks"><![CDATA[Frameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409306931826690]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415065122;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:36;}i:1;a:1:{s:2:"id";i:45;}i:2;a:1:{s:2:"id";i:18;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[Paul Barry]]></wp:comment_author>
			<wp:comment_author_email>mail@paulbarry.com</wp:comment_author_email>
			<wp:comment_author_url>http://paulbarry.com</wp:comment_author_url>
			<wp:comment_author_IP>68.167.146.250</wp:comment_author_IP>
			<wp:comment_date>2007-03-15 15:26:54</wp:comment_date>
			<wp:comment_date_gmt>2007-03-15 15:26:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bruno,

Great article, I posted a follow up on <a href="http://paulbarry.com/articles/2007/03/15/ruby-on-rails-vs-j2ee" rel="nofollow">my blog</a>.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2801</wp:comment_id>
			<wp:comment_author><![CDATA[Ruby on Rails and J2EE]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.yhyqart.com/2011/09/08/ruby-rails-j2ee/</wp:comment_author_url>
			<wp:comment_author_IP>184.22.86.196</wp:comment_author_IP>
			<wp:comment_date>2011-09-08 20:30:31</wp:comment_date>
			<wp:comment_date_gmt>2011-09-08 20:30:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] Source [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>SOA, can it scale?</title>
		<link>http://www.olympum.com/architecture/soa-can-it-scale/</link>
		<pubDate>Mon, 09 Jan 2006 16:23:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[SOA means a lot of different things to different people. Now, if I go by the W3C's definition, it's about processes that assemble services and an organisation that owns the processes and the services.

However, to me, SOA is simply distributed computing over web services. I have been building distributed component applications since 2000 that were exposed as business processes. We did not have web services, but the facade was a process interface, and the execution was managed by a simple workflow engine. BPEL and SOAP were not yet mainstraim, still our application was based on a SOA.

So what makes a SOA different from good practice in doing distributed components (the service facade, service locator and state machine have been published design patterns for a while now). I think the only difference is the message encoding protocol (SOAP).

So, what's with SOA scaling?

Many organisations are adopting SOA as almost the holly grail that would enable them to achieve reuse. For a SOA to succeed, one needs to think about processes and data.

Organisations that start now modeling on the process side, and construct processes assembling services exposing existing legacy systems, will hit a big performance wall. You need to think about data: ensuring a given entity ownership sits in one or few known parties. Otherwise, each service part of a larger process will access records which are not necessary for the 'whole'. A little performance overhead summed up over a bunch of services that constitute a process results in possibly non acceptable overall service performance.

Those organisations that decide to focus on the data side encounter the reversed problem - you can't work in your information architecture if you don't know who is using you. So if you just build services and processes that expose existing data, you are doing it in a best-effort basis. It may, or may not, fit the interface and data needs of the service consumers. If they don't, they will need to go against your datasources directly, and this will defeat the whole reason for an SOA.

I believe the following development methodology for services could work:
<ol>
	<li>Model your processes, analyse the required data and use those requirements to create a data model.</li>
	<li>Create a true component architecture, with proper entity relationships and ownership to encapsulate and abstract your data model.</li>
	<li>Create services and assemble services according to your process design (which you may/should revisit by now).</li>
	<li>Iterate the previous steps, starting from the core business processes, and adding processes to the SOA.</li>
</ol>
Interesting enough, this is how agile web 2.0 development is happening! Start off with HTML screens, then model your DB, then construct your model, controller and revisit the views. Which brings me back to the web 2.0 == SOA. We'll eventually get there ...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2006-01-09 16:23:00</wp:post_date>
		<wp:post_date_gmt>2006-01-09 16:23:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>soa-can-it-scale</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409305409318912]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Transactions in Rails</title>
		<link>http://www.olympum.com/frameworks/transactions-in-rails/</link>
		<pubDate>Mon, 29 May 2006 14:18:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[Transactions in Rails are starting to bother me, and quite a lot. Once in a while I dive into my latest application,booki.es, a web application for trading long-term futures using play money.

Rails was fantastic for building my wife's eCommerce site: fairly static content and not many associations between entities. Rails transactional block was sufficient, something of the sorts of:

Account.transaction do
account1.deposit(100)
account2.withdraw(100)
end

or

Account.transaction(peter, paul) do
paul.deposit(350)
peter.withdraw(350)
end

Even ActiveRecord takes care of the transaction integrity for parent-child relationships, so when you save the parent, all child rows get also saved.

Now when a trade is exectued in my trading application, an update and a few reads happen on quite a few tables, including trades, positions, accounts, and historics, but some of these entities don't have any relationships between them. I need to ensure data integrity and atomicity, and Rails does not seem to have anything like the Java Transaction API (JTA).

I would love a simple transaction API like JTA being exposed for databases, like there is Transaction::Simple, but for databases.  Ideally, I would like to have nested transactional support, even if it is a flatten model like in JTS.

But I don't have it, so I am having to modify my controllers and models to overcome the limitation. And to be honest this sucks. Maybe I should go back to my Tapestry/Spring/Hibernate combo for this one app. The right tool for the right job ...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2006-05-29 14:18:00</wp:post_date>
		<wp:post_date_gmt>2006-05-29 14:18:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>transactions-in-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="frameworks"><![CDATA[Frameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409302838599680]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415377034;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:18;}i:1;a:1:{s:2:"id";i:15;}i:2;a:1:{s:2:"id";i:16;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>One thousand paintings</title>
		<link>http://www.olympum.com/future/one-thousand-paintings/</link>
		<pubDate>Sat, 03 Jun 2006 17:41:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[Scarcity is a requirement for a good to be economic. However, <a href="http://www.onethousandpaintings.com/">http://www.onethousandpaintings.com/</a> offer something that could be offered by <span style="font-style: italic">thousands </span>of artists out there. So, it is not scarce. Or is it?

Painting a Miro or a Picasso is only within the painters' own ability, and I don't want to buy some cheap street plagiarism. But some people actually <span style="font-style: italic">do</span>, and these copied paintings sell on the streets. They don't probably sell to me and you, but they sell to a few to which the good is scarce. To those few, the painting either has an economic value, or its utility is fully artistic and they assign zero value to money. Assuming they are not infinitely rich, because they could buy the original Miro or Picasso, it only leaves us with two options: either they are infinitely stupid not to assign value to money, or the copied painting truely has some economic value.

Corolary: don't try to market to everybody, but create scarcity for a few to which the goods have economic value.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2006-06-03 17:41:00</wp:post_date>
		<wp:post_date_gmt>2006-06-03 17:41:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>one-thousand-paintings</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409302502649857]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Globus, something is not right</title>
		<link>http://www.olympum.com/architecture/globus-something-is-not-right/</link>
		<pubDate>Sat, 03 Jun 2006 18:12:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=14</guid>
		<description></description>
		<content:encoded><![CDATA[I was reading yesterday the tutorial for the Globus Toolkit 4 (<a href="http://www.globus.org/toolkit/">GT4</a>), especifically <a href="http://gdp.globus.org/gt4-tutorial/multiplehtml/ch03s01.html">this</a> and <a href="http://gdp.globus.org/gt4-tutorial/multiplehtml/ch03s02.html">this</a> page. It highly disturbs me. Something is not right. It reminds me of the CORBA, and early day's of EJBs. 90% systems programming, for 10% application programming. Thankfully AOP, Spring, Hibernate and friends kicked in to help, and introduced Inversion of Control to the masses. Hollywood's principle for everybody.

In GT4, you code manually the WSDL, and your Java classes reference directly the framework and XSD namespaces.

I believe writing the WSDL/XSD by hand is a good thing when you are writing truely reusable (web) services, to ensure they are not just doing RPC over a pretty crappy protocol, and you are focusing on the message. However, if Globus is to be used for parallel computing, ala my beloved <a href="http://www.csm.ornl.gov/pvm/">PVM</a>, you actually want RPC-style, and Globus should be generating the WSDL automatically upon deployment without developer's intervention.

Additionally, when it comes to the Java side, the code looks like an EJB in the 90s. I don't care if you could generate that code, it simply sucks as a class.

I look forward to the Spring of GT4 to come out really soon!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2006-06-03 18:12:00</wp:post_date>
		<wp:post_date_gmt>2006-06-03 18:12:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>globus-something-is-not-right</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409283645063168]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3390</wp:comment_id>
			<wp:comment_author><![CDATA[Bethany]]></wp:comment_author>
			<wp:comment_author_email>rickusa1@cox.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406000476</wp:comment_author_url>
			<wp:comment_author_IP>82.168.163.191</wp:comment_author_IP>
			<wp:comment_date>2012-05-21 13:41:25</wp:comment_date>
			<wp:comment_date_gmt>2012-05-21 13:41:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Hi Emiel,Excellent examples with Rules!!I am trnyig to return a List from a Rule and can't make it work.I request with a string, and I expect this response            Could you give me an advice?Thank you.JPc2a0c2a0</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1337607685.961";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Wicket and EJB3</title>
		<link>http://www.olympum.com/frameworks/wicket-and-ejb3/</link>
		<pubDate>Sun, 04 Jun 2006 13:16:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[I have tried for the last couple of days to overcome some of the transaction management problems I was having with Rails, and the more I look at it, the more I am convinced Rails is not right for my trading application. Rails has its sweet spot, and for me, there won't be anymore PHP.

I came back to my usual Java stack, with the usual suspects, Tapestry, Spring and Hibernate. But, after the Rails experience, it was just ... yuck! The development environment is complex to setup, there are library dependencies, tons and tons of XML sit-ups! Enough!

I would like to use annotations, and it seems like Hibernate and Tapestry all have it in already, so no more need for XML files, and complex build and packaging using XDoclet. But development environment support for this flavour is very flaky. So much, that I got frustrated.

And this made me re-evaluate an old friend: EJBs. The EJB3 in JavaEE 5 leverage the annotations to make it expressive and put the focus on the model.

I have no more need for Spring, which I was only using for transaction management. I am happy with stateless EJBs.

I have no more need for accessing Hibernate directly. I rather using Entity Beans, and have the implementation be Hibernate3 (wow, I am sooo surprised to read this ... given how such of an anti-entity beans advocate I have been!!).

And as for Tapestry - well, sorry. It's just too much, even with Hivemind. Unit and integration testing is still hard with Tapestry, and there are far too many conventions around.

Which only left me JSF and Wicket on the web component development frameworks front. And given that I don't like the JSP baggage in JSP, I'll go for Wicket, which shares a lot of the Tapestry principles.

So, my new stack is Wicket 1.2 and EJB3. Let's see how it goes.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2006-06-04 13:16:00</wp:post_date>
		<wp:post_date_gmt>2006-06-04 13:16:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wicket-and-ejb3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="frameworks"><![CDATA[Frameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409297431732224]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415214004;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:16;}i:1;a:1:{s:2:"id";i:10;}i:2;a:1:{s:2:"id";i:12;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Java EE 5, still too complex</title>
		<link>http://www.olympum.com/java/java-ee-5-still-too-complex/</link>
		<pubDate>Mon, 12 Jun 2006 10:52:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[The Java EE 5 architecture, with its use of annotations brings the Java world <span style="font-style: italic">close</span> to being agile. The architecture is absolutely fantastic and powerful, with superb messaging (JMS), persistence (EJB3), transactions (JTA), and integration (JCA) capabilities.

However, on the presentation side, for the web world, Java is still behind both .NET and agile frameworks like Rails or Django. JSF is cumbersome, and still too attached to the systems-programming intensive request-response Model2 that ended up in JSPs and Struts. Wicket and Tapestry are possibly the top component-based development web frameworks for Java. But they are both only used by a relatively small community, and documentation, mostly in the case of Wicket, is deficient, especially when it comes to topics such as integration with persistence frameworks.

In terms of setting a complete development environment, it is painful. Setting up Netbeans/Eclipse, JBoss/Geronimo/Glassfish, Wicket, and EJB3 to play nicely with each other is not easy, and it has lots of rough edges. It takes too long to setup an environment and start coding.

That myriad of frameworks and standards is what makes Java EE so powerful, yet so cumbersome. I was hoping annotations could have solved most of the integration complexity, but I am disappointed. So, sadly, my hopes for a "new Java" are yet once again down. Java EE still gets on your way to being productive.

I am back to Rails for the time being, at least until Java EE 5 matures.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2006-06-12 10:52:00</wp:post_date>
		<wp:post_date_gmt>2006-06-12 10:52:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-ee-5-still-too-complex</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409296311869440]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>46</wp:comment_id>
			<wp:comment_author><![CDATA[Richard]]></wp:comment_author>
			<wp:comment_author_email>richard@richardstanford.com</wp:comment_author_email>
			<wp:comment_author_url>http://richardstanford.com/</wp:comment_author_url>
			<wp:comment_author_IP>66.90.166.27</wp:comment_author_IP>
			<wp:comment_date>2007-04-14 23:55:44</wp:comment_date>
			<wp:comment_date_gmt>2007-04-14 23:55:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you looked at Seam yet?  I find that it really does a tremendous job of plugging the holes (many of which are there for good reason) in J2EE 5.  Its amazing how much stuff "just works," how little additional code you need to write to do anything beyond, literally, business logic, bean layouts, page design, and page flow, and how fast it is to use.  Plus you get access to the huge number of available Java libraries, something not to be discounted.

As for setting up an environment - download Eclipse/Callisto, download JBoss, configure the server screen in Eclipse, and you're done.  Besides being under 10 minutes, its a one-time hit.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>48</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>82.152.198.41</wp:comment_author_IP>
			<wp:comment_date>2007-04-15 06:17:15</wp:comment_date>
			<wp:comment_date_gmt>2007-04-15 06:17:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have not at looked at how Seam plugs in the holes, and I know that it is possibly an alternative. The only reason I never looked at it was my lack of appreciation for JSF given the lack of runtime and development support. But that was a couple of years ago, and things have moved a lot since then.

While I appreciate the flexibility in enterprise Java, it is the inability of Java vendors in the JSRs to really agree with each other on any given standard, what drives unnecessary configurability and does not really increases flexibility but vendor lock-in. Let's remember that this is why Seam went originally off the official path, first to plug in the holes and make it usable, but also to increase lock-in. Not exactly Java.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Enterprise Architecture: The Ends Don&#039;t Justify the Means</title>
		<link>http://www.olympum.com/architecture/enterprise-architecture-the-ends-dont-justify-the-means/</link>
		<pubDate>Tue, 13 Jun 2006 14:51:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[No, they never do. Here is the deal.

A centralized Enterprise Architecture (EA) function represents a compromise between the distributed functions in the enterprise. The distributed functions give up some control to invest in the enterprise technology strategy. As with any good investment, the returns need to outweighed the risk profile, otherwise the business functions will pull out of the whole EA thingy.

If the Enterprise Architecture function does not clearly articulate the returns on investment in technology, it will have trouble to enforce architecture governance. As much as the return may seem obvious to those situated in the realm of the <span style="font-style: italic">enterprise</span> -- nevertheless detached from the actual business functions -- returns on investment in technology need to be articulated, forecasted and measured on an ongoing basis to provide adequate architectural steering.

Even if EA is the right thing to do for most mature-growth organizations, the whole EA initiative is doomed to fail in the long-term without following this basic principle. Without it, it is hard to ascertain the required degree of adoption of the EA principles (<span style="font-style: italic">how much EA do we need?</span>), and the lack of clarity and transparency will eventually end up with the disengagement of the business functions.

Until an EA function is able to clearly articulate these returns, it should refrain itself from becoming a policing and dictatorial authority: The Ends Don't Justify the Means.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2006-06-13 14:51:00</wp:post_date>
		<wp:post_date_gmt>2006-06-13 14:51:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>enterprise-architecture-the-ends-dont-justify-the-means</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409293270978560]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Taking the Rails to Django</title>
		<link>http://www.olympum.com/frameworks/taking-the-rails-to-django/</link>
		<pubDate>Tue, 20 Jun 2006 21:08:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=18</guid>
		<description></description>
		<content:encoded><![CDATA[While developing our trading application, I have come across two key things Rails does not have:

* Transactions. Rails does not offer distributed transaction management. This does not bother me much, since I am not a fan of having transactions span across multiple datasources. However, Rails does not offer cross entity transaction management on a single datasource for unrelated entities. The Rails model works well for ensuring autocommits on parent-child relationships, but anything beyond that requires extensive work and bookeeping in your controllers. For most jobs, the Rails model is enough, and does the job. It actually does the job pretty well. But there are jobs, such as updating multiple trading and position tables where Rails is not the right tool.

* Security. Rails is absolutely agnostic of security. Authentication, authorisation and Access-Control Lists are foreign to the framework, by design. The whole plumbing required may become daunting, and while there are engines and plugins out there doing part of the job, I truly hate taking ownership for the security bits within my application.

<span style="font-style: italic">Localisation and internationalisation is yet another third a bit weak in Rails, but I  am yet to have true requirements in this area to be able to give an opinion.</span>

Anyway, Django looks like a promising alternative. It offers both more comprehensive transaction management support and a complete security model, with the whole plumbing being in the framework itself. Whether it will fit the shoe, we'll see as soon as I write the order island book.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2006-06-20 21:08:00</wp:post_date>
		<wp:post_date_gmt>2006-06-20 21:08:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>taking-the-rails-to-django</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="frameworks"><![CDATA[Frameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409291324833792]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Pricing Models for Web 2.0 Software as Services</title>
		<link>http://www.olympum.com/saas/pricing-models-for-web-20-software-as-services/</link>
		<pubDate>Sun, 30 Jul 2006 10:05:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=19</guid>
		<description></description>
		<content:encoded><![CDATA[The recent advent of Web 2.0 no-software start-ups like <a href="http://www.37signals.com/">37signals</a>, <a href="http://www.salesforce.com/">salesforce.com</a>, <a href="http://www.writely.com/">Writely</a>, etc. is getting plenty of attention by the media and VCs alike, but I have not seem much about the pricing model of these no-software business models.

The basic idea, repeated all over the place in Web 2.0 start-ups, is that one can develop very rich user interfaces using thin client technology. Instead of installing a local copy of Microsoft Word, you use <a href="http://www.writely.com/">Writely</a>. Instead of installing <a href="http://www.siebel.com/">Siebel</a> in your enterprise as a CRM solution, you use <a href="http://www.salesforce.com/">Salesforce.com</a>. And so forth. Even Microsoft's Bill Gates, highly concerned about the future of Microsoft in a world of "applications built from the grassroots" is putting forward an online <a href="http://news.com.com/Microsoft+plans+Live+CRM+service/2100-1011_3-6092503.html">Microsoft Live CRM service</a>.

The advantage of using online solutions are allegedly savings in infrastructure and support costs. But is this really true?  Will individuals and business of all sizes alike chose online services versus an offline dedicated solutions? Obviously not, so who is then the target customer? Or rather, when will a consumer chose online vs offline applications?

An informed consumer (be it a home user, a web designer, or a CIO) will make a choice based on the expected utility he gets as a consumer from the software. He will compare the utilities and chose the one that seems most likely to suit his needs. The expected utility for each option, online or offline, will surely include quantifiable factors, such as software price, downtime costs, support costs, infrastructure costs, etc. as well as perceptions such as privacy, reputation, etc.

I prepared a highly simplified <a href="http://elsa.berkeley.edu/%7Emcfadden/">utility model</a>  that I could use to bring some light. In this model the only factors I considered were:
<ul>
	<li>Software price, for an offline solution, expressed as a monthly depreciation cost as a function of the number of employees. For solutions that require systems integration and professional services, I have diluted the cost of consulting in the total price of the solution, which then gets expressed as part of the monthly depreciation costs per employee.</li>
	<li>Service price, as a monthly recurring charge by the provider as a function of headcount.</li>
	<li>Infrastructure costs, for the offline solution, usually comprising storage, servers, backup, etc.</li>
	<li>Service support costs for the offline solution, to support the local infrastructure costs.</li>
	<li>Cost of downtime. I have assumed local class 4 availability in each domain. This translated into 0.01% downtime for offline software, 0.01% to local network, 0.01% to the local ISP, 0.01% to the provider ISP, and 0.01% to the service itself.</li>
</ul>
I have run the model with existing data for both "consumer applications", using 37signals <a href="http://www.basecamphq.com/">Basecamp</a> and Microsoft Project for pricing data, and for "enterprise applications", using Siebel and Salesforce.com for pricing.

The model yields interesting results:
<ul>
	<li>For both consumer and enterprise applications, the break-even point where the software-as-a-service is not competitive anymore is somewhere around 500 employees.</li>
	<li>The key differentiation between the utilities derives from infrastructure and support costs. For small to medium businesses, the cost of a dedicated and under-utilized infrastructure and service support personnel is prohibitive, and only large companies are able to realize economies of scale to make offline support viable.</li>
</ul>
We can clearly see the validity then of these start-ups, since in <a href="http://www.census.gov/csd/susb/susb03.htm">2003</a>, there were 5.7 million businesses in the US with less than 500 employees, at an average of 10 employees per firm; and 16,926 businesses with more than 500 employees, at an average of 3,300 employees per firm.

These 57 million businesses with 10 employees cannot afford the costs of dedicated infrastructure and service support, and are better off to chose an online application. For an average of 10 employees per firm, the model yields a cost of approximately $5,000/month for an offline solution, versus a $150/month for an online solution. $4,850/month of infrastructure and support savings surely justify the consumers choice.

As a side effect, the model yields a potential market size of approximately $10 billion for the Office applications, possibly close to $50 billion for the standard applications used currently in small and medium-sized businesses.

To conclude, it's interesting to note that the online software-as-a-service business model is a side-effect of an underlying consumer pain: lack of secure shared infrastructure.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2006-07-30 10:05:00</wp:post_date>
		<wp:post_date_gmt>2006-07-30 10:05:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pricing-models-for-web-20-software-as-services</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="saas"><![CDATA[SaaS]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409291278680064]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415197223;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:22;}i:1;a:1:{s:2:"id";i:21;}i:2;a:1:{s:2:"id";i:38;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Mark]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.vertabase.com</wp:comment_author_url>
			<wp:comment_author_IP>82.152.207.121</wp:comment_author_IP>
			<wp:comment_date>2006-08-17 09:58:00</wp:comment_date>
			<wp:comment_date_gmt>2006-08-17 09:58:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Web 2.0 is not an offshoot of a lack of secured shared infrastructure. By focusing on hard costs your utility model is missing some of the main benefits of Web 2.0 - like ease of use and low barrier to entry. <BR/><BR/>The true cost benefit for Web 2.0 applications comes in a) the reduced learning curve and b) the fact that an organization can try out the software without making a significant investment in time or money.  <BR/><BR/>You might find my post at http://www.vertabase.com/blog/the-feel-of-web-20-software/ interesting.  It doesn't go into the economic benefits of Web 2.0 but does touch on some other intangibles which your utility model misses.<BR/><BR/>You could make your model more comprehensive by including things like training time, reduced productivity while users get up to speed, time spent on internal politics to get budget for software with a higher entry point and the size of the downsize risk associated with higher dollar entry point type software.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Extremely Aggresive Pricing Makes Google Apps Premier Edition Sexy to Small and Medium Sized Businesses | Bruno Fernandez-Ruiz]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/?p=38</wp:comment_author_url>
			<wp:comment_author_IP>63.99.9.21</wp:comment_author_IP>
			<wp:comment_date>2007-02-22 23:03:56</wp:comment_date>
			<wp:comment_date_gmt>2007-02-22 23:03:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] we discussed back in August when looking at the SaaS pricing models, the SaaS model addresses the challenges small and medium businesses IT departments face to provide [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3511</wp:comment_id>
			<wp:comment_author><![CDATA[Anny]]></wp:comment_author>
			<wp:comment_author_email>butnshoppe@pacbell.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406007145</wp:comment_author_url>
			<wp:comment_author_IP>184.106.211.163</wp:comment_author_IP>
			<wp:comment_date>2012-05-22 01:46:19</wp:comment_date>
			<wp:comment_date_gmt>2012-05-22 01:46:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>be able to own and control your own data,and you will be crhegad for everything you do and you will also be tracked even more so than you are now, this is a nightmare and with  the google laptop you can get 16tb of cloud storage for the low low price of 350$ .per month!they have other pricing but you have a better chance of figuring out how derivatives or credit default swaps work than understanding 2 words of their so called pricing structure</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337651179.6368";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9189</wp:comment_id>
			<wp:comment_author><![CDATA[Neil]]></wp:comment_author>
			<wp:comment_author_email>neil@everyclass.com</wp:comment_author_email>
			<wp:comment_author_url>http://https//everyclass.com</wp:comment_author_url>
			<wp:comment_author_IP>211.30.58.10</wp:comment_author_IP>
			<wp:comment_date>2012-11-24 05:48:36</wp:comment_date>
			<wp:comment_date_gmt>2012-11-24 05:48:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>I hadn't seen the the split by number of employees for saas versus dedicated infrastructure before.</p>

<p>Your focus is primarily on cost, though in my experience the decision factors are often more subjective.  How long will in take to teach my staff new technology? What is the impact on existing IT support staff?  How do I transfer my data from old to new systems? What about privacy and security concerns?  Friction caused by sunk costs.</p>

<p>However, as more people become comfortable with these services at home, and saas service offerings outstrip in-house infrastructure offerings, I think your financial analysis will support the tsunamic switch to these saas services.</p>

<p>Thanks.,</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1353736116.9664";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Transport and Housing: Chicken and the Egg?</title>
		<link>http://www.olympum.com/policy/transport-and-housing-chicken-and-the-egg/</link>
		<pubDate>Wed, 02 Aug 2006 23:22:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[The British policy makers seem to have a tendency to first develop land and then put suitable transport infrastructure in place. Obviously, a significant factor for people choosing their next residence is road infrastructure and, to a lesser degree, public transport. Current government plans include creating over 100,000 new houses in regions like the South East, partially to release some pressure from the already overcrowded London. In cities like Ashford, in Kent, the local job market is almost non-existent, and the only population that can potentially be attracted to these new developments are London commuters which move their residence but keep their jobs in London.

The authorities seem to forget who they are really promoting housing for: without suitable public transport, London commuters will not chose to live in Ashford; without an inflow of public money and incentives to businesses to relocate to Ashford, there won’t be any job creation. The government policy is however to invest in infrastructure only after there is housing demand. Obviously there won’t be any housing demand since there is no infrastructure for the London commuters.

To be completely fair, some level of investment is being made in road infrastructure. Road construction creates local jobs and gives a huge inflow of construction money to the regions of Britain, boosting local economies with public money, and providing a fertile environment for new businesses, thanks to public money and modern transport links. Altogether, road infrastructure investments create significant public wealth and are a powerful vehicle to redistribute wealth.

Road infrastructure investments however result in increased flows, and surprisingly do not reduce traffic jams but in the very short-term. Quite the opposite, new motorways end up creating more traffic congestion, measured as person*hours of wasted time to the economy. While road infrastructure investments have clear benefits for local and regional development, they don’t quite help to attract new population since road infrastructure does not make a commuter’s journey significantly shorter.

The British authorities should consider investing more in public transport, and less on motorway expansion. Without better public transit, it will prove impossible for the authorities to introduce the planned road pricing and ramp metering changes; at least not without becoming a political suicide.

Most London commuters use trains, often their only choice. The railway system offers very poor service levels due an ageing and undersized infrastructure, and it requires multi-billion investments to be fit for purpose. Unfortunately it’s not only a matter of money: the railway system is very hard to scale around London given the scarcity of land. It proves to be a very unpopular choice to demolish a voter’s house!

Giving these constraints, British authorities should really look of infrastructure as an instrument for local and regional development, and they should clearly consider alternatives such as High-Occupancy Vehicles, Fast Lanes, Commuter Bus Services, and potentially faster rail commuter services.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2006-08-02 23:22:00</wp:post_date>
		<wp:post_date_gmt>2006-08-02 23:22:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>transport-and-housing-chicken-and-the-egg</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="policy"><![CDATA[Policy]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409289718423553]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Web 2.0, The New Old?</title>
		<link>http://www.olympum.com/saas/web-20-the-new-old/</link>
		<pubDate>Mon, 21 Aug 2006 22:13:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[There seems to be at least <a href="http://www.redherring.com/Article.aspx?a=18053&amp;hed=17+MS+Office+Killers">17 startups taking on the A-Team of the desktop applications</a>, and possibly another hundred thousand teenagers creating their own little Web 2.0 application-du-jour in communities like <span style="font-style: italic">entrepreneur extraordinaire </span>Mark Andressen's <a href="http://www.ning.com/">Ning</a>.

Since <a href="http://offthespot.blogspot.com/2006/07/pricing-models-for-web-20-software-as.html">the software-as-a-service business model</a> is mainly only attractive for smaller to medium companies, why are there so many web 2.0 applications popping out everywhere?

I believe the catalyst has been a generational change. Web 2.0 is not anymore an emerging phenomena only found among geeks playing with XML, and asynchronous HTTP requests. The generation of young adults in their early- to mid-twenties have grown using the internet as a routine. They learned how to collaborate online using Yahoo!, how to use Google to find the solution to their assignment or homework, how to download MP3s using eMule, etc. and most importantly how to skim through the rubbish to get the very simple: content. The internet is just one more thing they use in their lifes, just like a phone. Given that they have grown on it, doing homework and making friends on the web, it is the collaborative aspect of the internet what possibly makes software-as-a-service interesting. It's Wiki-Extreme if you let me put it that way.

Okay, so you have a market. You have entrepreneurs. How do they meet each other? Most of the startups doing Web 2.0 services will fail (I hope this is not a surprise!) and only those that are able to see beyond the collaborative, minimalistic aspects of the software-as-service business model will be able to survive. Simple usability, Apple-like design and aesthetics, and a beta-always badge are requirements to be in the Web 2.0, but fulfilling functional requirements are at the end of the day what makes an application work. Collaboration is fine, but not all business processes are suited for collaboration. So, what's the new old?
<ul>
	<li>Information lock-in is the biggest simple asset these startups should leverage. They will need to lock in their customers into their proprietary document/workflow formats, to avoid switching. It's a market with almost no barriers of entry, and the only protection they will have is information lock-in.</li>
	<li>Web 2.0 software-as-a-service should offer the products for free right now (yes!). The marginal cost for you to give the application to an additional user is close to zero, so your only short-term objective should be to create a large customer base, bigger than your competitors. As the market develops, the  number of players will be reduced, but you will have your customers locked-in.</li>
	<li>As the market matures, you will need to start making money (uh?). Seriously, don't expect to make a business out of AdSense! So how do you make money? Your best returns will come from premium services targeted those companies to who software-as-a-service is borderline to not being competitive anymore, and would be tempted to go for traditional solutions ala Microsoft Office. For these customers you will need to offer the extra mileage: better backups, better training, consultancy, etc.</li>
	<li>Price accordingly: free for most, pay for a few. The more free customers you have, the more the few will be willing to pay to ensure format compatibility.</li>
</ul>
These are nothing but the good old economical principles that apply to the web 2.0 information economy. Not surprising.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2006-08-21 22:13:00</wp:post_date>
		<wp:post_date_gmt>2006-08-21 22:13:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>web-20-the-new-old</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="saas"><![CDATA[SaaS]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409287097352192]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>The future of hosted software</title>
		<link>http://www.olympum.com/saas/the-future-of-hosted-software/</link>
		<pubDate>Fri, 08 Sep 2006 07:47:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[As we discussed originally while looking at <a href="http://offthespot.blogspot.com/2006/07/pricing-models-for-web-20-software-as.html">Web 2.0 software-as-a-service business models</a>, we saw how hosted software is not a competitive offering for mid- to large companies over 500 employees. <a href="http://www.itweek.co.uk/2163776">New research by Quocirca and Forrester</a> now comes to a similar conclusion, and they add that there is a grey zone between 250 and 500 employees where it's not clear the value in hosted services. Quocirca concludes saying that hosted services are rarely cheaper than in-house services, overseeing the 5.7 million businesses in the US under 500 employees. I am still to read both research reports to understand the full details.

Additionally, these studies seem to use current pricing models, such as the one from salesforce.com, but miss some of the points raised by <a href="http://www.vertabase.com/blog/the-feel-of-web-20-software/">Mark</a>: the utility of hosted software goes well beyond cost (the focus of Quocirca and Forrester research) and includes less tangible things such as training time, added security, and productivity (as already commented by Steve Garnett, of salesforce.com, when asked about these two research reports). Also, as we discussed while <a href="http://offthespot.blogspot.com/2006/08/web-20-new-old.html">comparing the Web 2.0 to the "old economy"</a>, it will become necessary for hosted software providers that want to remain in the market to start providing free services, adding premium services, leveraging information lock-in and enhancing the value of the intangible benefits such as usability, ease of upgrade, automatic security/patch management, etc.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2006-09-08 07:47:00</wp:post_date>
		<wp:post_date_gmt>2006-09-08 07:47:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-future-of-hosted-software</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="saas"><![CDATA[SaaS]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409286329425920]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.152.207.121</wp:comment_author_IP>
			<wp:comment_date>2006-12-08 01:50:00</wp:comment_date>
			<wp:comment_date_gmt>2006-12-08 01:50:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, Bruno, now I know a little bit who and what you are.<br /><br />It looks, we have a few common interests in IT and I expect a joy talking with you next time.<br />- Michael Poulin]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3570</wp:comment_id>
			<wp:comment_author><![CDATA[Dege]]></wp:comment_author>
			<wp:comment_author_email>alan56@adm.cgmh.org.tw</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406010029</wp:comment_author_url>
			<wp:comment_author_IP>177.12.243.114</wp:comment_author_IP>
			<wp:comment_date>2012-05-22 10:46:36</wp:comment_date>
			<wp:comment_date_gmt>2012-05-22 10:46:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Enjoyed every bit of it I ought to say, as a whole lot as I enjoyed ridneag what you had to say, I couldnt help but shed interest right after a while .</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337683596.4082";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3726</wp:comment_id>
			<wp:comment_author><![CDATA[Tatiana]]></wp:comment_author>
			<wp:comment_author_email>321651558@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406008613</wp:comment_author_url>
			<wp:comment_author_IP>148.245.43.131</wp:comment_author_IP>
			<wp:comment_date>2012-05-24 00:34:34</wp:comment_date>
			<wp:comment_date_gmt>2012-05-24 00:34:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>:There are definitely a lot of dtaiels like that to take into consideration. Thatb4s a amazing point to bring up. I will offer you the thoughts above as general inspiration but clearly there are actually questions just like the one you bring up exactly where the most critical point definitely will be working in honest very good faith. I donb4t know if most excellent practices have emerged around things like that, but I am certain that your job is clearly identified as a fair game.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337819674.9799";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>The B2B of Mashups: Mashboards</title>
		<link>http://www.olympum.com/future/the-b2b-of-mashups-mashboards/</link>
		<pubDate>Thu, 14 Sep 2006 08:45:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[I came some time ago across an interesting buzzword, <a href="http://software.silicon.com/applications/0,39024653,39162389,00.htm">mashboards</a>, which is really starting to show that at the end of the day what really matters is systems integration. Where we had mashups in the B2C world, we now have mashboards in the B2B world.

Mashboards will become a flourishing area for SaaS. They target the SMB market and address exactly the customer pain. I can see how we'll be hearing about SOA for web in no time, or web-driven business processes, ... Let's wait and see how the analysts call this one. For the time being I'll call them mashboards.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2006-09-14 08:45:00</wp:post_date>
		<wp:post_date_gmt>2006-09-14 08:45:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-b2b-of-mashups-mashboards</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409282743275520]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2576</wp:comment_id>
			<wp:comment_author><![CDATA[Abramovicl]]></wp:comment_author>
			<wp:comment_author_email>abramoviclpk@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>212.95.54.176</wp:comment_author_IP>
			<wp:comment_date>2009-01-13 13:36:54</wp:comment_date>
			<wp:comment_date_gmt>2009-01-13 13:36:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi , i have some questions about you desing
maybe you can give designer contacts?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Moved to hosted Wordpress</title>
		<link>http://www.olympum.com/other/moved-to-hosted-wordpress/</link>
		<pubDate>Sat, 03 Feb 2007 11:08:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/2007/02/03/moved-to-hosted-wordpress/</guid>
		<description></description>
		<content:encoded><![CDATA[I hate information locking and since I am paying for virtual private hosting I thought I would move out of blogger. I also changed the layout significantly, and used a theme by <a href="http://themes.wordpress.net/columns/2-columns/1127/web-20-100/">Neil Merton</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2007-02-03 11:08:08</wp:post_date>
		<wp:post_date_gmt>2007-02-03 11:08:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>moved-to-hosted-wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409282349006849]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Yahoo! amends severance plan</title>
		<link>http://www.olympum.com/yahoo/yahoo-amends-severance-plan/</link>
		<pubDate>Wed, 10 Dec 2008 23:45:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[Interesting <a href="http://biz.yahoo.com/e/081210/yhoo8-k.html">change of terms of the YHOO severance package</a> to "sweeten" a potential deal, and avoid a multi-billion bill for a Change of Control. I suspect the Board of Directors might be preparing for a change and a take-over. YHOO was up 9.93% today (although this filing was made public after the market closed).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date>2008-12-10 23:45:42</wp:post_date>
		<wp:post_date_gmt>2008-12-10 23:45:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>yahoo-amends-severance-plan</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="yahoo"><![CDATA[Yahoo!]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2470</wp:comment_id>
			<wp:comment_author><![CDATA[Tejus Trivedi]]></wp:comment_author>
			<wp:comment_author_email>tejustriv@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.tejustrivedi.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>68.36.203.100</wp:comment_author_IP>
			<wp:comment_date>2008-12-11 15:13:23</wp:comment_date>
			<wp:comment_date_gmt>2008-12-11 15:13:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[We should expect a sale of Yahoo’s search business soon. The changes to the severance plan have conveniently addressed exactly such a situation i.e a sale of Yahoo’s search business. Yahoo has managed to kill 2 birds with one stone- settle a pending lawsuit as well as make itself more attractive to a potential offer.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>The Cloud Search Open Source Landscape</title>
		<link>http://www.olympum.com/?p=370</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=370</guid>
		<description></description>
		<content:encoded><![CDATA[## Search Architecture 101

To scale search as both queries per second and corpus size increases, we need to enable distributed search, and the search index must be sharded. **Distributed indexing** may happen either by document sharding or by term sharding:

1. Document-based sharding: each shard has index for subset of docs. A K word query requires O(K*N) disk seeks on N shards.
2. Word-based sharding: each shard has subset of words for all docs. A K word query requires O(K) disk seeks, but much higher network bandwidth is needed to index.

For most deployments, *sharding by document is the preferred approach* for providing distributed indexing.

In addition to distributed indexing, search queries must be spread and routed to the relevant search nodes. The options for **distributed search** are:

1. Dedicated load-balancer(s) in front of the search nodes. The corpus is broken into N shards, each replicated R times, for a total of RxN search nodes. A load-balancer picks one of the shard replica sets, and then fans out the query to the N shards in the replica set. This design introduces an additional point of complexity and is complex to scale elastically, but provides the best-possible query latency. This is the approach that Solr and Solandra follow.

                                       query
										 |
										 |
										 v										 
                             replica balancing server
							 |                     |
							 |                     |
							 v                     v
		  shard routing web-server                shard routing web server
		   |         |         |				   |         |         |
		   |         |         |				   |         |         |
		   v         v         v		   		   v         v         v
		  shard     shard     shard		  		 shard     shard     shard

2. Every search node is a peer and capable of answering any query, and the search node's storage system provides the distribution mechanisms for the index. This is simple from a serving standpoint, allows elastic cluster operations, but introduces additional latency. This is the approach that ElasticSearch and LuceneHbase follow.

                                        query
										  |
										  |
										  v
					 layer 3 direct server return load balancer
					 |           |            |             |
					 |			 |			  |				|
					 v			 v			  v				v
                     node		node		 node		  node
					 |           |            |             |
					 |			 |			  |				|
					 v			 v			  v				v
		        	 search index in elastic distributed storage

In [Apache Lucene](http://lucene.apache.org/), the index and search design looks like this:

	{doc} --> IndexWriter --> FSDirectory <-- IndexReader <-- IndexSearcher <-- {query}
								  |
								  |
								  v
							   	disk

In a load-balanced architecture, we can split the search index across Lucene instances and have the load balancer route and spread queries. This is powerful and extremely scalable, but architecturally it makes it more complex to scale elastically, as rebalancing shards is hard since the index needs to be fully recomputed. Solr follows this design.

When following a peer-based search node design, there are two possible ways of performing distributed indexing with Lucene:

1. Implementing custom `IndexWriter` and `IndexReader`, i.e. there are no index segment files, distribution is solved by an underlying distributed store and the indices are stored in a format optimized for that distributed store. This is relatively simple and is what Solandra and HBasene do. See [[article on LuceneHbase](http://www.infoq.com/articles/LuceneHbase)] for details. In this design, all search nodes are equal as the IndexReader reroutes behind the scenes.

		{doc} --> IndexWriter --> FSDirectory <-- IndexReader <-- IndexSearcher <-- {query}
					  |					               |
					  |					               |
					  v					  			   v
				 Custom IndexWriter				Custom IndexReader
				      |                                |
				      |                                |
					  -----> Distributed Storage <------
					   
2. Implementing custom `FSDirectory`, i.e. index segment files are distributed across filesystems on multiple nodes. This is simple architecturally but harder to implement than (1). This is what ElasticSearch does. In this design, all nodes are "equal" and can be used for querying, as `FSDirectory` hides the distributed store.

		{doc} --> IndexWriter --> FSDirectory <-- IndexReader <-- IndexSearcher <-- {query}
									  |
									  |
									  v
    						 Distributed storage

## Concerns

To be able to provide a distributed search system, these are the usual concerns we should look at:

* Distributed indexing
* Distributed querying
* Near real-time indexing
* Faceted search
* Hadoop and HBase friendly
* Custom scoring algorithms
* Custom indexing algorithms
* Maintainability
* Operability

## Alternatives

In the open source space, these are the current leading alternatives (full search systems):

* Solr
* ElasticSearch
* Solandra
* HBasene
* Sensei (Zoie, Bobo)
* IndexTank
* Lily

### Solr

[Solr](http://lucene.apache.org/solr/) is the grandfather of all the Lucene-based search systems. Now part of Apache, and originally developed at CNET, Solr offers an HTTP indexer and query engine running on top of Lucene and Jetty. Solr offers a lot of features and has an active community. Historically Solr suffered from: (1) lack of distributed indexing, (2) complex distributed search, and (3) lock-collision between the indexer (writer) and the query engine (reader).

Work has been done in trunk to introduce distributed search via Zookeeper. Index segment files are stored in each solr host in the file system, and Zookeper is used to coordinate the configuration. Search nodes are aware of each other and a search query can be sent to any node which will in turn distribute to all other nodes. To achieve scalability and HA replicas can be created and Solr will automatically load-balance.

Distributed indexing is still not available. See [JIRA-2358](https://issues.apache.org/jira/browse/SOLR-2358). As a result the client initiating the doc indexing is responsible for distributing the indexing requests across the shards.

In regards to the index reader/writer collision, inserts and updates may severely degrade read performance in Solr. By design, Solr is optimized for fast search (reads), and therefore indexes new documents as a batch, and installs a new version of the entire index. Installing a new index is costly and no way near real-time. By design, Solr is not trying to address this in the "persistent" form of the index (from Solr's wiki):

>If you desire frequent new collections in order for your most recent changes to appear "live online", you must have both frequent commits/snapshots and frequent snappulls. The most frequently you can distribute index changes and maintain good performance is probably in the range of 1 to 5 minutes, depending on your reliance on caching for good query times, and the time it takes to autowarm those caches.

> Cache autowarming may be crucial to performance. On one hand a new cache version must be populated with enough entries so that subsequent queries will be served from the cache after the system switches to the new version of the collection. On the other hand, autowarming (populating) a new collection could take a lot of time, especially since it uses only one thread and one CPU. If your settings fire off snapinstaller too frequently, then a Solr slave could be in the undesirable condition of handing-off queries to one (old) collection, and, while warming a new collection, a second “new” one could be snapped and begin warming!

In trunk we can find some near real-time features. Soft commits are used to get the document in a near realtime view of the index. Hard commits ensure that documents are on stable storage. From the wiki:

> A common configuration might be to 'hard' auto commit every 1-10 minutes and 'soft' auto commit every second. With this configuration, new documents will show up within about a second of being added, and if the power goes out, you will be certain to have a consistent index up to the last 'hard' commit.

In summary, pros:

* Large community support.
* Large deployments.
* Actively developed.
* Feature rich.
* Fast (caches index in-memory from disk).
* Zk-based distributed search.

Cons:

* No distributed indexing.
* Manual replication and sharding.
* Difficult to distribute NRT "soft" commit. 
* Tuning for writes is very difficult.

### ElasticSearch

[ElasticSearch](http://www.elasticsearch.org/) offers an out-of-the-box clustered search solution. Also, in contrast with Solr, ES is optimized for near real-time search, i.e. updates (writes). ES core is based on Netty and offers an HTTP JSON protocol and a native thrift-based protocol. It uses an older version of Lucene that Solr, which means some Solr features are not available.

ES fully leverages the `IndexWriter` and `IndexReader` from Lucene, and provides a custom implementation of `FSDirectory` that ensure replication and sharding.

ES nodes are discovered either via multicast at startup (a no-go for a cloud network topology), or via configuration (not Zk). ES is designed for all replica nodes to do the indexing to ensure a near real-time index. Documents are indexed on a primary shard and propagated to all replicas to ensure availability (index copies). ES manages failures and keeps automatically rebalancing index segments in the cluster, by splitting large indexes into smaller ones. Indices move as nodes are added or removed. To be able to recover in case of failures, ES keeps a long-term persistent copy of the indices in a "gateway" component.

ES is primarily developed by Shay Banon. The code is well documented, and has good testing coverage. The user documentation is sufficient but could be improved.

**Pros**:

* Distributed indexing.
* Distributed search.
* Near real-time.
* Active community.
* Large (?) deployments at StumbleUpon and Mozilla.
* Fast for big indices.
* Multi-tenancy.
* Operability.

**Cons**:

* Multicast-based or config-based node discovery.
* Documentation.
* Recovery from failure (from "gateway").

### Solandra

[Solandra](http://www.datastax.com/wp-content/uploads/2011/07/Scaling_Solr_with_Cassandra-CassandraSF2011.pdf) is Solr on Cassandra. Solandra implements a custom `IndexReader` and the `IndexWriter` that store the index in Cassandra (instead of using segment files). Cassandra adds automatic sharding and replication, as well as near real-time (as there is no commit). Solr runs _in_ Cassandra (same JVM).

**Pros**:

* Distributed indexing
* Distributed search
* Near real-time search

**Cons**:

* Slow
* Memory greedy
* Small community
* Support (?)
* Requires additional load-balancer
* Term-based partitioning
* By-passes most of Lucene's NRT index segment optimizations.

### HBasene

[HBasene](https://github.com/akkumar/hbasene) is architecturally similar to Solandra, but using Hbase instead of Cassandra. HBasene does not seem to be maintained.

### Sensei

[Sensei](http://senseidb.com/) is a search system from LinkedIn. It uses Zoie for near real-time search indexing and Bobo for faceted search. It follows the same approach as Solandra and HBasese, by providing implementations of `IndexReader` and `IndexWriter` that distribute the index. There is a small growing community. **There are no unit tests in the open source version**.

### IndexTank

[IndexTank](https://github.com/linkedin/indextank-engine) wrote a search engine from the ground up. IndexTank uses parts of Lucene: the tokenizers, to be compatible with the query syntax, and the index format for persistence on disk. **There are no unit tests in the open source version**.

### Lily

[Lily](http://docs.outerthought.org/lily-docs-current/ext/toc/) is a Solr based system. The index is stored in Solr, and the original document in HBase. Lily adds automatic distributed indexing and routing on top of Solr. It shares the same limitation with Solr that it's not elastic:

> Shards cannot be added or removed on the fly: if you decide you want more or less shards, you need to define a new index and re-index your content into that new index. Nonetheless, Lily allows changing the sharding configuration of existing indexes on the fly without complaining. When doing this, working indexers will be restarted to take the new configuration into account (a running index re-building job would be unaffected). You have to consider yourself if the changes you make have sense without rebuilding the index.
 
## Summary

First in terms of high-level design choices:

* Document-based partitioning is the way to go for most use cases.
* Elasticity and multi-tenancy can only be achieved realistically in peer search node solutions.

In terms of implementation alternatives:

* IndexTank and Sensei get ruled out because of the no-availability of unit tests.
* Solr and Lily get ruled out because they do not offer a peer search solution.
* Solandra gets ruled out because it requires Cassandra.

ElasticSearch and Lucene on HBase are the best solutions to the problem:

* ElasticSeach requires work to add a more cloud-friendly node discovery mechanism and an ability to access the search index segments from Hadoop.
* Lucene on Hbase requires substantial work and ongoing support in order to be able to compete in performance and scalability (cost of scaling) with ElasticSearch, as less of Lucene's optimized index segment infrastructure is used.

## Other Resources

* [Lucene at twitter (PDF)](http://www.lucenerevolution.org/sites/default/files/Lucene%20Rev%20Preso%20Busch%20Realtime_Search_LR1010.pdf)
* [ElasticSearch and Solr feature comparison (Google Docs)](https://docs.google.com/present/view?id=dc6zhtt5_1frfxwfff&pli=1)
* [Google's search system design evolution (video)](http://videolectures.net/wsdm09_dean_cblirs/)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>370</wp:post_id>
		<wp:post_date>2012-01-30 00:09:04</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Apple Cool and Insecure</title>
		<link>http://www.olympum.com/security/apple-cool-and-insecure/</link>
		<pubDate>Sat, 03 Feb 2007 14:14:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[Apple has made significant (relative) intakes into the OS business. I mean, wow, Apple is cool. I like the Aqua looks, the whole iPod culture (which to be true is the one making Apple popular -- I even bought a pink mini for my daughter Anaïs). But a mouse with one button? Hell ... if a command line guy like me is really desperate to get a mouse, he certainly won't be getting a mouse without a middle button, not to talk about a mouse with a single button! I still think the single coolest feature in X11 for donkey years has been the middle button. Anyway, I am digressing.

So, yeah, cool and everything, the scripting kiddies loving their Macs, big marketing and communications machine, but Apple has failed to think beyond Vista and NeXT, and not only that, <a href="http://applefun.blogspot.com/2007/01/moab-31-01-2007-stay-tuned-and-farewell.html" title="Mac-Bug-A-Day">it has messed up the whole BSD kernel rendering every single Mac OS out there as insecure as Windows OS</a>. Well done boys.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2007-02-03 14:14:51</wp:post_date>
		<wp:post_date_gmt>2007-02-03 14:14:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apple-cool-and-insecure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409279627317248]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Skype, Ebay and Google</title>
		<link>http://www.olympum.com/yahoo/skype-ebay-and-google/</link>
		<pubDate>Wed, 07 Feb 2007 08:28:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[Skype asked me yesterday to upgrade last night to the final 3.0 (I use Skype for video conferencing because of its ability to go through firewalls by tunneling on port 80). So having run the beta for over 3 months now, I thought it would be a good idea.  During the install I was prompted to whether I wanted the Google toolbar installed, at which point I stopped the install and uninstalled Skype (I hate when install programs creep with toolbars, and all other sort of rubbish plugins that I did not ask for).

But what is Ebay's strategy by shipping a competitor's product? Google merchant was born to compete directly with Paypal, which I am sure Ebay's executives did not receive too well. However, not far later in summer <a href="http://www.google.com/intl/en/press/pressrel/ebay.html" title="Google and Ebay press release.">Ebay signed a large multi-year advertisement deal with Google</a>. Buried in that press release, an announcement that Google Talk creeps into Skype. And now Skype ships with Google Toolbar.

Google has definitely won a lot: extend its messenger network, sell advertising, and get the toolbar distributed. But Ebay?

Well, Ebay's strategy is probably to focus on their core auction business, and use the other products as channels to bring in further revenue to the auctions (they see  Skype as a tool to increase their market share in the auction business). Skype direct revenue from SkypeOut and SkypeIn is peanuts in comparison with Ebay's auction business. And in that context, any sort of interoperability, which would include Google Talk, is welcome.

All great as a concept, but why pick Google?

Ebay would have been better picking an advertising channel from a non competitor, such as Yahoo! With Yahoo! they would have obtained the advertisement network, the toolbar, the Yahoo! IM (a true IM player, unlike Skype). All I know is that I won't be buying any EBAY stock any time soon.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2007-02-07 08:28:15</wp:post_date>
		<wp:post_date_gmt>2007-02-07 08:28:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>skype-ebay-and-google</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="yahoo"><![CDATA[Yahoo!]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409278708768769]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415021350;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:621;}i:1;a:1:{s:2:"id";i:38;}i:2;a:1:{s:2:"id";i:121;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Feed aggregator: Pipes at Yahoo!</title>
		<link>http://www.olympum.com/yahoo/feed-aggregator-pipes-at-yahoo/</link>
		<pubDate>Thu, 08 Feb 2007 13:10:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[I had a quick go at <a href="http://pipes.yahoo.com">Yahoo!'s new pipes product</a>. Yahoo! pipes is an aggregator product (not intended for end-consumers) to visually program/constract feed aggregators from any sources. It looks complex as a consumer concept, and it is, but it's actually really easy to use as a programming tool. It took me less than 5 minutes to create a <a href="http://pipes.yahoo.com/pipes/tntDHnO32xG98CgCr_ymrA/">feed aggregator for stock news</a>.

It would be really interesting now if the aggregated feed results ("pipe output") could be mashed up into other sources, like Yahoo! Maps, etc. using GeoRSS, KML or alike. That would then become a true consumer product!

<strong>Update: </strong>It seems like <a href="http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9010938&amp;source=rss_news10">Yahoo! pipes got clogged</a>. The site was brought down a few hours ago due to excessive demand. It received more attention that originally envisaged! Well, that's a good thing. I hope it comes back soon.

<strong>Update: </strong>The service is back up.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2007-02-08 13:10:44</wp:post_date>
		<wp:post_date_gmt>2007-02-08 13:10:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>feed-aggregator-pipes-at-yahoo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="yahoo"><![CDATA[Yahoo!]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409278398369792]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>smart2go Free Mobile Maps Service Competes with Tom-Tom</title>
		<link>http://www.olympum.com/mobile/smart2go-free-mobile-maps-service-competes-with-tom-tom/</link>
		<pubDate>Fri, 09 Feb 2007 08:03:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=28</guid>
		<description></description>
		<content:encoded><![CDATA[Today's <a href="http://www.technewsworld.com/rsstory/55657.html">TechnNews article about Nokia's smart2go</a> brings up an interesting business model competing with GPS navigation devices such as Tom-Tom. <a href="http://www.smart2go.com/en/">Nokia's German-based Gate5  smart2go</a> is a free map service based on Symbian EPOC for Series 60, although probably we will see across other Nokia phones. smart2go offers free maps, which can be downloaded from a PC (I guess for planned usual routes) or over the air and bluetooth (for unplanned routes -- oops, I am lost!) One can store map files to the phone's MMC (obviously to its storage limit).

Whereas traditionally GPS navigation devices have charged upfront for the hardware device, and provided free mapping and navigation service, smart2go has no starting costs (if you already have a compatible device), and maps and local guides are free. Navigation services however are not free - smart2go offers daily, monthly or yearly subscriptions. I believe it is this flexibility in the subscription model what will make it interesting for a number of people that do not need to use a Tom-Tom every day.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2007-02-09 08:03:43</wp:post_date>
		<wp:post_date_gmt>2007-02-09 08:03:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>smart2go-free-mobile-maps-service-competes-with-tom-tom</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409276472815619]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415214245;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:79;}i:1;a:1:{s:2:"id";i:19;}i:2;a:1:{s:2:"id";i:11;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1256</wp:comment_id>
			<wp:comment_author><![CDATA[curt]]></wp:comment_author>
			<wp:comment_author_email>bushy1@wildblue.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>75.104.96.58</wp:comment_author_IP>
			<wp:comment_date>2008-01-25 02:54:37</wp:comment_date>
			<wp:comment_date_gmt>2008-01-25 02:54:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[how do i find the update for my Piva PNS-350 gps unit which had Smart2go for maps? it was supposedly bought out by Nokia.....]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Microsoft&#039;s Guidance on SaaS</title>
		<link>http://www.olympum.com/saas/microsofts-guidance-on-saas/</link>
		<pubDate>Tue, 13 Feb 2007 07:33:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=29</guid>
		<description></description>
		<content:encoded><![CDATA[Eweek reports about <a href="http://www.eweek.com/article2/0,1759,2092971,00.asp?kc=EWRSS03119TX1K0000594">Microsoft's architecture guidance on SaaS</a> (Software as a Service).  There is <a href="http://msdn2.microsoft.com/en-us/architecture/bb229292.aspx">code, a video and a screencast released on MSDN</a> which I highly recommend watching. Well done, Microsoft.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date>2007-02-13 07:33:16</wp:post_date>
		<wp:post_date_gmt>2007-02-13 07:33:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsofts-guidance-on-saas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="saas"><![CDATA[SaaS]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409269179305984]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Failure and Success of Enterprise Architecture</title>
		<link>http://www.olympum.com/architecture/failure-and-success-of-enterprise-architecture/</link>
		<pubDate>Fri, 09 Feb 2007 13:40:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=30</guid>
		<description></description>
		<content:encoded><![CDATA[Reading an article about the usual <a href="http://www.skyscrapr.net/blogs/strategic/articles/116.aspx">failures of Enterprise Architecture in Skyscrapr</a> I draw the following summary about what successful enterprise architectures have in common:
<ul>
	<li>Decrease complexity by <strong>partitioning</strong> problems into smaller non-overlapping problems.</li>
	<li>Increase probability of success by using <strong>fast iterations</strong> (rather than long iterations focusing too much on quality). The keyword here is <em>fast</em>. The faster the iteration in OOPA (observe, orientate, plan, act) the higher the likelihood of success.</li>
	<li>Create business architecture design, technical architecture design, implementation, testing and deployment for each partition. Don't move to another partition until the last one was completed. This is what the author calls <strong>iterative partitioning</strong>.</li>
	<li><strong>Prioritise the iterative partitions</strong> considering Time-to-Value, Return-on-Investment. Focus first on "low-hanging fruit" to establish credibility.</li>
	<li><strong>Think big, start small</strong>.</li>
	<li>Stay away from application architectures and focus on <strong>interoperability</strong> (ie don't try to standardise on the implementation).</li>
</ul>
I highly recommend the article. Straight to the point -- it's definitely not the typical abstract enterprise framework discussion.

<strong>Update (2007-11-19):</strong> Microsoft has eaten up the site and it's not providing the customary HTTP 302 response code, but I could dig the article again <a href="http://msdn2.microsoft.com/en-us/architecture/aa479371.aspx">here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2007-02-09 13:40:42</wp:post_date>
		<wp:post_date_gmt>2007-02-09 13:40:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>failure-and-success-of-enterprise-architecture</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409273943642112]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Locked out of Yahoo! Instant Messenger</title>
		<link>http://www.olympum.com/yahoo/locked-out-of-yahoo-instant-messenger/</link>
		<pubDate>Sun, 11 Feb 2007 18:11:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=31</guid>
		<description></description>
		<content:encoded><![CDATA[I have been using Yahoo! IM since 1999, but unable to log onto it over the last couple of years because of my employer's URL filtering system and firewall settings. It seems like my account has been deactivated by Yahoo! Customer Service:

<a href="http://www.olympum.com/wp-content/uploads/2007/02/screenshot.png" title="Yahoo! Customer Service removes my account."><img src="http://www.olympum.com/wp-content/uploads/2007/02/screenshot.thumbnail.png" alt="Yahoo! Customer Service removes my account." /></a>

My trouble is that I have lost all my contacts! Anybody, how do I get these back?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2007-02-11 18:11:53</wp:post_date>
		<wp:post_date_gmt>2007-02-11 18:11:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>locked-out-of-yahoo-instant-messenger</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="yahoo"><![CDATA[Yahoo!]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409273025093632]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Corporate Technologities: Keep the Power On!</title>
		<link>http://www.olympum.com/architecture/corporate-technologities-keep-the-power-on/</link>
		<pubDate>Tue, 13 Feb 2007 07:18:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[Any small startup that succeeds and grows to become a big corporation will suffer from technologitis, this is, the inflamation of technology and detachment from the business body.

Seriously, the startup mode, where technology governance is not necessarily as important as time-to-market, allows for dynamic environments that allow quick growth. But at the cost of increasing operational costs due to technologitis: most of the IT budget being spent in operations, in keeping the power on, and only a little fraction of the budget is actually spent in new business initiatives. Certainly not the place the business would like to be in.

Over the last couple of years, a lot of folks have been switching their strategy in chip technology, going from Sun SPARC to Intel Xeon, IBM Power5 to AMD Opteron, Intel Xeon to SUN Niagara, and what else. The end result is that as much as they might have solved a point problem, on the long term they have increased their operational complexity.

There is nothing wrong in switching technology, but one must be aware of the technology cycles inherent with any technology. Whereas changing an application framework is something that theoretically one can do every 12 to 18 months, given that major version upgrades tend to be quite <em>dramatic</em> it would not be that much additional cost to ditch the framework altogether (but beware, project managers will tell you otherwise).

But CPUs stay in the data center for at least 3 years, mostly 5 years, and sometimes even 6 or 7 years. A choice of CPU technology should be long-lived (some may argue CPUs are a commodity, but once you start facing bugs traceable to specific architectures, you wonder whether you would not be better off standardising on a single architecture). A particular vendor may not have at all times over 5 years the fastest, coolest, higher bandwidth chip out there, but good vendors will come regularly come back to take the first place

Before the release of Sun Niagara, Sun failed (repeatedly) to meet its own objectives and bring out its Rock processor, up to the point that it cancelled the whole project. The PR impact was damaging, as well as the effect on the books, and the stock plummeted. After the release of Niagara, a lot of folks came back looking at Sun, hoping all trouble was over. The chip is good, but the question is not whether <em>is </em>good, but whether Sun is able to keep innovating over the next 10 years to ensure the chip <em>remains</em> good.

Apple was using the IBM PowerPC chip on their laptop, desktop and server product line. But IBM was focused on its own server business, and engineering the Power5+ chip. Apple needed a low power high clock device that would make the Apple truly competitive with Intel's and AMDs' offering, otherwise their laptop sales would never go higher than PCs. The switch to Intel is surely costing Apple a lot of money in development, marketing and lost opportunities (not all software is ready for Intel). This switch it has however also served as a good marketing effort to bring it on front of typical PC users, and the Intel chip is still faster and cooler than a PowerPC. But what is really important as a lesson is that Apple switched vendors, not technologies.

<a href="http://www.theregister.co.uk/2007/02/13/ibm_power6_twice/">IBM just released yesterday a note on Power6</a>. Power6 chips will be coming up in mid-2007, at clocks reaching 5Ghz, with double the clock, double the bandwidth, and most importantly the same power profile. This is an amazing individual breakthrough, but nothing you would not expect out of one of the best research labs in the world, IBM's Almaden Research Center.

But while IBM keeps on delivering new technology breakthroughs, Sun has failed repeatedly in the past. Sun will have to prove itself repeatedly to stablish its credibility back. On the x86 side, AMD has shown historically its ability to innovate in the server space, and, to a lesser degree, Intel.

That's why for servers I will keep on recommending AMD/Opteron (Linux) and IBM/Power (AIX). They are cool, they keep your data center cool, and make you look cool! But whatever you happen to chose, make a good choice of vendor, not just technology, and stick to it for as long as the technology life is. Otherwise you will end up with technologitis.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2007-02-13 07:18:17</wp:post_date>
		<wp:post_date_gmt>2007-02-13 07:18:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>corporate-technologities-keep-the-power-on</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409269187289089]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Rails, Django, CodeIgniter, Symfony Performance Compared</title>
		<link>http://www.olympum.com/frameworks/rails-django-codeigniter-symfony-performance-compared/</link>
		<pubDate>Sat, 17 Feb 2007 09:18:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=36</guid>
		<description></description>
		<content:encoded><![CDATA[Surely performance is not the prime criteria for selecting a framework. Most people will say developer productivity, ease of maintenance, security and scalability are the most important factors.

I love the Ruby language and its expresiveness. And Rails has been a truly inspiring web framework. This is why I think the <a href="http://www.alrond.com/en/2007/jan/25/performance-test-of-6-leading-frameworks/">web frameworks performance test results run by Alrond</a> (and an update <a href="http://www.alrond.com/en/2007/feb/04/in-addition-to-the-test-of-mvc-frameworks/">here</a>) are highly disappointing for Rails. In Alrond's tests we find that Django giving up to 4x faster response times, and 2x more throughput. But I guess this is not a surprise, we always knew Python was faster than Ruby by just looking at <a href="http://shootout.alioth.debian.org/gp4/benchmark.php?test=all&amp;lang=python&amp;lang2=ruby">Debian's language shootout</a>.

I would add a couple of remarks to Alrond's results:
<ul>
	<li>Most shared web environments only offer PHP. Some hosting providers offer an old version of Python that will not support Django. So when using shared hosting, PHP is likely to be your only choice. PHP is a useful and proven language if you need to integrate with C/Java/whatever, but perhaps not as expressive nor OO as Ruby and Python. On the performance results side of things, CodeIgniter/PHP tests using a bytecode cache (APC) improve performance by 10x, and make them comparable to Django/Python. Plus CI runs on PHP4, which is what most web hosts out there are running today.</li>
	<li>If you want/have to avoid PHP, you are probably looking at Rails and Django as your main options. These will require you to use a Virtual Private Host or a dedicated server. Rails and Django don't work well on shared hosting. And if you are like me, on a tight hosting budget, you really want to get that extra performance and be on a framework where it's <em>really</em> cheaper to scale out. This is where Django/Python will shine.</li>
</ul>
At the end of the day, choosing between one of these web frameworks is actually a language choice. And right now, the only real language contestants for people looking for raw speed and stability are PHP (with opcode cache) and Python. And both seem to deliver comparable performance.

But I would not rule out Ruby completely just yet. <a href="http://jruby.codehaus.org/">JRuby</a> is making a lot progress, and you can even now <a href="http://recompile.net/2006/11/how_to_deploy_jruby_on_rails_a.html">run Rails with JRuby in  Sun's JEE container (glassfish)</a>. On the other hand, another interesting similar development which might rock Python is <a href="http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython">IronPython</a>, which runs Python on the .NET runtime.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2007-02-17 09:18:18</wp:post_date>
		<wp:post_date_gmt>2007-02-17 09:18:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-django-codeigniter-symfony-performance-compared</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="frameworks"><![CDATA[Frameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409267828748289]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415449672;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:10;}i:1;a:1:{s:2:"id";i:72;}i:2;a:1:{s:2:"id";i:363;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>On Levying ISPs for DRM-Free Content</title>
		<link>http://www.olympum.com/policy/on-levying-isps-for-drm-free-content/</link>
		<pubDate>Sun, 18 Feb 2007 09:01:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=37</guid>
		<description></description>
		<content:encoded><![CDATA[It should not be a surprise by now to see lawyers and politicians arguing bizarre things about the Internet. First, it was the infamous Senator Ted Stevens and his "<em>series of tubes</em>", and now it is the <a href="http://www.libertaddigital.es/noticias/noticia_1276299157.html">Spanish Authors Association (SGAE) proposing to charge the ISPs and operators for illegal P2P downloads</a>. Sort of a road-tax, but on the ISPs.<u1:p></u1:p><o:p></o:p>

The challenge with SGAE's proposal is that it is highly short-eyed and not understanding of the nature of the internet. It sadly follows the current trend across <st1:place><st1:place>Europe</st1:place></st1:place>, which makes our politicians think that they can fix any problem by imposing additional regulation.<u1:p></u1:p><o:p></o:p>

If European ISPs were charged such levies on P2P downloads, it would be naïve to think that they would stand still looking at their decreased margins. First, the ISPs would certainly pass the cost onto the end consumer by increasing monthly broadband fees, with the terrible and unfair side-effect of making lawful citizens pay for committing no sin.<o:p></o:p>

Secondly, every single ISP would start charging content providers for the usage of their networks. The media groups would not only need to pay their normal hosting and data centre fees as they currently do, but they would also have to pay every single other ISP in the country for the bandwidth used to connect end consumers to content.<u1:p></u1:p><o:p></o:p>

The interesting thing is that those big media groups are the likes of Universal/Vivendi, Sony Music, EMI, which all co-share production costs with the news groups of CBS, CNN, Canal+ and Prisa. So at the end of the day, SGAE would end shooting itself on the foot.<u1:p></u1:p><o:p></o:p>

In summary, the suggestion made by Pablo Hernández of SGAE is ill-conceived and hopefully will not see the light.<u1:p></u1:p><o:p></o:p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2007-02-18 09:01:26</wp:post_date>
		<wp:post_date_gmt>2007-02-18 09:01:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-levying-isps-for-drm-free-content</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="policy"><![CDATA[Policy]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409263709523969]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>52</wp:comment_id>
			<wp:comment_author><![CDATA[Ramiro]]></wp:comment_author>
			<wp:comment_author_email>valladolid@reyvalambient.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.reyvalambient.com</wp:comment_author_url>
			<wp:comment_author_IP>81.172.30.1</wp:comment_author_IP>
			<wp:comment_date>2007-04-20 08:02:14</wp:comment_date>
			<wp:comment_date_gmt>2007-04-20 08:02:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So many time without writtig in English, sorry for my faults. I hope that you be in the right about that the suggestion made by Pablo Hernández not see the light. But the blidness of ours politicians is so advanced in years and it can be an important threat for the development of internet. 

---------------------
Ramiro

Did I waste it?
Not so much I couldn't taste it
Life should be fragrant
Roof top to the basement
The last of the rock stars
When hip hop drove the big cars
In the time when new media
Was the big idea
That was the big idea.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Extremely Aggresive Pricing Makes Google Apps Premier Edition Sexy to Small and Medium Sized Businesses</title>
		<link>http://www.olympum.com/saas/extremely-aggresive-pricing-makes-google-apps-premier-edition-sexy-to-small-and-medium-sized-businesses/</link>
		<pubDate>Thu, 22 Feb 2007 23:03:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=38</guid>
		<description></description>
		<content:encoded><![CDATA[It seems like the SaaS media relationships departments have been busy since last night. Microsoft and BT are talking about <a href="http://news.zdnet.com/2100-3513_22-6161402.html">BT Application Marketplace</a>, <a href="http://news.zdnet.com/2100-3513_22-6161423.html">Salesforce is hinting about its 25,000 user customer</a> and <a href="http://news.zdnet.com/2100-9588_22-6161344.html">Google is in fanfarre-mode with Apps Premier Edition</a>. It's a busy today for Software-as-a-Service (SaaS), but I am not sure it's a coincidence but a follow up on last night's <a href="http://www.techcrunch.com/2007/02/21/possible-major-google-announcement-tomorrow/">rumour</a>, now confirmed, about Google's launch of <a href="http://www.google.com/a/enterprise/">Google Apps Premier Edition.</a>

Besides the news fanfare, I am afraid there isn't much new technology onto Google's announcement, but a rebranding of the existing Google Apps for your Domain (GMail, Google Calendar, and Google Talk) joined with Google Spreadsheet and Docs.

But there is a significant point to take into consideration with Google's announcement, and that is price, with the Premier Edition account being offered at $50/year subscription for 10Gb and a 99.9% SLA for email.

As we discussed back in August when looking at the <a href="http://www.olympum.com/?p=19">SaaS pricing models</a>, the SaaS model addresses the challenges small and medium businesses IT departments face to provide cost-competitive secure and reliable infrastructure to the business. As such, the low-cost, enhanced mobility, enforcable SLA, and improved security present in SaaS are very attractive factors to the business, to the extent of possibly threatening IT departments with closure.

Taking cost into account, Google is pricing Apps Premier at $50/year/user account, which is just over $4/month, significantly under what other SaaS are currently charging. As we discussed then, the current pricing model of other providers, resulted in a magic number of roughly 500 employees upto which SaaS is more attractive than inhouse hosted software. But Google's pricing model highly undermines that, and pushes that boundary all the way up to almost 15,000 employees. It's this aggressive pricing which is likely to make this offering succesful, and where Google will leverage economies of scale to make a good profit.

We know Google Apps is competitive against inhouse software for businesses upto 15,000 employees, but how does it leave its competitors?

Let's first look at the storage costs, by comparing it with the best online secure storage infrastructure, <a href="http://www.amazon.com/S3-AWS-home-page-Money/b?ie=UTF8&amp;node=16427261">Amazon S3</a>:
<ul>
	<li>$0.15 per GB-Month of storage used.</li>
	<li>$0.20 per GB of data transferred.</li>
</ul>
Typically in a hosting business you oversell, and you don't actually need all the storage you sell since most users never consume their quota. I don't expect users of Google Apps to be any different. Assuming a utilisation of 50%, which means an actual use of 5Gb per month per user, and a data transfer of 1Gb/month/user, the total yearly cost with S3 would be $11.4/year/user, or $11,400 for 1,000 employees.

That's for storage alone. In terms of servers, using this time Amazon's EC3 virtual hosting, at <span class="small">$0.10 per instance-hour consumed, the CPU cost of a 24x7 server would be $</span>876/year. EC3 VPS is equivalent to an 1.7Ghz x86 processor, and assuming we can host 10 users on each server, an organisation of 1,000 employees should be able to run on a $87,600 budget.

Considering only infrastructure costs, and taking application costs aside, a 1,000 employee organisation would spend almost $100,000 on an outsourced hosted model, versus $50,000 with Google, but this time application included. It's hard to arguee that Google's is not a very interesting proposition thanks to its extremely aggressive pricing.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2007-02-22 23:03:52</wp:post_date>
		<wp:post_date_gmt>2007-02-22 23:03:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>extremely-aggresive-pricing-makes-google-apps-premier-edition-sexy-to-small-and-medium-sized-businesses</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="saas"><![CDATA[SaaS]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409263017480192]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[edbong]]></wp:comment_author>
			<wp:comment_author_email>tim.delhaes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.applicationexchange.com</wp:comment_author_url>
			<wp:comment_author_IP>200.120.168.45</wp:comment_author_IP>
			<wp:comment_date>2007-02-25 14:57:15</wp:comment_date>
			<wp:comment_date_gmt>2007-02-25 14:57:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have been using Google Apps since August now … and I think its very cool. But the best thing is the Google API. For example we are developing an FREE open source "business application platform" (think salesforce.com). Our first application is working tightly integrated with GOOGLE APPS. http://www.applicationexchange.com.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Open APIs Attract Postini and Avaya to Google Apps</title>
		<link>http://www.olympum.com/saas/open-apis-attract-postini-and-avaya-to-google-apps/</link>
		<pubDate>Mon, 26 Feb 2007 21:33:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=39</guid>
		<description></description>
		<content:encoded><![CDATA[Google Apps is already grabbing corporate attention. It's not the Google apps' themselves, but the APIs to allow ISVs and other power software houses can use to write applications that extend or integrate with Google Apps. Whereas security was already a known concern about Google Apps, and Postini is certainly betting on the right horse, Avaya is being innovative and extending its IVR portfolio into the SaaS space.  The full article is <a href="http://www.cbronline.com/article_news.asp?guid=80F3BBF7-E445-4D93-BF30-5106005F4421">here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2007-02-26 21:33:33</wp:post_date>
		<wp:post_date_gmt>2007-02-26 21:33:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>open-apis-attract-postini-and-avaya-to-google-apps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="saas"><![CDATA[SaaS]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409258022068225]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Increased Transparency Shows Value of YPN</title>
		<link>http://www.olympum.com/yahoo/increased-transparency-shows-value-of-ypn/</link>
		<pubDate>Mon, 26 Feb 2007 21:40:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=40</guid>
		<description></description>
		<content:encoded><![CDATA[Yahoo!'s new search platform, project Panama, is already showing a win over the last month. A study by <a href="http://www.comscore.com/press/release.asp?press=1222">comScore</a> shows significant increases in Yahoo's click through rates, and ad effectiveness when compared to normal links. But to me what is more important, is that Yahoo! is showing due transparency to publishers. Google's lack of visibility is an abuse to 99% of publishers who have absolutely no idea of what goes on with click-through revenue sharing. And Google it's not only a black box: it's an abuse (don't be evil!??). Yahoo! is certainly hitting Google right where it hurts with YPN.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date>2007-02-26 21:40:29</wp:post_date>
		<wp:post_date_gmt>2007-02-26 21:40:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>increased-transparency-shows-value-of-ypn</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="yahoo"><![CDATA[Yahoo!]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409258210811905]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Increased Transparency Shows Value of YPN &raquo; Web Marketing News]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.nowsell.com/web-marketing-news/2007/increased-transparency-shows-value-of-ypn/</wp:comment_author_url>
			<wp:comment_author_IP>69.36.172.68</wp:comment_author_IP>
			<wp:comment_date>2007-03-04 04:32:49</wp:comment_date>
			<wp:comment_date_gmt>2007-03-04 04:32:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] : it s an abuse (don t be evil!?). Yahoo! is certainly hitting Google right where it hurts with YPN (continues) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>To SaaS or not to SaaS, a Utility-Based Decision</title>
		<link>http://www.olympum.com/saas/to-saas-or-not-to-saas-a-utility-based-decision/</link>
		<pubDate>Sat, 03 Mar 2007 08:30:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=41</guid>
		<description></description>
		<content:encoded><![CDATA[I remain skeptic about any attempts to break out SaaS value/price in a pure TCO, like in <a href="http://www.techweb.com/article/showArticle.jhtml?articleId=197007820">this article by Barry Rosenberg and Craig Wright on techweb</a>. If nothing else, simply because of the (human) random nature of choosing between intangibles such as security, mobility, usability, ... which are all <em>perceptions</em>.

Whereas I agree with the authors that the key challenge in comparing licensed to hosted software is establishing a common measuring tape to avoid comparing apples and pears, I don't agree that it's possible to quantify such measuring tape as a TCO model, simply because of the random nature of perception.

The choice process in deciding between licensed software and SaaS is not very different from the one we go through to choose between a Mac and a PC, between buying a house and a flat, between choosing to drive to work or taking a train, etc. The decision maker is forced in these cases to make a choice based on things that are simply not rationally comparable. In the case of SaaS, we must compare licensing costs to convenience of upgrades; in-house security-tight infrastructure to SLAs and trust models on hosted services; ubiquitous presence to speed of use; and a long list of other incomparable properties. While it is true that each decision maker, each CIO, will have different a measuring tape, no CIO will be able to put down the choice of SaaS vs licensed software as a TCO decision.

The choice of software hosting model (in-house vs off-house/SaaS) is a random utility-based decision, which can be modeled using <a href="http://emlab.berkeley.edu/users/mcfadden/index.shtml">random utility models</a> (RUM). RUMs are not only necessary for SaaS vendors to be able to adequately price their services, they are also a good modeling technique for decision makers to be able to compare between otherwise incomparable choices.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2007-03-03 08:30:40</wp:post_date>
		<wp:post_date_gmt>2007-03-03 08:30:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>to-saas-or-not-to-saas-a-utility-based-decision</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="saas"><![CDATA[SaaS]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409256718024705]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Silence</title>
		<link>http://www.olympum.com/yahoo/silence/</link>
		<pubDate>Sun, 15 Apr 2007 06:28:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=42</guid>
		<description></description>
		<content:encoded><![CDATA[I have been very much silent on my blog for the last 6 weeks. The reason has been me changing jobs to become Yahoo's Chief Architect of International Engineering. The first weeks at work have been absolutely thrilling and I am highly delighted to be working in such an amazingly skilled and enthusiastic team. I really look forward at the challenge ahead. Unfortunately being able to take on this challenge requires absolute dedication, and my ability to blog will be somehow more limited than in the past.
So if you are a usual reader, please bear with me for a little longer: posts will be coming back in no time.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date>2007-04-15 06:28:15</wp:post_date>
		<wp:post_date_gmt>2007-04-15 06:28:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>silence</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="yahoo"><![CDATA[Yahoo!]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409255094427648]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Gnome Hack Idea: FreeMind, Tomboy and EDS</title>
		<link>http://www.olympum.com/linux/gnome-hack-idea-freemind-tomboy-and-eds/</link>
		<pubDate>Fri, 27 Apr 2007 08:49:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[I take notes in meetings using <a href="http://freemind.sourceforge.net/wiki/index.php/Main_Page">FreeMind</a>. Every time I identify a task I  mark the node down using an icon and after the meeting I follow up creating the necessary tasks in <a href="http://www.gnome.org/projects/evolution/">Evolution</a>. I would like to be able to link my mindmaps to tasks in Evolution. Hopefully it can be done using FreeMind, or perhaps we need to invest in <a href="http://www.psycho-project.org/index.html">Psycho</a> or something similar tighter to the Gnome desktop. If we decide not to use FreeMind, the tool of choice should use FreeMind's XML schema to ensure interoperability with folks running other desktops.

Sometimes there is a node in the mindmap I would like to expand into a <a href="http://www.gnome.org/projects/tomboy/">Tomboy</a> desktop wiki page. Right now, I have to create the node on Tomboy and write down a reference in the mindmap with the URL to the wiki page.

Sometimes I am writing in Tomboy and I identify tasks required to follow up the note. I would like to create a wiki link to the task in EDS.

And of course, I would like to see my tasks in EDS, and be able to link back to FreeMind and Tomboy.

Microsoft Office has a similar feature.

How do we do that for the Gnome world?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2007-04-27 08:49:05</wp:post_date>
		<wp:post_date_gmt>2007-04-27 08:49:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gnome-hack-idea-freemind-tomboy-and-eds</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409255673237504]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415459497;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:46;}i:1;a:1:{s:2:"id";i:313;}i:2;a:1:{s:2:"id";i:55;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>65</wp:comment_id>
			<wp:comment_author><![CDATA[harri]]></wp:comment_author>
			<wp:comment_author_email>hmauria@netandcode.com</wp:comment_author_email>
			<wp:comment_author_url>http://harrimauria.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>217.232.250.123</wp:comment_author_IP>
			<wp:comment_date>2007-04-30 08:11:53</wp:comment_date>
			<wp:comment_date_gmt>2007-04-30 08:11:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, Bruno for a good hint of a really handy tool. I will put FreeMind into my toolcase. Unfortunately I am constrained by using Windows, so I can't give a try for the other tools you mentioned.

harri]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>75</wp:comment_id>
			<wp:comment_author><![CDATA[Piotr]]></wp:comment_author>
			<wp:comment_author_email>p.zurek@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.piotrzurek.net</wp:comment_author_url>
			<wp:comment_author_IP>125.238.2.93</wp:comment_author_IP>
			<wp:comment_date>2007-05-05 01:57:01</wp:comment_date>
			<wp:comment_date_gmt>2007-05-05 01:57:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Bruno,

I'm glad somebody have noticed Psycho and mentioned it as a valid opportunity for a usable application.
The  things that you talk about here, like compatibility with FreeMind (not only) and EDS are very high on the list of my priorities.
I think that the first thing of those you mentioned, that I would like to implement is import and synchronization with Tomboy.
The problem I have with Psycho is that I am the only one working on it and I'm learning everything necessary as I go - I have no previous programming experience. Only a clear vision where I want to get with Psycho.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>79</wp:comment_id>
			<wp:comment_author><![CDATA[Piotr]]></wp:comment_author>
			<wp:comment_author_email>p.zurek@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.piotrzurek.net</wp:comment_author_url>
			<wp:comment_author_IP>203.97.71.38</wp:comment_author_IP>
			<wp:comment_date>2007-05-07 00:44:19</wp:comment_date>
			<wp:comment_date_gmt>2007-05-07 00:44:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Bruno,

I'd love to hear from you which features that you use in FreeMind, would be "must haves" for you in Psycho.
<a href="http://code.google.com/p/psycho/wiki/PsychoToDo" title="PsychoToDo" rel="nofollow">PsychoToDo</a> on our Wiki is probably a good place to have a look what I plan for the future.
I would like to roll out a "technology preview" release as soon as possible to let people play with it and tell me what they need to be happy.

Cheers,
Piotr]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>85</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>217.12.14.240</wp:comment_author_IP>
			<wp:comment_date>2007-05-08 15:41:38</wp:comment_date>
			<wp:comment_date_gmt>2007-05-08 15:41:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Piotr:

From a UI point-of-view, all I need is (MUST):
- the ability to add nodes with a single keystroke (e.g. using "insert" key)
- the ability to move nodes and graphs by mouse dragging
- the ability to detach and reattach a node to another node by drag and drop
- the ability to highlight/mark certain nodes with a single keystroke

From an interoperability perspective (COULD):
- the ability to talk to EDS to create tasks
- the ability to link to a Tomboy note
- the ability to import/export FreeMind mindmaps (as a matter of fact, why don't you pick Freemind or OPML as your XML schema instead of rolling out your own)

I also see that you have prioritised PNG over SVG - it seems a bit odd to me since I would think that you could do an XSL transformation from your XML serialisation to SVG/XHTML/whatever. There are tons of utilities to produce PNG (or whatever graphics format) out of SVG.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>86</wp:comment_id>
			<wp:comment_author><![CDATA[Piotr]]></wp:comment_author>
			<wp:comment_author_email>p.zurek@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.piotrzurek.net</wp:comment_author_url>
			<wp:comment_author_IP>203.97.71.38</wp:comment_author_IP>
			<wp:comment_date>2007-05-09 00:14:37</wp:comment_date>
			<wp:comment_date_gmt>2007-05-09 00:14:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for your input. Seems like you're not going to be very hard to satisfy. :-)
At least in the MUST part...

The PNG over SVG priority is not intentional. It's just that the version of cairo that I was using at first had the image surface enagled (which allows for saving it to PNG) and the SVG surface disabled. In current version on cairo SVG surface is on by default so it should work out of the box. I should actually try that.

As for using OPML as my file format - not sure if OPML can handle the visual part of the map. The model structure shouldn't be a problem but. I will have to look at FreeMinds format. It may turn out to be exactly what I need.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3439</wp:comment_id>
			<wp:comment_author><![CDATA[Sofia]]></wp:comment_author>
			<wp:comment_author_email>andria@netoptics.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406007082</wp:comment_author_url>
			<wp:comment_author_IP>195.5.56.170</wp:comment_author_IP>
			<wp:comment_date>2012-05-21 16:34:41</wp:comment_date>
			<wp:comment_date_gmt>2012-05-21 16:34:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>In my opinion it is beettr to keep the branding because according to distrowatch Arios and Parsix are the only active Iranian linuxes and you know these two are the only way to show our culture to other people trust me it is not going to hurt foriegn people</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>85</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337618081.1413";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>The Semantic Desktop, The Semantic OS</title>
		<link>http://www.olympum.com/future/the-semantic-desktop-the-semantic-os/</link>
		<pubDate>Tue, 01 May 2007 20:29:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/2007/05/01/the-semantic-desktop-the-semantic-os/</guid>
		<description></description>
		<content:encoded><![CDATA[One of the most useful recent additions to my Gnome desktop has been Beagle, Nat's personal desktop search daemon. I also discovered that in Ubuntu Feisty there is a deskbar that traces all the actions you do from your desktop, including your web activity and beagle searches. The more you use it, the more relevant it becomes since humans are repetitive.

Then, it happened: Tim pointed me this morning to Beagle++, a semantic desktop search engine based on Beagle, and that triggered the thought.

<strong>There ain't a semantic web. No, you read me well, there won't be one. It won't be the Web 3.0. No. The next revolution will be on the OS, not on the web.
</strong>

Web 2.0, user generated content, and data mashups present a taxonomy of data available from an almost infinite variety of sources.  And that will continue to grow. But understanding the meaning of data is something that belongs to our brains. The ability of a server to interact with a human being is very limited and it would require a tremendous flow of data between us and many servers out there. Whereas our desktops currently track much more information which can be used to understand the meaning of for example, a search query.

Eventually, the desktop and the OS will capture our facial expressions, our mood, our feelings. Really, it's not <em>that</em> hard.

What this will mean is that the applications that deliver the semantic web will actually reside on our desktops, not on the server. There won't be a need for processing on the server. The semantic analysis will happen on the desktop.

When you really think about it, it sort of makes  sense. People are reluctant to leave a behavioral trail on the web, let alone have things such as feelings captured on somebody's database. You want to keep that privacy, and ensure that sort of data lives somewhere where we have much better control of it: our desktops.

Web 3.0 will be about client-side applications, powered on Javascript, Flash, Java Web Start, .NET Smart clients, etc. The current browsers will change to integrate better with the desktop. The OS will change to feed a lot of behavioural data to the desktop. The desktop will control our semantic experience. The OS will become a browser, and the browser will become an OS. The OS will become a search engine, and the search engine will be our OS.

Don't believe me? Well, I am not asking you to do so ... my good friends at MIT have already proven it:
<ul>
	<li>Re:Search, a search engine on past search results: <a href="http://people.csail.mit.edu/teevan/rse/">http://people.csail.mit.edu/teevan/rse/ </a></li>
	<li>Exhibit, a CSS+Javascript mashup technology with no server-side processing: <a href="http://simile.mit.edu/exhibit/">http://simile.mit.edu/exhibit/</a></li>
	<li>The Universal Information Client, a semantic office/browser/...: <a href="http://haystack.csail.mit.edu/home.html">http://haystack.csail.mit.edu/home.html</a></li>
</ul>
Who said Gnome wasn't cool?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2007-05-01 20:29:50</wp:post_date>
		<wp:post_date_gmt>2007-05-01 20:29:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-semantic-desktop-the-semantic-os</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409251927724033]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Memory-lean nginx on a VPS</title>
		<link>http://www.olympum.com/linux/memory-lean-nginx-on-a-vps/</link>
		<pubDate>Tue, 08 May 2007 16:32:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/2007/05/08/memory-lean-nginx-on-a-vps/</guid>
		<description></description>
		<content:encoded><![CDATA[I spent this weekend testing and installing nginx and I have said Adios to Apache! Let me tell you why I have done that.

I am running this blog on a <a href="https://manage.slicehost.com/customers/signup?referrer=49029804">slicehost.com</a> 256Mb Xen VPS, using WordPress. I have been using Apache 2.2 for almost a year now without any problems. But recently I deployed a little Ruby on Rails application using mongrel for my wife's business, and then suddenly I ran out of memory.  Each Apache worker was easily taking 15 to 20Mb, even with a really cut-down configuration and built on Gentoo. With three Mongrel backends and the MySQL server I was starting to swap to disk.

I tried FastCGI instead of Mongrel, but it only cut down from about 50Mb to 40Mb for each process, not enough really to make a difference.  I had to trim the fat out of the web server.

So  about dropping Apache. First I considered Pound as a load balancer, but given that I would also still need a web server for static content in Rails (not wanting to serve that with Mongrel) I decided to look for alternatives.

Lighty and FastCGI tests did not even complete, so I gave up on Lighty. The FastCGI processes were becoming Zombie for some unknown reason.

Then I tried nginx. I have 5 workers, each consuming around 3Mb. Wow ... I call that Spring savings.

nginx is sending all blog traffic to a couple of php-cgi handlers. I tried both TCP and Unix sockets, but went for TCP since I was getting dropped requests and stalling processes for Unix sockets. php-cgi is not very fast, but it's stable and it has a reduced memory footprint.

Then nginx is acting as a reverse proxy and balancing across 3 Mongrels. I tried also FastCGI, but again it's not stable.

And man is this thing flying or what!? I have enough memory spare to make MySQL happy. Plus I am caching a lot of Rails generated content that nginx serves happily.

Now, some numbers from Apache Benchmark (running on Linux 2.6.16.29-xen #3 SMP, x86_64 Dual Core AMD Opteron(tm) Processor 265 AuthenticAMD GNU/Linux, Xen host with 256Mb):
nginx + pure HTML content:

<code>
Concurrency Level:      50
Time taken for tests:   0.96657 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Requests per second:    10345.86 [#/sec] (mean)
Time per request:       4.833 [ms] (mean)
Time per request:       0.097 [ms] (mean, across all concurrent requests)
</code>

nginx + php Wordpress home page (not cached, no APC):
<code>
Concurrency Level:      50
Time taken for tests:   192.387414 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Requests per second:    5.20 [#/sec] (mean)
Time per request:       9619.371 [ms] (mean)
Time per request:       192.387 [ms] (mean, across all concurrent requests)
</code>

nginx + mongrel (not cached):
<code>
Concurrency Level:      50
Time taken for tests:   8.290116 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Requests per second:    120.63 [#/sec] (mean)
Time per request:       414.506 [ms] (mean)
Time per request:       8.290 [ms] (mean, across all concurrent requests)
</code>

Sure, it's not a scientific test by any means, but it tells you something. And so far, no complains. If I ever outgrow the server, I can always get Pound on front of a couple of nginx web servers.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2007-05-08 16:32:48</wp:post_date>
		<wp:post_date_gmt>2007-05-08 16:32:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>memory-lean-nginx-on-a-vps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409252532097025]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415333186;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:97;}i:1;a:1:{s:2:"id";i:68;}i:2;a:1:{s:2:"id";i:315;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>A week of KDE (killall evolution-data-server)</title>
		<link>http://www.olympum.com/linux/a-week-of-kde-killall-evolution-data-server/</link>
		<pubDate>Fri, 03 Aug 2007 16:06:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/2007/08/03/a-week-of-kde-killall-evolution-data-server/</guid>
		<description></description>
		<content:encoded><![CDATA[See, I can live with Evolution crashing once in a while. Hell, it's software, it's <em>meant</em> to fail. But another thing is when the whole damn thing fails silently and in consequence kills your productivity. Evolution has  managed to randomly delete part of my calendars, appointments here and there, and multiple appointments moved in time. End result, missing meetings and looking like a complete idiot. The top of the iceberg happened on Monday when Evolution corrupted one of IMAP folders. Ouch! Pain, I know, I hear you.

I am off Evolution. evolution-data-server is just waaaaaaaaay too buggy. Sometimes I wonder if Novell buying Ximian was actually such a good thing ... but anyway that's another story.

What I am using now? Shh, don't tell anyone! Kontact, KAnything, KThis, KThat, KSomethingElse ...  KDE!

Being a Mono/GNOME fanboy, I have set myself a challenge: only use KDE and stick to native KDE apps for a week. Well ... I <em>really</em> meant to stick to Konqueror, but after 10 min I had to give up on that - I had forgotten the web does not run on standards - or does it?.

For the good news, I am feeling (surprisingly) productive. KDE apps are extremely well integrated with each other. There is a continous flow of information, your data is easily shared. I actually feel good. Call it Productivity Pr0n.

One thing I am missing badly is something like Tomboy, the Gtk#/Mono personal Wiki. I am trying Basket instead, which happens to be tighly integrated into KOffice. Unfortunately I have not managed to get beagle to index basket notes. I actually tried strigi instead of beagle, but it failed to index 50% of my docs because they were not UTF-8 or latin1. Plus strigi had no stemming. Oh, and that it core dumped at 120k docs ... Guys, better fix that for KDE4!

The worse side of KDE so far is configuring anything K related - it is an authentic nightmare!  I know it's intentional, but, really, it's not my metaphore. I would be happier with  sane defaults and not seeing all those other 3 zillion configuration options. I love to have them, but hidden. On KDE's behalf, KDE actually let's you configure stuff that you just can't in Gnome (a good thing). The problem is that you need to be the developer to know which combination of options gets you what you want!

Anyway, I am quite happy so far. Some of the KDE apps, kick ass big time. And my calendar events are not silently flying off all around the place.

Oh, and remember:

<code>$ evolution --force-shutdown</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[See, I can live with Evolution crashing once in a while. Hell, it's software, it's meant to fail. But another thing is when the whole damn thing fails silently and in consequence kills your productivity. Evolution has managed to randomly delete part of my calendars, appointments here and there, and multiple appointments moved in time. End result, missing meetings and looking like a complete idiot.]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date>2007-08-03 16:06:58</wp:post_date>
		<wp:post_date_gmt>2007-08-03 16:06:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-week-of-kde-killall-evolution-data-server</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409248635588609]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Make your code obvious, or remove it</title>
		<link>http://www.olympum.com/architecture/make-your-code-obvious-or-remove-it/</link>
		<pubDate>Mon, 06 Aug 2007 13:41:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/2007/08/06/make-your-code-obvious-or-remove-it/</guid>
		<description></description>
		<content:encoded><![CDATA[We have recently moved into a new house. The house is pre-wired with all sort of things one can imagine, for sound, video, network, motion, alarms, etc. It's really cool! But guess what, all wiring is behind plasterboards, and we don't have any instructions as of what and where it is. One end of all wires end up in one of the rooms, so I could put a high frequency pulse generator and trace down the wires behind the drywall. Sorted.

Well, not really.

You see, whoever put that wiring in while the house was being built had an idea in mind. The wiring would fit into a particular set of sensors, alarms, and speakers. The builder was also conditioned by what was available in the market, so it planned wiring suitably for a multi-room A/V controller. The thing is, the builder left it "pre-wired", never finished it. Sort of an optional thing you could do whenever you moved in.

7 years later. Multi-room A/V and control systems have evolved so much that the technology the builder had in mind has been rendered obsolete.  1Gbit network now allows video streaming over CAT5e/CAT6 cables. So you don't need anymore expensive multi-room controller. I just need good network around the house, and commodity amplifiers in each room where you need sound/image/alarm, etc.

You see, all that wiring the builder put in? Useless.

Moral for us software engineers. Whenever you write a piece of code or implement a new feature always remember to make it obvious. And the best way to make it obvious is to make sure it is used. Don't write software for the just-in-case scenario.

You see documentation is good, very good, but there is no point documenting a feature that is not obvious. By the time you get to use actually it, it will be obsolete and too complex to make it worth understanding it.

In summary, it will always be easier to find out how things work, than how things could work. Things that work are self-explanatory: they are obvious.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date>2007-08-06 13:41:21</wp:post_date>
		<wp:post_date_gmt>2007-08-06 13:41:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>make-your-code-obvious-or-remove-it</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409249239584770]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>NatWest Online Banking: Card Reader</title>
		<link>http://www.olympum.com/security/natwest-online-banking-card-reader/</link>
		<pubDate>Tue, 07 Aug 2007 13:07:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/2007/08/07/natwest-online-banking-card-reader/</guid>
		<description></description>
		<content:encoded><![CDATA[On Friday I received and "Online Banking Card Reader" from NatWest, my bank here in the UK. Let me tell you, it is one of a curious kind.

NatWest issued me a new debit card a few weeks back now, although it was actually not due. The chip in the new card looked slightly different from the one on the last one, but it is still an EPROM with 255 bytes of storage. I have not read its contents yet ... I am sure I am bound by some dubious legal agreement not to do it anyway.

The device is roughly the size of a smallish pocket calculator. It is a Xiring device, patented by French company Xiring. The device has a PIN-and-chip reader where you slide your debit card into, and it then prompts you for input. The device has three modes of operation:

* Identity, enter a secret (your PIN) and receive back a secure code.
* Respond, enter a secret and a (reference) number and receive back a secure code.
* Sign, enter a secret, a (reference) number and an amount, and receive back a secure code.

It seems like a useful device, more secure than the current password solution RBS/NatWest has. The only way to do online banking in the future with NatWest will be through this device.

I am not sure about it though. The device is nothing but a fancy electronic challenge/response card, but highly inconvenient to the consumer. The device relies on batteries and it's very bulky compared to a card you can slot into your wallet.

My bet is that we will see massive pushback.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2007-08-07 13:07:27</wp:post_date>
		<wp:post_date_gmt>2007-08-07 13:07:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>natwest-online-banking-card-reader</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409246500704256]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415356686;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:49;}i:1;a:1:{s:2:"id";i:273;}i:2;a:1:{s:2:"id";i:279;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Yahoo! ROBO: Research Online, Buy Offline</title>
		<link>http://www.olympum.com/yahoo/yahoo-robo-research-online-buy-offline/</link>
		<pubDate>Wed, 08 Aug 2007 09:10:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/2007/08/08/yahoo-robo-research-online-buy-offline/</guid>
		<description></description>
		<content:encoded><![CDATA[Yahoo! Search Marketing Blog published last week a <a href="http://www.ysmblog.com/blog/2007/07/31/research-online-buy-offline/">study</a> showing that online exposure to product and retailer information, as well as ads, changes consumers behavior. Yahoo! calls that Research Online, Buy Offline, or <strong>ROBO</strong> (btw, ROBO means <em>theft</em> in Spanish).

I can easily identify myself  as one of those consumers in the study. It's much easier to use the internet to find out exactly what one is looking for. Sometimes, I want (need?) to buy something, but I am unclear about what is available in the market that would suit my needs. For example,  I want to install a multi-room sound system. However, as I do research on the internet, I happen to find many different types of solutions to this problem: wired, wireless, bluetooth controlled, streaming, centrally amplified, room-amplified, etc.  So I end up doing my market taxonomy, then market research, then learning about the vendors and their products, and finally finding the retailers in my area where I can take a look at the actual products. I will then go visit the retailer and possibly buy offline. That's what Yahoo! calls ROBO.

<em>Well, actually, a few times, I don't do ROBO. I research online, and buy offline. But then I go online to find the best deal based on price and retailer's consumer feedback, using, for example, <a href="http://www.kelkoo.co.uk/" title="Kelkoo">Kelkoo</a>.  I then buy online, and once the product arrives, I return it offline. I call it ROBOBORO.</em>

Now, seriously, what is really interesting about the study are the implications the findings have for  retailers.  Back in the late 90's folks talked about personalized online/offline merchants: your profile would be known to the merchant from your online browsing behaviour, and the offline presence of the merchant could use that information for better targetting products for sale to you. Admitedly, during the 90's the internet was not particularly strong on privacy yet, neither was technology to make this personalized marketing possible, but think of the following scenario based on how technology has evolved since then.

Suppose you are browsing the web using your bluetooth enabled mobile phone, looking for a new portable music player. You do your research online, find what you want, but your wife tells you it's time to go shopping and swing by the mall with the kids. So off you go. Once you enter the mall, your phone communicates with the bluetooth mall facilities. Those merchants in the mall with which you have a online trust relationship, access your relevant browsing history, and match against it. You then receive, on your phone, an offer like "Hello Bruno, we have the iPod nano on sale for only $79.99, all ready packed and ready for you to take home". You swing by the store, swipe your credit card, and happily walk out of the mall with a new toy. Interestingly, the reverse also holds as a benefit for the publishers. The search engine knows who you are, and it could use some of your profile attributes for the retailers to bid on, besides the search terms. Let's say you just bought the iPod at said merchant. That merchant is interested in selling you accessories for your new iPod, so whenever you are now searching for music related terms, you should be targeted with iPod accessories, instead of generic music store, or download ads.

Welcome to the future of one-to-one marketing.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2007-08-08 09:10:30</wp:post_date>
		<wp:post_date_gmt>2007-08-08 09:10:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>yahoo-robo-research-online-buy-offline</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="yahoo"><![CDATA[Yahoo!]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409243916603392]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Google News Limited Comments, Not Cool, Not Evil, Just Careless</title>
		<link>http://www.olympum.com/google/google-news-limited-comments-not-cool-not-evil-just-careless/</link>
		<pubDate>Thu, 09 Aug 2007 08:27:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/google/google-news-limited-comments-not-cool-not-evil-just-careless/</guid>
		<description></description>
		<content:encoded><![CDATA[It's all around the blogosphere, Google News is going to allow limited editorial comments from those involved in the news. Basically, you get a chance to tell your side of the story if you are involved. Big wow factor. Google, our savor. Well, perhaps not.

For starters, Google TOS and robots.txt restrict others from accessing Google News content, i.e.  you can't crawl Google News, including those limited "editorial" comments. So whereas Google can scrape the Belgian newspapers, bend their arm, and get away with it, Google won't allow its editorial content to be indexed elsewhere. Some talk about how Evil the corporation has become. <a href="http://www.techcrunch.com/2007/08/08/google-news-announces-limited-comments-everyone-needs-to-calm-down/" title="Techcrunch artile on Google News">Techcrunch talks about hypocresy</a>

I would not go that far (of course Arrington's usual yellow-press tone will surely say such things). I think Google has just either not thought this through properly, or is making a big deal out of an editorial possibility that will only used the odd time here and there. Google has played this PR campaign carelessly, and as a consequence are looking as either hypocrits or stupid.

How are they planning to scale the editorial model? Do you trust an algorithm to detect which of the comments should become editorial since the posters are involved in the news? The algorithm would basically be a sophisticated version of Turings AI test. But instead of machine vs human, honest human vs evil human. Maybe not. So, instead they have humans do this, check references, and approve a comment as being editorial. Imagine the fury of the masses when their comments don't get editorialized. Good luck boys.

Anyway, I just think this is stupid. Noug' said.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date>2007-08-09 08:27:18</wp:post_date>
		<wp:post_date_gmt>2007-08-09 08:27:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-news-limited-comments-not-cool-not-evil-just-careless</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google"><![CDATA[Google]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409241475514369]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Posh-Wannabes: Wannabe-A-Fly?</title>
		<link>http://www.olympum.com/policy/posh-wannabes-wannabe-a-fly/</link>
		<pubDate>Sun, 19 Aug 2007 09:45:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/policy/posh-wannabes-wannabe-a-fly/</guid>
		<description></description>
		<content:encoded><![CDATA[This 70s sunglasses retro-look inspired by our very own Victoria Beckham, "posh", and America's greatest exhibitionist Paris Hilton, is starting to become annoying. Strikingly similar to a fly's eyes, generally esthetically unpleasant sunglasses are taking over London this summer. People covering their eyes with black lenses of the size of satellite dishes. Men and women, alike, being fashionable human flies.

I had never seen flies in the London underground, until now. A pest of human flies with big dark black eyes has taken over. Strange looking aliens from the X-Files are invading the tube.

I wonder if the devil still wears Prada.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date>2007-08-19 09:45:25</wp:post_date>
		<wp:post_date_gmt>2007-08-19 09:45:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>posh-wannabes-wannabe-a-fly</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="policy"><![CDATA[Policy]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409239491637249]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Measuring time spent at a site rather than hits</title>
		<link>http://www.olympum.com/internet/measuring-time-spent-at-a-site-rather-than-hits/</link>
		<pubDate>Sun, 19 Aug 2007 10:38:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/internet/measuring-time-spent-at-a-site-rather-than-hits/</guid>
		<description></description>
		<content:encoded><![CDATA[In July, Nielsen's NetRatings changed its web traffic measurements to focus on time spent at a given site rather than the traditional page views, and page views per user (PV/UU). Since then, many web 2.0 sites, including communities, gaming, video, etc. have received this change as the Holy Grail of web ratings, even those whose ranking went down.

While it is true that time spent at a site increases  exposure to ad display, and possibly CPM, the time-based measurement paradigm is only applicable to countries with deep internet and broadbrand penetration. In countries in Eastern Europe, Russia, South America, Africa and South-East Asia, much of the population still connects via dial-up modems and hits are a much better metric. The ability to watch streamed audio and video in these markets is very limited; gaming is not responsive enough; and the engagement in  social networking is rather limited. Or as Yahoo Peter Daboll put it: "You're never going to have one metric that's the holy grail of Internet measurement."

The sad thing about Nielsen's NetRatings change from hits to time spent has not been the change itself, but all the FUD around it. This is one of the things about the internet, and an annoying one, evil viral marketing takes over is significantly less time than on the non virtual world where the power of scrutiny stops the FUD.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2007-08-19 10:38:54</wp:post_date>
		<wp:post_date_gmt>2007-08-19 10:38:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>measuring-time-spent-at-a-site-rather-than-hits</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet"><![CDATA[Internet]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409239491637249]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Three Weeks of KDE, Too Much Configuration</title>
		<link>http://www.olympum.com/linux/three-weeks-of-kde-too-much-configuration/</link>
		<pubDate>Mon, 20 Aug 2007 08:55:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/linux/three-weeks-of-kde-too-much-configuration/</guid>
		<description></description>
		<content:encoded><![CDATA[After moving to KDE three weeks ago now, I am staying. At least for now. If I had to pick on something, my main point for feedback would be that the graphical user interface feels crowded, and its usage metaphors, albeit consistent, are rather complicated.

In KDE, configuration options are scattered all around the place. KDE is a great platform for the power user, familiar with tweaking and working with plenty of configuration options, but for the rest of us who just want to get on using the applications and not waste our time fighting with configuration options, a simpler paradigm for desktop and programs alike would be more useful. That simplicity is one of the design goals of Gnome: sane defaults, clean UI and few configuration options. Unfortunately Gnome has gone too far, and makes it sometimes either impossible or very hard for the power user to configure the desktop or an application to its own liking. While preserving for KDE's power users the current ability to configure practically anything, the majority of users would however benefit from a cleaner and more modern user interface metaphor.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date>2007-08-20 08:55:39</wp:post_date>
		<wp:post_date_gmt>2007-08-20 08:55:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>three-weeks-of-kde-too-much-configuration</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409237558460416]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>511</wp:comment_id>
			<wp:comment_author><![CDATA[Clair]]></wp:comment_author>
			<wp:comment_author_email>happy.eclair@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://newlinuxuser.com</wp:comment_author_url>
			<wp:comment_author_IP>125.60.241.169</wp:comment_author_IP>
			<wp:comment_date>2007-08-20 09:08:46</wp:comment_date>
			<wp:comment_date_gmt>2007-08-20 09:08:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hmmm. You really think that Gnome is going too far? Maybe it's the difference in end goals of the potential users of the desktop environment? After all, some may say that it's better to use which ever suits a person's preference.

Anyhow, just curious: For a new user, which would you recommend as a desktop environment or window manager?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>512</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>84.230.243.22</wp:comment_author_IP>
			<wp:comment_date>2007-08-21 08:48:07</wp:comment_date>
			<wp:comment_date_gmt>2007-08-21 08:48:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Addressing the second question first, sadly Gnome does not offer yet the stability and reliability one would expect from a 1st grade desktop, so if you are a Windows power user moving to a Linux desktop, use KDE, otherwise go to Gnome.

Some Gnome configuration options are only available through gconf-editor, which is like playing with the Windows Registry: definitely not a user friendly option. Some more advanced options are completely removed in Gnome, for example file system options. KDE is just the opposite. I would love to see something in the middle ground: by convention as simple as Gnome, but also as configurable as KDE when needed. Don't remove the freedom from me, like Gnome does, but also don't overwhelm me with options, like KDE does.

Yes, I believe there can be a desktop-size that fits all. That's actually what OS X gained when it embraced BSD.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3361</wp:comment_id>
			<wp:comment_author><![CDATA[Auth]]></wp:comment_author>
			<wp:comment_author_email>peterlozano@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406005271</wp:comment_author_url>
			<wp:comment_author_IP>62.207.58.131</wp:comment_author_IP>
			<wp:comment_date>2012-05-21 11:20:00</wp:comment_date>
			<wp:comment_date_gmt>2012-05-21 11:20:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Done Thanks for this opportunity, here are my suginstgoes:1. LogsI mean, if Choqok download the new tweets from internet to show us, well  why not archive this tweets into a file, for exampletweets.log or something. Or  It would be great if Choqok will store the tweets, replies and more like Pidgin does, in. Html files,sorted by date, contact, or something.Why do this?- It will allow to read old tweets without being connected to the internet or without consuming bandwidth.- If Choqok download the tweets from internet, keep on your computer is not unreasonable - Would give us (who do not have internet at home) the possibility of read the tweets we downloaded during the day and perhaps, some donot read carefully.2. Tray IconThe possibility of change the tray icon of Choqok.3. Support for accounts of goo.gl (Google)Able to use my Google account to goo.gl service, this would allow to shorten URLs using Choqok stay on my goo.gl history.Thank you very much if you take into consideration this suginstgoes, if not, well thanks anyway for the excellent software that you have done</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1337599200.126";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3768</wp:comment_id>
			<wp:comment_author><![CDATA[Best]]></wp:comment_author>
			<wp:comment_author_email>kingspottery@atomic.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406015501</wp:comment_author_url>
			<wp:comment_author_IP>122.194.11.208</wp:comment_author_IP>
			<wp:comment_date>2012-05-24 01:41:24</wp:comment_date>
			<wp:comment_date_gmt>2012-05-24 01:41:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>BrettI tried Unity for a month, before swtnchiig back to ordinary Gnome (although planning to install Martin Owen's Netbook Launcher packages for Natty, because I really like that interface). Just tried Gnome Shell (via Fedora live CD) and it's very nice and easy. I hope Ubuntu will have easy Gnome-Shell installation options in future.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337823685.0656";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Why Trolltech&#039;s Qt GPL license is hurting the Linux desktop</title>
		<link>http://www.olympum.com/linux/why-trolltechs-qt-gpl-license-is-hurting-the-linux-desktop/</link>
		<pubDate>Mon, 20 Aug 2007 08:56:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/linux/why-trolltechs-qt-gpl-license-is-hurting-the-linux-desktop/</guid>
		<description></description>
		<content:encoded><![CDATA[After my move away from Gnome and Evolution, I have now been running KDE for three weeks straight and still going. I have found KDE to be a surprisingly stable and reliable platform. It's hard to find something to criticize in KDE. It's a really nice desktop setup: well oiled machinery where everything seems to run smoothly. Inter-application communication and integration of all the KDE applications is simply superb, and I don't think there is any other desktop out there, proprietary or open source, where you can see such tight integration of its parts. And this is mainly thanks to Trolltech's fantastic toolkit, Qt

Qt is a first class toolkit which has turned to be be a fantastic choice for KDE. Qt is probably the best graphical and utilities programming toolkit that truly looks like a native application on any target desktop: OS X, Windows or KDE. Developer productivity is probably as good as you can get with a C++ toolkit. However, Qt is GPL, and a GPL toolkit library is not a good thing if you are looking for mass adoption.

Qt's commercial non-GPL license fee is actually not high at all, and most professional developers and software houses should be able to buy the licenses. The problem however is that if you start using the GPL version and then you figure out you want to go proprietary, you simply can't. You must buy the Qt commercial license upfront. The problem lies with the grassroot developers: they won't pay for the commercial license since the prospect of revenue is non-existent in the beginning.  When individual developers are faced with writing an application, many will avoid Qt because of its viral licensing nature. As a developer you want to have the choice of whether to make your app GPL or not, you don't want your choice to be restricted by a license. Some of those grassroot developers turn to be writting the most popular applications for Linux, such as Mozilla Firefox, Gaim/Pidgin, OpenOffice, Evolution, etc. Guess what, the leading office, personal information management and groupware applications don't run on Qt. And that's where the users (and the money) is.

Many open source software houses sell software that is not GPL, and derive their revenues from support contracts and some professional services. It's surprising that to date Trolltech has not moved in this direction and introduced a more commercially friendly license for Qt. This would be a complete change to Trolltech's business model, and the dramatic increase in developers entering into support contracts for Qt would quickly offset any short-term loss of revenue from traditional licensing fees.

Sadly, it might be almost too late for Qt: Gtk+ has matured to become a good-enough toolkit, and although not yet as stable and tightly integrated as Qt, Gtk+ is sufficiently portable and usable. We have today because of that two opposed Linux desktop communities, with neither having sufficient momentum to be competitive with Aqua or Aero. It's sad to see how and why Linux has lost the desktop war. The community had a unique chance to make Linux a valid choice for the desktop OS, especially with Microsoft leaving such a big gap between Windows XP and Windows Vista. Linux missed it and Apple took it to its advantage. If the Linux desktop had united forces years ago, Trolltech might had become the next Apple.

Perhaps it's not too late. I am challenging Trolltech to license Qt on a royalty free commercially friendly license. I am challening the Gnome community to consider a radical merge onto Qt and KDE. I am challening the KDE community to open its arms towards the Gnome developers and the Gnome software. We can still make GKNOME a success.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date>2007-08-20 08:56:12</wp:post_date>
		<wp:post_date_gmt>2007-08-20 08:56:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-trolltechs-qt-gpl-license-is-hurting-the-linux-desktop</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409236136173569]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415084571;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:54;}i:1;a:1:{s:2:"id";i:46;}i:2;a:1:{s:2:"id";i:67;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>556</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>211.180.251.207</wp:comment_author_IP>
			<wp:comment_date>2007-09-06 14:14:46</wp:comment_date>
			<wp:comment_date_gmt>2007-09-06 14:14:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Eivind, you are absolutely right that changing Trolltech's business model to being mostly services & support found is probably as painful as it gets, especially since you reduce your margins. Additionally good prospects for growth probably make it hard to take such a bet. For example for mobile and other embedded devices, I am hearing really good things about Qtopia.

And I think that is exactly where the challenge is: Trolltech cannot easily get out of that situation, folks know it, and they bet on Gtk+. Perhaps what Trolltech needs is a get-out-of-jail card, e.g. fresh funding.

Re. linux as a desktop, you are right that it has not lost it, but it never won it either. We had a big opportunity with Microsoft leaving such a gap between XP and Vista. And we missed it. Yes, we increased penetration, but nothing mind blowing because we did not have enough development momentum. Apple did, and took advantage, and now it's paying off. Linux still has too many corner cases in PIM, groupware, multi-media, graphic card support, etc. that are hurting us big time for the big adoption push. I am not saying all these are problems that relate to KDE/GNOME, by no means, there is a lot involved in manufacturing lobbying, OEMs undercutting hardware pricing, etc. It's just that the desktop apps are more visible.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>529</wp:comment_id>
			<wp:comment_author><![CDATA[Eivind Throndsen]]></wp:comment_author>
			<wp:comment_author_email>eivind@trolltech.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.trolltech.com</wp:comment_author_url>
			<wp:comment_author_IP>77.40.130.245</wp:comment_author_IP>
			<wp:comment_date>2007-08-27 20:57:18</wp:comment_date>
			<wp:comment_date_gmt>2007-08-27 20:57:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bruno,

Licensing is difficult, dual licensing doubly so. 

The current Trolltech dual licensing model is a careful compromise between what's ideal and possible. Both the KDE community and Trolltech have benefited a lot from it. We have also tried to make Qt more affordable for startups through our small business program (http://trolltech.com/products/qt/licenses/licensing/smallbusiness).

We need to keep paying our programmers their salaries. At the same time, we come from and are members of the open source community, and interact with the open source community every day. 

Because our business model is crucially dependent on our licensing model we are very careful about changing it, and will keep on being cautious in the future. At the same time we are trying to listen to the community. You have made some good points that we'll take to heart. 

Finally: You're arguing that the Linux desktop has "lost". We beg to differ. The millions of people using and enjoying KDE (and GNOME) everyday benefit from the efforts of the community, with more users and better functionality to come. 

Kind regards,
Eivind Throndsen, Product Manager, Qt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>521</wp:comment_id>
			<wp:comment_author><![CDATA[Anonymos]]></wp:comment_author>
			<wp:comment_author_email>nothanks@anon.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>202.180.118.226</wp:comment_author_IP>
			<wp:comment_date>2007-08-23 23:29:02</wp:comment_date>
			<wp:comment_date_gmt>2007-08-23 23:29:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Whats GKNOME? Just an expression to say KDE + Gnome?
Or is it a product of some sort?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>522</wp:comment_id>
			<wp:comment_author><![CDATA[Anonymos]]></wp:comment_author>
			<wp:comment_author_email>wothed@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>202.180.118.226</wp:comment_author_IP>
			<wp:comment_date>2007-08-23 23:58:46</wp:comment_date>
			<wp:comment_date_gmt>2007-08-23 23:58:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Actually I was wondering do you know what the top commercial QT has over the Open source other than licensing?
Heres some info http://trolltech.com/developer/knowledgebase/121/
I know activeqt is also not on the list for the open source version.
What about the linux edition is there advantages (features) missing in the Open edtion there?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>524</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>91.84.204.33</wp:comment_author_IP>
			<wp:comment_date>2007-08-25 16:20:57</wp:comment_date>
			<wp:comment_date_gmt>2007-08-25 16:20:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[GKNOME was just an expression to denote a unified desktop.

I am not aware of anything different for Linux between Qt's open source and commercial versions. I can't comment much on Windows, except what you mention: only the commercial version provides the ability to interact with the .NET CLR as unmanaged code.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Open LinkedIn Platform Should Focus on Privacy</title>
		<link>http://www.olympum.com/internet/open-linkedin-platform-should-focus-on-privacy/</link>
		<pubDate>Tue, 21 Aug 2007 08:06:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/internet/open-linkedin-platform-should-focus-on-privacy/</guid>
		<description></description>
		<content:encoded><![CDATA[LinkedIn's CEO Reid Hoffman promised at the end of June to <a href="http://blogs.zdnet.com/BTL/?p=5482" title="CEO talks about opening LinkedIn platform">open the LinkedIn platform</a>, very much aligned with Facebook's publishing its developer APIs, and surely trying to experience some of the same growth Facebook is receiving thanks to opening their APIs. I hope however that LinkedIn is thinking about all the risks associated with opening up a business community.

LinkedIn will need to review and approve every single application out there consuming their services. The last thing you want is a pile a lawsuits on your desk because of misapproprated data, especially personal data covered by the EU/95 Privacy Directive, also implemented in the UK via the Data Protection Act, and somehow applicable to US companies under the Safe Harbor Agreements.

LinkedIn should focus on opening the APIs for its users. One of my main complains with LinkedIn is that it is very good at sucking my data, but it's very hard to get some of that data back, let's say synchronizing with my phone's address book or even the more simple operation of importing my contacts into my Outlook calendar. That's where I would like to see LinkedIn going, allowing developers to write such plugins, for us to access our own data. Anything beyond this very personal use of the data might end up hurting LinkedIn, and what is worse from a business perspective, possibly dillute it into another, smaller, does-it-all, Facebook.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date>2007-08-21 08:06:31</wp:post_date>
		<wp:post_date_gmt>2007-08-21 08:06:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>open-linkedin-platform-should-focus-on-privacy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet"><![CDATA[Internet]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409232965689344]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>513</wp:comment_id>
			<wp:comment_author><![CDATA[Tjalle]]></wp:comment_author>
			<wp:comment_author_email>tjalle@shs.shh.fi</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>194.111.39.65</wp:comment_author_IP>
			<wp:comment_date>2007-08-21 11:31:41</wp:comment_date>
			<wp:comment_date_gmt>2007-08-21 11:31:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jep, I very much agree with you]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Stall by Incremental Releases</title>
		<link>http://www.olympum.com/architecture/stall-by-incremental-releases/</link>
		<pubDate>Sun, 26 Aug 2007 09:51:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/architecture/stall-by-incremental-releases/</guid>
		<description></description>
		<content:encoded><![CDATA[Have you have ever been part of the inception of a software system that later became big and complex? Have you later felt the frustration of not being able to make further changes to the core architecture? Did you end up being taken hostage by the software? I did.

We hope as developers to be able to adapt software as requirements and bugs arise, and to be able to organize our software releases accordingly. By doing incremental releases we hope to work with a stable code-base where we can release often. We then receive feedback more often and we are therefore agile and responsive to business needs.

Until one day we become legacy. A competitor starting from scratch has been able to innovate and quickly implement these new cool features the market really wants. We can't catch up with them, because they don't have the legacy we have: the other thirty thousand features we need for all revenue-generating customers we have.

We set ourselves to large regeneration plans, greenfield development. "This time around, we'll do it right", we say. Two to three years later, after again a cycle of incremental releases, we become again legacy.

And this is how the software industry is run. Competition between those entering the legacy stage and those on the startup curve is what keeps us employed. And yet this continuous hostage situation by incremental releases is what annoys me most about software.

There are two realistic approaches to solving the problem. You could plan upfront for a software life of 2 to 3 years and not 5 to 10 as some would hope. Or you could take the red pill.

I would rather see more people taking the red pill. It ain't easy, I admit it, but it is possible. Architectural refactoring is extremely painful - you are basically breaking the system as hard as it can be broken before pulling it up together again -. I have done it, but don't take my word for it, and look at Linux going from 2.4 to 2.6, at Windows going from 98 to 2000, at Mac OS going to X. They took the pain, and it paid off.

Let's stop building software and let's start thinking of software reconstruction. After a few incremental releases, do an architectural release. I know you need it. You know you need it. It's your choice, the red pill.



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2007-08-26 09:51:57</wp:post_date>
		<wp:post_date_gmt>2007-08-26 09:51:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stall-by-incremental-releases</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409232063909888]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415173882;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:47;}i:1;a:1:{s:2:"id";i:21;}i:2;a:1:{s:2:"id";i:19;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>SUNW becomes JAVA</title>
		<link>http://www.olympum.com/internet/sunw-becomes-java/</link>
		<pubDate>Sun, 26 Aug 2007 11:54:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/internet/sunw-becomes-java/</guid>
		<description></description>
		<content:encoded><![CDATA[Sun is changing its ticker symbol from SUNW to JAVA, as announced in <a href="http://blogs.sun.com/jonathan/entry/java_is_everywhere" title="SUN's CEO changes SUNW to JAVA">Sun's CEO Jonathan Schwartz's Weblog</a> on Thursday 23rd August. There has been a lot of mixed feedback. Most techies and engineers inside and outside Sun are criticizing the decision, as they see it narrowing Sun to Java technology. However, Wall Street did not seem to care much.

The stock went up 1.62%, while the Nasdaq index recovered 1.38% so one can possibly assume the market was insensitive to the change. While the volume was double the average, so was the market's, so again no change.

This seems to be a change purely driven by  brand awarenes. As Schwart's puts it in his blog:
<blockquote class="withquote"> What's that distribution and awareness worth to us? It's hard to say - brands, like employees, aren't expenses, they're investments. Measuring their value is more art than science. But there's no doubt in my mind more people know Java than Sun Microsystems. There's similarly no doubt they know Java more than nearly any other brand on the internet.</blockquote>
It strikes me that as much as this change might help Sun's marketing strategy, it will likely damage its ability to hire and retain smart engineers. Time will tell.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date>2007-08-26 11:54:13</wp:post_date>
		<wp:post_date_gmt>2007-08-26 11:54:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sunw-becomes-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet"><![CDATA[Internet]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409229769236480]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Day Off, Installing a Satellite Dish</title>
		<link>http://www.olympum.com/other/day-off-installing-a-satellite-dish/</link>
		<pubDate>Mon, 27 Aug 2007 08:08:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/other/day-off-installing-a-satellite-dish/</guid>
		<description></description>
		<content:encoded><![CDATA[When you put all three together, you'll find out why. 1) Today is a bank holiday in the UK. 2) We don't have and we can't have aerial TV coverage, we can't have cable TV, and we can't have Sky because I am not willing to pay anything beyond what we already pay in tax for TV; 3) They are playing the 2007 World Champs in Athletics that we really want to watch. So, I have been assigned a little project: get us the games on TV.

Based on the position of the trees and the house, I am going to try to hit two satellites: Astra 1E at 19.2E and Astra 2D at 28.2E. With Astra 1E I can get Digital+ (Spanish Sky equivalent, but some programmes are free-to-view) and Eurosport DE free. With Astra 2D I can get most of the UK free-to-air (plus Sky Digital). I am not sure Astra 2D will work given the azimuth and the trees ... but I'll try it first.

For my reference:

<code>
Satellite at = 19.2 East orbit longitude (Astra 1E)
Dish elevation= 28.6, Azimuth= 158.7 (magnetic compass), Polarisation= -14.8
Polar mounts only: Main angle= 51.9, Downward tilt= 6.7
</code>

<code>
Satellite at = 28.2 East orbit longitude (Astra 2D)
Dish elevation= 25.68, Azimuth= 148.26 (magnetic compass), Polarisation= -20.76
Polar mounts only: Main angle= 51.9, Downward tilt= 6.7
</code>

I'll be updating this blog entry throughout the day.
<h3>Update (11.23AM)</h3>
Hmm, it's not going well. I can't find signal on either one, I wonder if the trees are blocking all the signal (that's what it looks from a visual, but I was hoping some signal to go through regardless). Anywa, the house has a flat roof, I have never been up there, but perhaps if I could set it up there ... Time to explore!
<h3>Update (18.16PM)</h3>
Right, I figured out setting the dish on the roof was not an option, at least not for today since I need a very high ladder, which I don't have. I think I will try next week end to install it by the east side of the garden. That should help to reach elevation and go over the trees.

To be continued ...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date>2007-08-27 08:08:38</wp:post_date>
		<wp:post_date_gmt>2007-08-27 08:08:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>day-off-installing-a-satellite-dish</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409227001376768]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415234564;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:273;}i:1;a:1:{s:2:"id";i:225;}i:2;a:1:{s:2:"id";i:347;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Being Phileas Fogg, Day 1</title>
		<link>http://www.olympum.com/other/being-phileas-fogg-day-1/</link>
		<pubDate>Sun, 02 Sep 2007 12:15:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/other/being-phileas-fogg-day-1/</guid>
		<description></description>
		<content:encoded><![CDATA[Yes, you are right, not Malkovich, but Phileas Fogg. At exactly 10.30am sharp today, I popped into a taxi that took me to Heathrow Terminal 4. I am currently writing from the BA Business Lounge waiting for my plane and ahead of my tour "Around the World in 15 days". And yes, I am beating Mr. Fogg by an impressive 65 days (although a good 137 years later to tell the truth)!

I am flying east, same direction as Phileas Fogg, with stops in Bangalore, Singapore, Seoul, Sunyvale, Toronto and back to London Heathrow. Obviously I am not Jules Verne, but I'll be blogging each day about my trip.

I had a good start. Check in at Heathrow was nice and smooth, except the stupidity that I have to put my laptop bag into my carry-on luggage while going through security, only to take it out right after clearning security. I guess the queues if passengers were not limited to 1 bag would be even longer, but given that there are no queues in business class, why do the authorities keep enforcing this rule? I really fail to see it as a security measure, it's just a workload problem.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date>2007-09-02 12:15:02</wp:post_date>
		<wp:post_date_gmt>2007-09-02 12:15:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>being-phileas-fogg-day-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409227722395648]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>550</wp:comment_id>
			<wp:comment_author><![CDATA[RemyA]]></wp:comment_author>
			<wp:comment_author_email>remy@amouroux.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.amouroux.org/</wp:comment_author_url>
			<wp:comment_author_IP>216.145.49.15</wp:comment_author_IP>
			<wp:comment_date>2007-09-06 05:48:49</wp:comment_date>
			<wp:comment_date_gmt>2007-09-06 05:48:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Did you already drwon in the Channel, there is still no Day 2 and we are Sept 5 in California right now.
LOL.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>557</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>211.180.251.207</wp:comment_author_IP>
			<wp:comment_date>2007-09-06 14:38:14</wp:comment_date>
			<wp:comment_date_gmt>2007-09-06 14:38:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Actually, I am alive and kicking. I have been dragged into back-to-back meetings, 12 hours a day, and my ability to blog has been, well nada, zero, nil. I have a couple of drafts on the works, so I'll batch the days on Saturday (tomorrow is another tough day).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Being Phileas Fogg, Day 2</title>
		<link>http://www.olympum.com/other/being-phileas-fogg-day-2/</link>
		<pubDate>Sat, 08 Sep 2007 19:36:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/other/being-phileas-fogg-day-2/</guid>
		<description></description>
		<content:encoded><![CDATA[After a peaceful flight, and a short sleep, we landed at 4.30AM in Bangalore. Getting through immigration in Indian airports is always a unique experience, but this I time I really flew throw passport control and customs, especially since I only had carry on luggage. Note to self: never check-in luggage.

The problem was outside. My driver from Le Méridean was not there. There was another driver from the hotel waiting, but for another guest. I had to wait. And after more than 10 hours on a plane, with little sleep, I was wondering why I had to wait for my driver. Anyway, after a few calls, he did finally show up, claiming he had had trouble parking. I mean, how difficult is it parking at 4.30AM in an almost empty car park? No tip.

On the way to the hotel I noticed how different Bangalore is from New Delhi. Whereas New Delhi is all upside down, full of works, cows, and messy as hell, Bangalore is relative tidy and developed. Even the thousands of trucks cruising during the night in New Delhi, since they are limited during the day, were not present in Bangalore.

I managed to catch an hour of sleep until going into the office. The hotel is alright, but I would not recommend it. You really don't get much for your money, and there are better options in Bangalore, which actually happen to be closer to both Yahoo! offices in MGR and EGL. As much as I normally like both Le Méridean and Sheratons, this one simply does not cut it. The rooms were not very clean, some light bulbs were blown off, and you can smell the kitchen from the rooms. Also the shower-in-bath does not cut it, with barely any pressure and water getting all over the place.

The day at the EGL office was really good and productive. It's always inspiring to meet the teams, and this time was no different. The facilities are also really good. It feels like being back in Sunnyvale.

On the way back I stopped by the State Cottage Emporium in MG Road, an (allegedly) safe place to shop for foreigners, with marked prices. Well, after bargaining a 25% discount on a traditional necklace, and walking out proudly, I feel strange at such a discount, and I am not sure whether I have been an artist of negotiation, or really, really, stupid.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date>2007-09-08 19:36:43</wp:post_date>
		<wp:post_date_gmt>2007-09-08 19:36:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>being-phileas-fogg-day-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409225583312896]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Being Phileas Fogg, Day 3</title>
		<link>http://www.olympum.com/other/being-phileas-fogg-day-3/</link>
		<pubDate>Sat, 08 Sep 2007 23:35:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/other/being-phileas-fogg-day-3/</guid>
		<description></description>
		<content:encoded><![CDATA[I was reading today during breakfast the Economic Times of India when I came across a really interesting interview with the CEO of Airtel India, Mr. Sunil Bharti Mittal. He was making the point that given the development cycle in which India is in mobile is as important as broadband. According to the CEO of Airtel, consumers expect in India expect a seamless experience from broadband to mobile, and from mobile to TV.

When we funded Meridea back in 2001, we commissioned a research survey among CEO/CIOs to understand their likelihood of mobile booming as the channel of choice for financial services. And back in 2001, the answer was a resounding yes. However since then, mobile has not really picked up due to a number of reasons going from device limitations, network limitations, bandwidth costs, and security issues. The end result was that Meridea struggled to sell in a market when only broadband was important. The key value-added of the software were its multi-channel features, but the market did not want to think multi-channel.

However, if Mr. Mittal would be right, and I believe he might, especially given the low penetration of copper infrastructure in Emerging Markets, a multi-channel solution like Meridea definitely makes sense to address both content distribution and interactive services.

The fact that TV is listed on the list make me wonder though, since good TV infrastructure with interactive features depends again on copper or fiber, not available generally in most Emerging Markets. So perhaps Airtel is thinking about adding mobile devices to TV sets? Now, that would be interesting.

After finishing breakfast, I got into a cab, and started heading down to the office in MGR. It's an older building than EGL, and the age tells internally. The Yahoo premises are quite well-maintained anyway. Funny enough they have the same elevator problems as we do in London.

I did take a look at several projects, one of them being OurCity, which is beautifully minimalistic. If you have not had a chance yet, take a look at OurCity. OurCity works with the notion of modules, and a module repository. A module is a composition of a view and a data source, which will normally be a parametrized service call. You create modules and add them to a slot in a layout, which itself you can manage. Simple, elegant and efficient, it allows Yahoo! to quickly create local presence without major editorial costs.

For dinner I went with the team to a local Indian restaurant "apt" for foreigners. Really nice place in MGR, and great company. Believe or not, we actually spent most of our dinner discussing about architecture and design, the value of standards, technology strategy, etc.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2007-09-08 23:35:04</wp:post_date>
		<wp:post_date_gmt>2007-09-08 23:35:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>being-phileas-fogg-day-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409220764045312]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Being Phileas Fogg, Day 4</title>
		<link>http://www.olympum.com/other/being-phileas-fogg-day-4/</link>
		<pubDate>Sat, 08 Sep 2007 23:37:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/other/being-phileas-fogg-day-4/</guid>
		<description></description>
		<content:encoded><![CDATA[While talking this morning to the cab driver taking me to our EGL office in Bangalore, when for some unknown reason, the driver told me that his boss was paying him 3,400 rupees per month, and that after 22 years of service. That actually got me thinking..

The taxi company appointed by the hotel is paying a monthly contract fee of 60,000 rupees to the hotel. There are 30 drivers on contract. Each driver makes 3 to 4 trips a day, each bringing in 400 to 800 in sales. I'll let you do the numbers, but even considering extremely expensive car leases, gasoline, insurance, etc. you'll find out that this taxi business runs easily at close to 90% margins.

And apparently this is not unusual in India. The differences between the poor and the rich are huge. Whereas a taxi driver makes only 3,400 a month, a hotel general manager makes close to 100,000 rupees. Take into account that the taxi driver is not among the poorest in India, and you have right here an example of the remaining of casts in modern India.

But getting back to technology, I gave a TechTalk to the Indian office regarding architecture. I used the "seek vs transfer" example to show how we, as technologists, must sometimes solve technology problems that are strategic in nature and that the business is not necessarily going to think about, not to talk about spontaneously sponsoring. It is an architects job to identify these gaps, and ensure that long-term investment in technology is done.

The seek vs transfer problem and the work we are doing with Hadoop is just one example, but one that I find highly illustrating, and that most engineers associate easily once I walk them through Ebay's publicly known strategy for databases, removing transactions, order, joins, foreign keys ... to the point that Ebay even challenged whether a relational store was still useful for them.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date>2007-09-08 23:37:17</wp:post_date>
		<wp:post_date_gmt>2007-09-08 23:37:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>being-phileas-fogg-day-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409221263581185]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Being Phileas Fogg, Day 5</title>
		<link>http://www.olympum.com/other/being-phileas-fogg-day-5/</link>
		<pubDate>Sat, 08 Sep 2007 23:37:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/other/being-phileas-fogg-day-5/</guid>
		<description></description>
		<content:encoded><![CDATA[The flight to Singapore left close to midnight, and I had to go through only 6 security checks, one person checking after another that the previous one had done their job. It's always surprising to me to see how in India things are not necessarily always done in the most efficient ways. But then again, it is in fact and optimal utility point, since given the low cost of labour there is no incentive for being efficient in manual processes.

The flights with Singapore Airlines were fine, although the plane between Bangalore and Singapore was much older and rather run down than the one between Singapore and Seoul. The service however in both of them was exceptional. Singapore Airlines is always an amazing experience.

I did watch the last movie of the Pirates of the Caribbean, whatever is called, since I did not manage to sleep, at all. As we landed in Seoul, I saw an unbranded Airbus A380 in Seoul/Incheon being taxied. That plane, a double decker, is simply huge. I wonder what it was doing there, and where it was going to. It looked like a promotional plane for Airbus perhaps going or coming from some event or show.

The taxi was waiting for me, unlike in Bangalore, and it took us a bit over an hour to get the the Grand Intercontinental. It's a suberb hotel. Highly recommended, and example of the elegance and fine, delicate treatment of Asia.

It was my first time in Korea, and I was definitely impressed. Pity that everything is so expensive. I can see Korea might having trouble, alike Japan, to compete with China.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2007-09-08 23:37:51</wp:post_date>
		<wp:post_date_gmt>2007-09-08 23:37:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>being-phileas-fogg-day-5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409219338371073]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>581</wp:comment_id>
			<wp:comment_author><![CDATA[Jao Lucas]]></wp:comment_author>
			<wp:comment_author_email>jao.lucas@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.134.2.104</wp:comment_author_IP>
			<wp:comment_date>2007-09-17 04:38:09</wp:comment_date>
			<wp:comment_date_gmt>2007-09-17 04:38:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Bruno!

So what part of the world are you at now? Are you back in London? I just saw this now and wondered where the rest of your entries are. It has always been interesting to read your posts. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1130</wp:comment_id>
			<wp:comment_author><![CDATA[auro]]></wp:comment_author>
			<wp:comment_author_email>AURO.MEOTTO@GMAIL.COM</wp:comment_author_email>
			<wp:comment_author_url>http://www.meotto.com</wp:comment_author_url>
			<wp:comment_author_IP>82.243.160.237</wp:comment_author_IP>
			<wp:comment_date>2008-01-12 08:52:30</wp:comment_date>
			<wp:comment_date_gmt>2008-01-12 08:52:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bruno - you might have seen the 2nd A380 delivered to Singapore Airlines recently...
waiting to be branded and all!

auro]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Sun Microsystems set to buy MySQL</title>
		<link>http://www.olympum.com/java/sun-microsystems-set-to-buy-mysql/</link>
		<pubDate>Wed, 16 Jan 2008 14:35:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/java/sun-microsystems-set-to-buy-mysql/</guid>
		<description></description>
		<content:encoded><![CDATA[This is truly amazing. Sun and Oracle are set to buy all letters on the LAMP stack, with now <a href="http://mysql.com/news-and-events/sun-to-acquire-mysql.html">Sun buying MySQL for 1 billion dollars</a> (thanks Pascal for the ping). Maybe now Monty and David will start competing with <a href="http://gadgets.fosfor.se/rising-sun-larry-ellisons-yacht/">Larry Ellison's extravagant yacht department</a>. Seriously, 1 billion dollars is a record price for any open source company. Will Oracle now finally buy RedHat to put pressure on SUN?

I am hoping to see the JAVA ticker symbol company improve MySQL support, and licensing, for Java. Since, honestly, right now it sucks so much that one would say the only viable RDBMS alternative for Linux and Java is Oracle (please don't get me started with DB2).

 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date>2008-01-16 14:35:24</wp:post_date>
		<wp:post_date_gmt>2008-01-16 14:35:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sun-microsystems-set-to-buy-mysql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409215470850048]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1186</wp:comment_id>
			<wp:comment_author><![CDATA[Paul Barry]]></wp:comment_author>
			<wp:comment_author_email>mail@paulbarry.com</wp:comment_author_email>
			<wp:comment_author_url>http://paulbarry.com</wp:comment_author_url>
			<wp:comment_author_IP>66.92.166.158</wp:comment_author_IP>
			<wp:comment_date>2008-01-16 17:18:05</wp:comment_date>
			<wp:comment_date_gmt>2008-01-16 17:18:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Postgres?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1203</wp:comment_id>
			<wp:comment_author><![CDATA[Andrea Vascellari]]></wp:comment_author>
			<wp:comment_author_email>mail@vascellari.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.andreavascellari.com/blog</wp:comment_author_url>
			<wp:comment_author_IP>84.251.110.27</wp:comment_author_IP>
			<wp:comment_date>2008-01-18 14:56:51</wp:comment_date>
			<wp:comment_date_gmt>2008-01-18 14:56:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is a really good news!

Like you said 1 billion dollars is not bad talking about open source...

Now it's going to be interesting to see how Sun will use the 'leading-open source-power' of MySQL in its open source future!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1224</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>91.84.204.33</wp:comment_author_IP>
			<wp:comment_date>2008-01-19 15:37:13</wp:comment_date>
			<wp:comment_date_gmt>2008-01-19 15:37:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Perhaps, but by looking at <a href="http://jdbc.postgresql.org/todo.html" rel="nofollow">Postgresql JDBC TODO list</a>, I am not sure the drivers are ready for prime time.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Oops, Trying out Yahoo!&#039;s OpenID V2</title>
		<link>http://www.olympum.com/yahoo/oops-trying-out-yahoos-openid-v2/</link>
		<pubDate>Sat, 19 Jan 2008 15:48:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/yahoo/oops-trying-out-yahoos-openid-v2/</guid>
		<description></description>
		<content:encoded><![CDATA[I set myself to write last night a simple PHP OpenID consumer for Yahoo's! However, I have encountered the Oops message that most folks have also faced:

<blockquote>Ooops...
Hey there! You have stopped by a bit sooner than we had expected. This feature is still being tested, so please check back later.</blockquote>

Anyhow, I think it's really cool, both for users and for application providers, for a whole number of reasons:
<ul>
	<li>OpenID V2 has the notion of Directed Identity, which from a user's perspective simply means not having to know that you are using OpenID (like it should be). In other words, <strong>it just works</strong>. A simple HTTP POST to yahoo.com and you are all set!</li>
	<li>There is no need anymore to go through hurdles of storing user information and mapping users, like you almost always had to do with OpenID. With OpenID V2 the consumer can query profile information from the OpenID provider. The user has the control to select from a number of profiles stored on the provider, and even pick what attributes in a given profile get shared with each consumer. <strong>The user is in control!</strong></li>
 </ul>

Really, this is really exciting, and makes me very proud of being a Yahoo! ;) I'll pick this test back once we go live by end of this month.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date>2008-01-19 15:48:29</wp:post_date>
		<wp:post_date_gmt>2008-01-19 15:48:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>oops-trying-out-yahoos-openid-v2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="yahoo"><![CDATA[Yahoo!]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409217115004928]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Will Nokia change Trolltech&#039;s Qt GPL licensing?</title>
		<link>http://www.olympum.com/linux/will-nokia-change-trolltechs-qt-gpl-licensing/</link>
		<pubDate>Tue, 29 Jan 2008 11:36:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/linux/will-nokia-change-trolltechs-qt-gpl-licensing/</guid>
		<description></description>
		<content:encoded><![CDATA[It seems like it's open source buying season, with now <a href="http://trolltech.com/28012008/28012008">Nokia buying Trolltech</a>. I feel very happy for the Trolltech folks. We already talked about it, that <a href="/linux/why-trolltechs-qt-gpl-license-is-hurting-the-linux-desktop/#comment-556">Trolltech needed some fresh funding to change its business model</a>.

Since my first EPOC apps on a then Nokia Communicator prototype phone back in 2000, I have never been a Symbian fan (Symbian's SDK custom half-baked toolchain, the libraries solving C++ problems that should be left to the compiler, and most importantly, not running on Linux have always put me back from Symbian). Qt, is by far, the best UI toolkit, but <a href="/linux/why-trolltechs-qt-gpl-license-is-hurting-the-linux-desktop/">Qt has not grown to its full potential because of it being GPL</a>.

And, the question to me really is, will Nokia change the licensing of Qtopia? I certainly hope so, otherwise it will be really hard for mobile app developers to invest on this platform, especially in light of the competition from Symbian, .NET and Java platforms.




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date>2008-01-29 11:36:17</wp:post_date>
		<wp:post_date_gmt>2008-01-29 11:36:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>will-nokia-change-trolltechs-qt-gpl-licensing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409214292246528]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Moving Blog to Home Server</title>
		<link>http://www.olympum.com/linux/moving-blog-to-home-server/</link>
		<pubDate>Sun, 03 Feb 2008 19:44:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/linux/moving-blog-to-home-server/</guid>
		<description></description>
		<content:encoded><![CDATA[I have been running this blog on a slicehost VPS with excellent results so far. However, I am at the point where I need a bit more flexibility and I can't justify the $20 monthly fee to my home CFO. So, I did setup myself to move the server back home this weekend, where funny enough, I used to host this blog.

The first choice came down to choice of OS. I had been running Gentoo, but I have found this distribution bad for very low spec hardware. I am running on a fanless and rather exotic VIA C3 533Mhz chip, and compiling packages isn't particularly a fast thing on this box. I tried Gentoo a couple of years back on it, and getting gcc to compile would take a couple of days. Plus at some point it stopped working because of not sufficient memory.

Going through the choices I hesitated for a while with FreeBSD, but lack of good references for my CPU made me look at the Linux side, where I considered CentOS5, Debian and Ubuntu. I did not like CentOS RPMs - I don't any value-added on top of RHEL, and it feels odd to go free beer, but not free speech. That left Debian vs Ubuntu.

Whereas I have been relatively happy with Ubuntu as my laptop's OS for the last three years, I don't think Ubuntu has the necessary levels of testing required to "certify" a server OS. So I picked Debian, but instead of running stable (etch), I decided to go for test (lenny). Not as aggressive as Ubuntu, which is based on unstable (sid). Additionally, some packages I need (e.g. gmp for php) were not available in Etch.

So far, setting up the box to replicate the slicehost configuration has been relatively easy, with the exception of the MTA/IMAP which is always a pain. Have I had more memory and CPU I would have installed Zimbra. But since I am not sure my home CFO is going to be very impressed with me asking for yet another computer, I think I'll pass on Zimbra for now.

The initial install out of a bootable USB went without complications picking a basic setup, after which I added MySQL, Apache, PHP, Postfix and Cyrus. I prefer to add the stack by hand, to control exactly what gets installed. Finally, the upgrade to lenny was also extremely smooth.

I have now finished reconfiguring all DNS records to point to my public static IP (ADSL), which works great from the outside, but mixes things up while trying to access servers from the home network. I have figured out I'll have to setup a DNS server and overwrite the domains I serve and forward up to the ISPs everything else, but I wish there was an easier way of doing this. Yes, I could hack /etc/hosts, but I won't. The other downside of running at home is lack of reverse DNS lookups, but I think I can live with it.

In conclusion, I am overall extremely pleased with Debian, like I was with Ubuntu. I hope a few months of service, and I'll still be happy with it.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date>2008-02-03 19:44:50</wp:post_date>
		<wp:post_date_gmt>2008-02-03 19:44:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>moving-blog-to-home-server</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409211595694080]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1268</wp:comment_id>
			<wp:comment_author><![CDATA[Andrea Vascellari]]></wp:comment_author>
			<wp:comment_author_email>mail@vascellari.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.andreavascellari.com/blog</wp:comment_author_url>
			<wp:comment_author_IP>84.251.110.27</wp:comment_author_IP>
			<wp:comment_date>2008-02-04 05:27:09</wp:comment_date>
			<wp:comment_date_gmt>2008-02-04 05:27:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[quite a story mate!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>We are here to stay</title>
		<link>http://www.olympum.com/yahoo/we-are-here-to-stay/</link>
		<pubDate>Thu, 14 Feb 2008 11:18:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/yahoo/we-are-here-to-stay/</guid>
		<description></description>
		<content:encoded><![CDATA[This is mostly to recruiters and speculators alike. No, I have not been laid off. No, I don't know anything about the Microsoft bid. And no, I am not moving.

So that's clear: I love Yahoo!, and we have kick ass engineers producing kick ass technology. We rock, man! We are so cool!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date>2008-02-14 11:18:55</wp:post_date>
		<wp:post_date_gmt>2008-02-14 11:18:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>we-are-here-to-stay</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="yahoo"><![CDATA[Yahoo!]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409210660356098]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Andrea Ayuso Morillo, Au Pair Vanished in Thin Air</title>
		<link>http://www.olympum.com/other/andrea-ayuso-morillo-au-pair-vanished-in-thin-air/</link>
		<pubDate>Thu, 21 Feb 2008 23:10:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/other/andrea-ayuso-morillo-au-pair-vanished-in-thin-air/</guid>
		<description></description>
		<content:encoded><![CDATA[We got a new au pair in January from Spain, Andrea Ayuso Morillo, for our daughter. Our previous au pair had been Finnish, and Anaïs did learn pretty good language skills from her. We now wanted a Spanish girl to take care of our daughter Anaïs, to ensure her Spanish would improve. We found Andrea on a specialized site, au-pair world, and after a few calls and email exchanges she seemed like a really nice girl.

She came to the UK, and she seemed reliable and hard working. She was also imposing a bit of more authority in Anaïs, I guess a good thing too. We thought she was happy. But obviously we were wrong.

We spent last weekend in Finland, and returned on Sunday night. Andrea had disappeared. Her room was empty, all her belongings gone. And only one note to tell us that she was quitting. No notice, no discussion. No nothing.

She has now fully removed any traces. She has removed my wife as a connection from gmail. She has removed her profile from the au pair world where we first found her, and now we know that she posted an update in January looking for a new place in London. And she also posted her profile on another couple of sites. Yes, we know, Andrea. Even if you removed it, you cannot change the past. That's what the search engines cache is for.

So here is the thing, Andrea, you might be the best child caretaker in the world. You might be the best in social services. You might be friendly and good at your job. But you are not trust worthy. And trust, with a child, is the most important thing.

Andrea, nobody will trust you unless you grow up and find ways to discuss and communicate, to negotiate. You won't get far by being a coward, hiding away without daring to confront people. And yes, we are angry. Had you told us you were leaving, we would have understood, and planned for it. End of the story. All we needed was notice. You were paid for a week, and left half way through, and without notice. Besides this constituting a breach of contract, you behaved like a teenager. Shame on you, our daughter is more mature than you, being 27!

So why I am posting this? Firstly because you, Andrea, need to become accountable for your actions. You see, I just need to post this and let the search bots crawl my site, something that happens several times a day. And within a few days, this posting will be showing on the search results pages for Yahoo! and Google when people look for your name. Even a few years later, this post will still exist, and folks looking for references will find it.

Secondly, because I hope that by reading this other parents may not follow our own fate. If you are a parent reading this and Andrea is taking care of your children, take a minute or two to reflect about our story. Because it could happen to you too. One day, you wake up, and Andrea is gone, leaving you and your child in a really difficult situation.

<strong>Update (2008-03-02): </strong><em>It seems like Andrea's experience has improved dramatically since she left us a few weeks ago - she's gone from looking for au pair positions to <a href="http://www.gumtree.com/london/41/20766941.html" title="Andrea wants to become a nanny.">aspiring to become a nanny</a>.</em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date>2008-02-21 23:10:09</wp:post_date>
		<wp:post_date_gmt>2008-02-21 23:10:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>andrea-ayuso-morillo-au-pair-vanished-in-thin-air</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409209204953089]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415192410;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:273;}i:1;a:1:{s:2:"id";i:9;}i:2;a:1:{s:2:"id";i:25;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Bad technology choices will chase you</title>
		<link>http://www.olympum.com/architecture/bad-technology-choices-will-chase-you/</link>
		<pubDate>Sun, 24 Feb 2008 15:55:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/architecture/bad-technology-choices-will-chase-you/</guid>
		<description></description>
		<content:encoded><![CDATA[We, as engineers, are frequently faced with solving business problems, or sometimes technology problems, that really <em>move the needle</em>. We, as engineers, are usually never happy with any of the technologies in our tool chest. There is a place for every technology, but it always seems like our favorite technologies fall behind the cool kids in the block.

It is attractive to bet on emerging technologies. They are sexy, cool, promising high productivity gains, and in a way, good technologies are disruptive, not only to the technology landscape, but to the business landscape, since they change what can be achieved with technology.

And so, we feel inclined to risk and pick emerging technologies, without perhaps taking the time and consciously analyze and understand the impact. To list a few things:
<ul>
	<li>How many developers can I find with the required skills to support this technology? Where are they located? Are those locations where I can attract and retain talent?</li>
	<li>How secure and proven is the technology? Is there a good track record of fixing security bugs in very short time-frames?</li>
	<li>How complex is it to deploy this technology? How stable is it and what is the monitoring and analytics required  to operate it?</li>
	<li>How long would it take to migrate everybody in my company/group/division/org from the "old" stuff to this "new" stuff? Does it pay off?</li>
	<li>How long would it take to migrate my project from this "new" stuff to the "old" stuff? Does it make sense that I even start doing it?</li>
</ul>
Unfortunately, many times the answer to these questions leads to a categoric deception: we can do with the old technology, and that there is no need to introduce "new" stuff. While we should be trained to accept this outcome, we are not, and end up choosing the new cool and sexy stuff instead.

Picking stable, mature technology, despite its known shortcomings, should be the most traveled route for engineers, but unfortunately it is not. Specially in the context of startups, there is a desire to play with new technologies, somehow associating business innovation with technology risk.

Unfortunately, these risky technology choices later become heavy burdens that cost the venture either big bucks for paying star "talent" developers, big bucks for hardware and operations, or very low availability. In some cases, the technology might even become a dead-end and a re-engineering exercise is required anyway.

So, next time around, let's try to think beyond our desk, and into the long-term implications whenever we chose a technology.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date>2008-02-24 15:55:07</wp:post_date>
		<wp:post_date_gmt>2008-02-24 15:55:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bad-technology-choices-will-chase-you</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409204850872320]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1306</wp:comment_id>
			<wp:comment_author><![CDATA[Tjalle]]></wp:comment_author>
			<wp:comment_author_email>tjalle@shs.shh.fi</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>88.114.215.85</wp:comment_author_IP>
			<wp:comment_date>2008-02-24 18:23:14</wp:comment_date>
			<wp:comment_date_gmt>2008-02-24 18:23:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You're soooo right . as always :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1309</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>217.12.15.52</wp:comment_author_IP>
			<wp:comment_date>2008-02-26 10:23:32</wp:comment_date>
			<wp:comment_date_gmt>2008-02-26 10:23:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[fair enough, you are absolutely right about the need for technology being mature. being active and with a large community is a necessary but not sufficient condition to grant the use of the technology. you still need to address other factors within your organization and industry sector.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1307</wp:comment_id>
			<wp:comment_author><![CDATA[penberg]]></wp:comment_author>
			<wp:comment_author_email>penberg@cs.helsinki.fi</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>194.137.73.40</wp:comment_author_IP>
			<wp:comment_date>2008-02-25 14:13:38</wp:comment_date>
			<wp:comment_date_gmt>2008-02-25 14:13:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, but there's a subtle difference between "a stable technology" and "a dead one." When deciding on a long-term solution, you usually want to have something that is still under active development and evolving for years to come in addition to stability and maturity and not something that's already dead. And I think that's partly to blame here. Many people seem to think they need "new and cool" (which satisfies the active part) and forget the fact that it needs to have a established development community that is large enough to survive long-term (the stability part).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Are Java web frameworks ready for building frontends?</title>
		<link>http://www.olympum.com/frameworks/are-java-web-frameworks-ready-for-building-frontends/</link>
		<pubDate>Sun, 02 Mar 2008 21:02:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/frameworks/are-java-web-frameworks-ready-for-building-frontends/</guid>
		<description></description>
		<content:encoded><![CDATA[Once every year I like to spend some time revisiting a personal itch of mine: is Java ready for web prime-time?  Sadly, although Java has clearly proven its place in the server-side, it has failed in the frontend, last bit of the server-side, the thin layer that transforms business data into rendered HTML. This is what Rasmus Lerdorf calls the "glue" (<a href="http://www.php.net/manual/en/faq.installation.php#faq.installation.apache2" title="PHP is the glue">PHP is the glue</a>), basically a thin layer of presentational representation that links your server pre-assembled data.

Of course you could build web applications using either JSPs or one of the hundreds of web application frameworks available for Java. And a lot of leading players are doing just this. But contrary to some "enterprise" thinking, Java is by no stretch of imagination the leading language for web development.

The number of available web frameworks for Java is an indication of a ground where a problem exists that has not been addressed in any fully satisfactory way, yet. And I believe the key problem is productivity: Java is, still, not a productive platform for development, whereas it is probably the best available platform for production. And the thing is that although there is a very large, mature and globally distributed pool of Java server-side developers, Java is still hard to develop for because it is not a productive platform for this "glue".

A clue as of why it is not productive comes from analyzing the prime language users: the frontened web developers. It is actually really hard to find frontend web developers that want to use JSPs or any Java web framework. They rather use PHP, or Python, or Ruby, or Perl.

What all the P- scripting languages share in common is the low specs required to get started, the easiness itself to get started and hack something together, and most importantly that it only takes a single browser refresh to check any change and push the change to a production server. Sure, this is not a good practice (pushing to production), but it's something that for 99% of sites out there, it just works and it's good enough.

Java makes deployment hard. Starting a JVM takes seconds, refreshing a JSP takes seconds, changing classpaths, etc. require a restart or reload. Hardly productive. And the thing is, even though Java is more robust, better structured, and enforces better development practices, 99% of the sites out there just don't need this level of "enterprise" features. And I am not the only one saying so. Even Billy Newport, one of the lead architects behind WebSphere Application Server, and the Chief Architect behind WebSphere XD, has expressed this very same thought, that <a href="http://weblogs.java.net/blog/bnewport/archive/2006/06/java_versus_php.html" title="Billy Newport on PHP">Java needs to figure out how to become as productive as PHP</a>.

The productivity derived from the scripting language in those 99% of web sites out there is what makes Java unpopular for the remaining 1%. Java has to grow up in the web dev area. Ideally, one would like to take the best of both worlds: the robustness and performance of a JVM, and the productivity of the P-languages.

In my yearly review of the state-of-the-art, I am starting to think that this change to make Java more productive is finally starting to happen in 2008. First was the advent last year of the scripting languages becoming a target of the JVM, such as Jython, JRuby, PHP, Groovy, Scala, etc. made it possible to benefit from the JVM robustness. But still one had to suffer the JVM weight inflicted by Java (the language) centric development practices.

It's really only been over the last 6 months when we have seen a number of open source and closed-source projects taking on the task of bridging the scripting and JVM world together for web development. A couple of the web frameworks that I am interested in researching more about and that look rather promising to me are <a href="http://www.projectzero.org/" title="Project Zero">Project Zero</a>, and <a href="http://code.google.com/p/liftweb/" title="Lift web framework">liftweb</a>.

In summary, I really think we may be looking at 2008 as the year when Java finally graduated in the web dev frontend area. I certainly hope so. But only time will really tell.

<span style="font-style: italic" class="Apple-style-span">Disclaimer: this is not, by any stretch of imagination, Yahoo!'s official view. Don't try to read too much into this posting. For those that know me well enough, you'll know that I have been looking into application frameworks, web and others, since 2000.</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date>2008-03-02 21:02:31</wp:post_date>
		<wp:post_date_gmt>2008-03-02 21:02:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>are-java-web-frameworks-ready-for-building-frontends</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="frameworks"><![CDATA[Frameworks]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409204473364481]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415077341;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:16;}i:1;a:1:{s:2:"id";i:36;}i:2;a:1:{s:2:"id";i:10;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1515</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>91.84.204.33</wp:comment_author_IP>
			<wp:comment_date>2008-07-20 06:28:01</wp:comment_date>
			<wp:comment_date_gmt>2008-07-20 06:28:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[At some point I looked at <a href="http://www.olympum.com/frameworks/wicket-and-ejb3/" rel="nofollow">Wicket</a>, and found it to be the best of the Java presentation frameworks. I like component-based development, and Wicket (and Tapestry) both offer this. But there is a downside: memory. The automatic view-controller state management comes at a price, and I would <em>never</em> put Wicket on a publicly web facing website. In general, I would not put any statefull presentation framework for that matter.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1492</wp:comment_id>
			<wp:comment_author><![CDATA[Wille]]></wp:comment_author>
			<wp:comment_author_email>wille.faler@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://faler.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>212.162.211.211</wp:comment_author_IP>
			<wp:comment_date>2008-07-11 16:21:04</wp:comment_date>
			<wp:comment_date_gmt>2008-07-11 16:21:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you checked out Apache Wicket? To me, that was a return to being able to enjoy Java web development again, after avoiding it consciously for years. No jsp's, no xml configs, just plain html and plain (testable) Java.

I have also written a framework on top of Wicket and JPA (inventively called "Wicket RAD" - http://sites.google.com/site/wicketrad/), which takes a lot of the heavy lifting away from standard webapp development:
Just annotate a bean with JPA annotations, and Form annotations such as @TextField, @DropdownChoice etc, add a form-generator component to your page with your bean, and it will automatically generate a form that can persist or update the bean and backend data for you.

I agree that JSP development is a pain, I wouldn't want to touch it with a barge pole, but the situation is quickly improving with new approaches, such as the ones I mentioned.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>AOL Opens Up AIM</title>
		<link>http://www.olympum.com/imps/aol-opens-up-aim/</link>
		<pubDate>Wed, 05 Mar 2008 14:44:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/yamigo/aol-opens-up-aim/</guid>
		<description></description>
		<content:encoded><![CDATA[AOL has published the protocol powering both AIM and ICQ (code-named OSCAR). Although the protocol was already well known through reverse engineering, even if it's significantly more complex and chatty than MSN's or YMSG, this is really good news since it formalizes AOL supporting third party clients, including Yamigo. Additionally, besides publishing the protocol documentation, AOL has released an <a href="http://dev.aol.com/aimclient/OpenAIM167/reference/index.html">AIM SDK for C/C++ and Java</a>, and the ability for creating protocol plugins that can even be monetized through revenue-sharing with AOL. Altogether, a good move from AOL.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2008-03-05 14:44:41</wp:post_date>
		<wp:post_date_gmt>2008-03-05 14:44:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>aol-opens-up-aim</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="imps"><![CDATA[IMPS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409204473364481]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Enterprisey Architects</title>
		<link>http://www.olympum.com/architecture/enterprisey-architects/</link>
		<pubDate>Sun, 20 Jul 2008 07:50:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/architecture/enterprisey-architects/</guid>
		<description></description>
		<content:encoded><![CDATA[No, it's not a <a href="http://en.wikipedia.org/wiki/Enterprisey#Criticisms" title="Enterprisey in Wikipedia">typo</a>. I have been daring to write this for ages, but somehow I always refrained myself from doing it. But here it is, this post is about the propeller heads, the skyrocket scientists designing systems in the enterprise world (mostly in the financial services and telco world). Because guys, it's time to call it a day and move on. Time to stop building the <a href="http://en.wikipedia.org/wiki/Winchester_Mystery_House" title="Winchester House in Wikipedia">Winchester House</a>.

As background, I have recently been recruiting to backfil <a href="http://www.linkedin.com/in/remya" title="Remy Amouroux">Remy</a>, Yahoo!'s Chief Architect for Europe [and no, I am not looking any further]. It has proved to be a hell of a task. My mailbox and voicemail have been flooded with messages from agents and candidates. A pile of resumes to go through.

Most resumes are immediate rejects. Absolutely zero experience in online technologies. Do you apply for Yahoo! if you don't have a clue about even building a site? WTF!??? And, err, where is your blog, buddy? This is not just <em>any</em> job.

Anyway, moving on to interviews. I called in a few guys with very solid resumes. Outstanding resumes actually. Tons of experience. Lots of technology expertise, masses of troops, managing huge budgets. Right, bring them in, I say.

On the interviews (so that you know) I don't look at the resumes, <em>ever</em>. I could not care less, because you are allegedly supposed to be able to synthesize and I can read. So, expect to work hard at the interview. Rather, I'd love to see you design flickr, or Answers, or tell me how the frontpage could/would/should work, or, for fun, how you would liberalize the water supply system in the UK. I bring engineers on the room to discuss. They need your help, guidance, steering for making choices. Help them!

All I want to learn is that you can think beyond a Powerpoint and a bunch of theoretical ivory-tower diagrams. And you know, most often, candidates can't. The large majority of candidates when going through the exercises just put a few boxes up and don't actually get into what are the <em>hard</em> bits. And when challenged to think through them, they fail. I admit you might not know how to build our frontpage, but at least you should be able to appreciate the complexities during an interview.

The interesting thing is that all these candidates that fail have a common trait. They are the enterprisey architects (a few exceptions exist, like my good ol' friend Jeremy who is truly an enterprise architect). Enterprisey architects come with certifications, waving their TOGAF and Zachman willies. They operate so high-level that they ain't got a fucking clue.

Enterprisey architects make the argument that architects don't need to actually know the details (<em>I don't code, </em>they say). First, there is a hell of a difference between coding and designing systems and you seem not to be able to design systems. Secondly I honestly think there is something seriously wrong with anybody who wants to be a technology geek and does not like programming languages <em>per se</em>. It's like being a butcher and not liking meat. I'll tell you what: if you are not obsessed by [technology|volumes], you are not a [technology|civil] architect.

An enterprise architect is the architect that looks at solving problems across the enterprise, not the department, or the business units, to leverage the synergies and lead towards the future-state architecture. [Don't look this up, I just made this up].

An enterprisey architect is the architect that wants to be an enterprise architect but fails to engage with his customers, because he's not capable of being detailed enough (business strategy detail, functional domain detail, applications and technology detail, and infrastructure detail).

And as I keep telling my guys, (enterprise) architecture is not about technology, it's about people. You are expected to know the technology, mind you, but there are usually much more specialized engineers who need your steering for making choices (if they aren't such experts in your organization, you should start by building your team), so that you can find the detail that is relevant. You are supposed to understand the bigger picture, and lead folks into doing the right choices, so that you are not only <em>doing things right</em>, but also <em>doing the right things</em>. Enterprise architects use their social networks to make technology changes happen.

Again, it's not about technology, it's about people. But you know your technologies, right?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date>2008-07-20 07:50:46</wp:post_date>
		<wp:post_date_gmt>2008-07-20 07:50:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>enterprisey-architects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415496063;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:9;}i:1;a:1:{s:2:"id";i:10;}i:2;a:1:{s:2:"id";i:72;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2154</wp:comment_id>
			<wp:comment_author><![CDATA[Bookmarks about Answers]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.remmrit.com/answers</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-10-26 09:00:19</wp:comment_date>
			<wp:comment_date_gmt>2008-10-26 09:00:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] - bookmarked by 5 members originally found by andycourgette on 2008-10-11  Enterprisey Architects  http://www.olympum.com/architecture/enterprisey-architects/ - bookmarked by 3 members originally [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Want to colonize Mars?</title>
		<link>http://www.olympum.com/google/want-to-colonize-mars/</link>
		<pubDate>Tue, 01 Apr 2008 09:50:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/google/want-to-colonize-mars/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.google.com/virgle/index.html">Why not give it a go</a>? Or perhaps, <a href="http://www.youtube.com/projectvirgle">here </a>or  <a href="http://www.youtube.com/watch?v=PmSdy_9blB4">here</a>. Or even, <a href="http://www.youtube.com/watch?v=4spjSD4bl5I&amp;watch_response">here</a>.

I gotta love it.

http://www.google.com/virgle/index.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date>2008-04-01 09:50:12</wp:post_date>
		<wp:post_date_gmt>2008-04-01 09:50:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>want-to-colonize-mars</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="google"><![CDATA[Google]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409201075994626]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e3d6abd58c8b55cb57b560b28a97f8ba</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Why facebook is just a game</title>
		<link>http://www.olympum.com/internet/why-facebook-is-just-a-game/</link>
		<pubDate>Fri, 02 May 2008 16:26:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/internet/why-facebook-is-just-a-game/</guid>
		<description></description>
		<content:encoded><![CDATA[I keep saying that the web follows the pattern of the fashion industry. It's about image, it's about fun, it's about entertaining.  Sure, you can also buy stuff and do useful things. But that's what you <em>have</em> to do, not what you <em>want</em> to do.

That's why  facebook is popular - it's fun, it's about image, it's about entertainment.

And now, to prove it,  a nice chart  <a href="javascript:void(0)" id="file-link-78" title="Facebook application breakdown." class="file-link image"></a><a href="http://flowingdata.com/2008/05/01/chart-of-the-day-a-breakdown-of-facebook-applications/" title="Facebook applications">for the breakout of Facebook applications</a>.

[caption id="attachment_241" align="aligncenter" width="530" caption="Facebook application breakdown"]<img src="http://www.olympum.com/wordpress/wp-content/uploads/2008/05/app_breakdown3vq2vabv4x448s0sk080s8wws8td8r2s3w1cs4kksc4okksgg8th.jpeg" alt="Facebook application breakdown" title="Facebook application breakdown" width="530" height="512" class="size-full wp-image-241" />[/caption]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2008-05-02 16:26:54</wp:post_date>
		<wp:post_date_gmt>2008-05-02 16:26:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-facebook-is-just-a-game</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet"><![CDATA[Internet]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415228425;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:225;}i:1;a:1:{s:2:"id";i:288;}i:2;a:1:{s:2:"id";i:44;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1401</wp:comment_id>
			<wp:comment_author><![CDATA[links for 2008-05-26 | Andrea Vascellari]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.andreavascellari.com/blog/?p=407</wp:comment_author_url>
			<wp:comment_author_IP>83.100.49.235</wp:comment_author_IP>
			<wp:comment_date>2008-05-26 16:39:13</wp:comment_date>
			<wp:comment_date_gmt>2008-05-26 16:39:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Bruno Fernandez-Ruiz » Blog Archive » Why facebook is just a game the web follows the pattern of the fashion industry (tags: brunofernandez bloggers facebook fashion web) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1445</wp:comment_id>
			<wp:comment_author><![CDATA[Pébé&#8217;s blog &raquo; Blog Archive &raquo; Facebook or the art of the spam?]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.borghino.net/blog/2008/06/facebook-or-the-art-of-the-spam/</wp:comment_author_url>
			<wp:comment_author_IP>212.227.29.34</wp:comment_author_IP>
			<wp:comment_date>2008-06-15 17:43:32</wp:comment_date>
			<wp:comment_date_gmt>2008-06-15 17:43:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] was reading an article on &#8220;Why facebook is just a game&#8221; and start wandering about facebook itself. My first contact with the platform was last year, [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>what the iPhone is that Symbian isn&#039;t</title>
		<link>http://www.olympum.com/mobile/what-symbian-is-not-that-the-iphone-is/</link>
		<pubDate>Tue, 13 May 2008 09:52:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/mobile/what-symbian-is-not-that-the-iphone-is/</guid>
		<description></description>
		<content:encoded><![CDATA[one of the key strategic questions that developers looking into creating successful mobile applications need to answer is the choice of platform. we see an increasing consumer demand for desktop-like rich applications on the phone, but somehow the promise of such applications remains undelivered. developers can chose between the smartphone centric OSes, Windows CE and Symbian, or the desktop centric OSes, Linux and OS X. so which one should we chose to build those future desktop-like applications?

smartphone centric OSes are designed to address the limitations of the constrained mobile environment, while at the same time delivering a rich user experience. typical constraints range from input methods, battery and connectivity. let's be clear, these are good phone OSe,s, and they make good phones. but interestingly, these are constraints that have started to go away, and are becoming largely irrelevant, if not already irrelevant.

mobile network connectivity now offers full TCP/IP stacks on always-connected phones under flat fee transfer rates. battery life on most new phones allows such stack to be always on without significantly affecting the batter life, and input devices such as the iPhone demonstrate that the paradigm can be changed for the best.

in contrast, desktop centric mobile OSes are not really designed for mobile environments, and mobile is just an add-on. where the smartphone centric OSes need to impose API limitations, the desktop centric OSes don't impose almost any. where the smartphone centric OSes excel as phones, the desktop centric OSes tend to lack important features (the iPhone is a good computer but a really bad phone).

and the question really for developers starting now a new application is whether to develop for such phone-focused OSes, given the large market share, and hoping that they will be enhanced sometime in the future to become full OSes, or whether to go for desktop centric OSes, with currently a smaller market share, and hoping that the mobile features on the them are sufficient. in other words, what's more likely to happen, a desktop centric mobile OS being enhanced to become better phones, or a smartphone centric OS being enhanced to become a better desktop?

the answer to this leaves within the OSes themselves. today, the iPhone is an excellent mobile computer based on the OS X, but it's a really bad phone. however, the mach/bsd kernel, the quartz framework and the cocoa framework should make it relatively easy to add GPRS and UMTS to an iPhone. and possibly the only reason it's not there is purely commercial, based on the current distribution deal with AT&amp;T.

in contrast, you can't make a good desktop OS out of the smartphone centric OSes. they are simply crippled. i find it surprising to see how analysts overrate the symbian os. technically, symbian is a really unattractive and unproductive development platform to work with. commercially, it's a fragmented market with three competing and somehow incompatible platform variants: nokia's s60, sony-ericsson's uiq, and ntt docomo's moap.

from a technical standpoint, symbian has its own memory management and exception handling mechanisms which lead to a crippled and unfriendly C++-ish variant. symbian support for string handling is as bad as it gets, and even php does a better job! finally, writing complex interaction paradigms and network access is daunting: multi-threaded applications for symbian requires rocket scientists. and finally, and most importantly, the development environment is simply non-existent, mostly because of the custom C++ memory management and complex deployment process.

very sadly, java does not make a much better symbian. although language and tool support is excellent, the lack of uniformity on the platform itself, with MIDP 1.0 and 2.0, being implemented to different degrees by different vendors and by models, has resulted in tens of different APIs supported by some but not all phone models. it's really hard and time-consuming to develop for java applications for symbian. either you create multiple variants of your application, or you cut down to the least common denominator. neither option is attractive from a developer standpoint.

windows ce suffers similar problems to symbian. the programming model is overly complex and based on the highly developer unfriendly win32 api. alike java, the .net compact framework has not been consistently adapted, so one ends up with multiple binary targets, that require separate code, debugging, testing, distribution and installation. a nightmare from a developer's perspective. on the plus side, windows ce development environment is superb, including remote debugging abilities on the device itself. but overall, i discount windows ce as a no-go platform.

this really cuts it down to desktop centric OSes being a better choice for development going forward. that's really between OS X and Linux. and i am picking OS X and the iPhone. here's why.

as with anything linux, mobile linux is really many many things. different vendors have implemented things differently and are providing different stacks. some offer Qtopia, from Trolltech, some offer Gnome. then you have android, openzaurus, openmoko, ... no one phone has a significant market penetration, and to develop for linux really requires multiple binary targets and API abstraction layers. again, it's making things more complex than it ought to be.

in terms of kernel and integrated development environment, OS X is a much better platform. it's a highly productive environment. but it's proprietary to apple. which is good and bad. it's good since you know what hardware and software you need to support. it's bad since you are locked in, including for distribution.

but here comes the twist. developing a cocoa-based application for the iPhone is extremely easy, and given that Linux and OS X (mach/BSD) share so much in common, moving an iPhone application to a linux variant would not be any harder than moving between Gnome and Qt. good OO design should make it relatively easy.

in summary, iPhones features a robust and rich OS, OS X, a highly productive development environment, an aggressive market share growth, and lots of similarities with Linux. these are all good reasons to me to pick the iPhone as the target mobile platform of the future. i am not fully discounting linux however. the current issues with lack of significant market penetration could be overturn, specially in asia, and particularly in china.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2008-05-13 09:52:25</wp:post_date>
		<wp:post_date_gmt>2008-05-13 09:52:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-symbian-is-not-that-the-iphone-is</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415228454;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:67;}i:1;a:1:{s:2:"id";i:279;}i:2;a:1:{s:2:"id";i:55;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1387</wp:comment_id>
			<wp:comment_author><![CDATA[Tjalle]]></wp:comment_author>
			<wp:comment_author_email>jarl.wasstrom@accenture.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>88.114.215.85</wp:comment_author_IP>
			<wp:comment_date>2008-05-21 20:24:13</wp:comment_date>
			<wp:comment_date_gmt>2008-05-21 20:24:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Did you here about Nokia releasing a Linux based phone, just today. rgs:Tjalle]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1395</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>192.168.1.1</wp:comment_author_IP>
			<wp:comment_date>2008-05-24 08:08:59</wp:comment_date>
			<wp:comment_date_gmt>2008-05-24 08:08:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nokia has been playing  a double strategy for Linux. They have been doing mobile tablets for a while now using Linux (N800, N810), but it seems like Symbian is their core strategy. What has generated a lot of talk has been Reuter's article on Nokia's tablet launch where Nokia's CFO, Rick Simonson, is quoted saying "It's going to be terribly important". This has been taken out of context. Nokia has not publicly announced any shift like this, and it would do since it has tremendous impact in shareholder's value. Obviously, there is something in the cooking, but I think it's too early to tell, and we still need to see where things like Qtopia end up ...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3579</wp:comment_id>
			<wp:comment_author><![CDATA[Julya]]></wp:comment_author>
			<wp:comment_author_email>mail@slusen.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406008312</wp:comment_author_url>
			<wp:comment_author_IP>173.161.116.98</wp:comment_author_IP>
			<wp:comment_date>2012-05-22 11:22:27</wp:comment_date>
			<wp:comment_date_gmt>2012-05-22 11:22:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Salomon,Both your points are valid.I'd say that netoboks, sale points and other devices are irrelevant   the question I raise is around smartphones (otherwise, Windows Mobile/CE would have a lot more devices sold in its belt).I'd ask   how do you relate to the fact that the iPhone is so great? When one company focuses on their single platform, they end up having a better product.As Android runs the risk of getting fragmented due to vendors wanting to differentiate from each other, its stability and feature set might suffer. This may cause consumers to lose interest.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1341041837.9011";s:7:"message";s:46:"admin changed the comment status to unapproved";s:5:"event";s:17:"status-unapproved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1341041843.1685";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337685747.3688";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Wireless Village Headed to the Deadpool</title>
		<link>http://www.olympum.com/mobile/wireless-village-headed-to-the-deadpool/</link>
		<pubDate>Wed, 26 Nov 2008 15:03:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[I wrote about this header a little while ago in my <a title="Onesoup" href="http://www.onesoup.com/blog/imps-is-dead-long-live-xmpp/">onesoup blog</a>, but since I have received various emails from folks asking me whether I'd continue or not with onesoup. Basically, they all make the point that there is a latent customer base on old phones with the native client.

So the question really becomes: even if IMPS is a lagging technology, even if operators are unfriendly, even if nobody knows how to monetize IM, ... the penetration of these clients is huge. And users seem to be waking up. So, is there really a blooming market here, especially in emerging countries?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date>2008-11-26 15:03:49</wp:post_date>
		<wp:post_date_gmt>2008-11-26 15:03:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wireless-village-headed-to-the-deadpool</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Why Video-On-Demand Streaming in Airlines Sucks </title>
		<link>http://www.olympum.com/other/why-video-on-demand-streaming-in-airlines-sucks/</link>
		<pubDate>Tue, 19 Aug 2008 01:59:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/other/why-video-on-demand-streaming-in-airlines-sucks/</guid>
		<description></description>
		<content:encoded><![CDATA[It's rare to take a flight from British Airways or Virgin Atlantic where the Video-On-Demand system just works. It might be a problem only with UK airlines, but I presume this is a general issue across aviation.

Sometimes you are part of the folks in the plane for whom the system does not work. The crew will normally start rebooting your seat, then the section, and then the whole plane. I guess they do so in hopes that the operating system running the streaming adheres to the same random rules as the one running on their desktop.

In case of an incident with the entertainment system, i.e. in every single flight, the crew keeps apologizing about not being able to fix the problem and continue performing reboots left and right. Reboots are seldom able to address the problem, and the only thing reboots achieve is general frustration, both from those without video, but mostly from those with video who see their programs shut down. Eventually, the crew settles down to multicasting a few movies.

Virgin Atlantic even has the courage to advertise Virgin Media Broadband and TV packages on a commercial playing before the movie. Enjoy this cool entertainment system (that does not work) at home just like you do in the plane. I am no marketing guru, but that sounds to me like a dumb ass campaign.

I've seen a few times a linux boot-up sequence on Virgin, and I'd be surprised if BA was not also using Linux. Most likely, they are both using VideoLAN against one or multiple streaming servers with network attached storage. For whatever reason, it's the connectivity that fails, and the individual Linux workstations that fail to connect to the streaming server, or for the streaming server to be able to read the files from storage.

The reason to use attached storage is two-fold: cheaper, reliable and easier to update. But, guess what, wired networks don't seem to be reliable on a plane (probably because of the high-frequency power lines). So here's my advice folks: avoid the network (single point of failure). Here's how.

Virgin Atlantic has around 100 movies on inventory, plus TV series, CDs and radio programs. I'd bet their total inventory at any given point in time is between 250Gb and 500Gb. Maybe the solution to use shared storage made sense years ago cost-wise, but today the cost per Gb has fallen so much that internal disk storage could make more sense. Specially since there are no availability requirements (if it fails, a simple swap fixes the issue).

They could get a 1Tb disk per seat and image (push on the ground) all disks with the OS, the video player plus and the full media library. Re-imaging will take a few hours, but the inventory only gets fully updated every 2 to 3 months. Every seat would become an autonomous and reliable processing unit with its own storage. And in case of failure, it would only cost $100 to swap disk and reboot one seat, something the crew could do in-flight. No apologies, no pissed off customers, no compensation.

So, guys, go and implement it, so that I don't have to watch the beginning of The Oxford Murders from Alex de la Iglesia three times on my next flight.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2008-08-19 01:59:11</wp:post_date>
		<wp:post_date_gmt>2008-08-19 01:59:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-video-on-demand-streaming-in-airlines-sucks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3401</wp:comment_id>
			<wp:comment_author><![CDATA[JoyandIan]]></wp:comment_author>
			<wp:comment_author_email>info@karateacademy.de</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406006245</wp:comment_author_url>
			<wp:comment_author_IP>122.72.2.190</wp:comment_author_IP>
			<wp:comment_date>2012-05-21 14:15:37</wp:comment_date>
			<wp:comment_date_gmt>2012-05-21 14:15:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>very cool, i started being a preimum user today and so far its fantastic. like using it on my computer. ive used it on my ipad with the iphone app and works fantastic. i downloaded it to my dads nokia 5230 i reckon and it works amaizingly for such a cheap phone. im vacant to buy an htc desire i reckon and from what ive seen here and on the nokia phone then i reckon  is the best application for media playback on any device</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1337609737.752";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Can search be entertaining?</title>
		<link>http://www.olympum.com/yahoo/can-search-be-entertaining/</link>
		<pubDate>Wed, 20 Aug 2008 10:18:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/yahoo/can-search-be-entertaining/</guid>
		<description></description>
		<content:encoded><![CDATA[Definitely! I just got completely blown out by <a href="http://www.oamos.com/" title="Oamos">Oamos</a>. The search experience is fantastic. Images, videos, transitions and music are wonderfully inspiring. Ping from Artur Ortega.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date>2008-08-20 10:18:58</wp:post_date>
		<wp:post_date_gmt>2008-08-20 10:18:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>can-search-be-entertaining</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="yahoo"><![CDATA[Yahoo!]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1635</wp:comment_id>
			<wp:comment_author><![CDATA[ouelcum (laurent)]]></wp:comment_author>
			<wp:comment_author_email>laurent.web@famille-tardif.org</wp:comment_author_email>
			<wp:comment_author_url>http://ouelcum.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP>82.237.109.39</wp:comment_author_IP>
			<wp:comment_date>2008-08-22 15:35:31</wp:comment_date>
			<wp:comment_date_gmt>2008-08-22 15:35:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[definitely impressive !!!! the results quality are mixted, but the interface is definitely amazing ! I've spend some (lot of) time try hundreds of querries :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Could the financial downturn be the end of Darwinism</title>
		<link>http://www.olympum.com/future/could-the-financial-downturn-be-the-end-of-darwinism/</link>
		<pubDate>Sat, 11 Oct 2008 09:04:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/could-the-financial-downturn-be-the-end-of-darwinism/</guid>
		<description></description>
		<content:encoded><![CDATA[Because that's really what it is. Somebody that was not fitted and loosing big (aka Western Cultures) has just started a new game of Monopoly, and you and I are not getting any of the money in this new game. Some may call it the end of capitalism, but I would go even further, this is the end of Darwinism (and a prove that Hegel was looking at the past, and not the future like Marx wanted to see in it).

There are unknown consequences for any deep interventionist economic policy. Anybody who says so it's either a fool or badly naive. But worse of all, intervention of this kind defeats the system as we know it, where the fittest survive.

Without intervention this crisis would have been a chance for those without debt to compete, i.e. the very poor.  All that we will see is further foreign investment from large sovereign funds, and that hardly benefits the poorest nations in the World.  I am very disappointed by our politicians lack of pro-activity and foresight.

We live in a culture that encourages risk, and hence competition and growth. But now we have simply wiped out the consequences of failure. The failed specimens survive, unlike what Darwin taught us ...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date>2008-10-11 09:04:40</wp:post_date>
		<wp:post_date_gmt>2008-10-11 09:04:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>could-the-financial-downturn-be-the-end-of-darwinism</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415372016;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:57;}i:1;a:1:{s:2:"id";i:71;}i:2;a:1:{s:2:"id";i:245;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Will XMPP be the messaging middleware for the REST Web?</title>
		<link>http://www.olympum.com/future/will-xmpp-be-the-messaging-middleware-for-the-rest-web/</link>
		<pubDate>Tue, 30 Dec 2008 11:04:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=97</guid>
		<description></description>
		<content:encoded><![CDATA[We know the social web needs real-time event notifications, and that polling sucks. Some are wondering whether we can implement it using asynchronous messaging, ala Pub/Sub. The Publish/Subscribe is an architectural paradigm allowing asynchronous messaging from one sender (publisher) to many receivers (subscribers). PubSub is a common architecture in financial services, since it's associated with persistence and ensured message delivery. But such qualities don't come for free: there are complexity trade-offs.

Anyway, the conversation started in February, with Mickaël Rémond talking in his blog at ProcessOne (the maintainers of the top-notch Erlang ejbabberd XMPP server) about <a href="http://www.process-one.net/en/blogs/article/introducing_the_xmpp_application_server/">XMPP the application server</a>, where he turned the <a href="http://xmpp.org/extensions/xep-0060.html">PubSub XMPP extension</a> into a public event firehose for twitter. And because Mickaël puts his money where his mouth is, he opened a public service doing just that, <a href="http://www.process-one.net/en/blogs/article/tweetim_a_twitter_xmpp_gateway_service/">an XMPP gateway to twitter</a>, or what twitter should have done to begin with.

Then came Internet veteran <a href="http://one.valeski.org">Jud</a>, from upcoming <a href="http://gnipcentral.com">Gnip</a>, blogging about <a href="http://one.valeski.org/2008/06/sockets-http-xmpp-and-leap-frog.html">sockets, HTTP and XMPP</a>, and how the in the original non-reliable Internet topology the stateless HTTP worked because it brought reliability, but that today's reliable Internet topology could allow HTTP to be replaced by the stateful XMPP protocol.

It hit us again, at OSCON 2008 in July, with fellow Yahoo's hackers <a href="http://anarchogeek.com/">Rabble</a> and <a href="http://laughingmeme.org/">Kellan</a> talking about <a href="http://en.oreilly.com/oscon2008/public/schedule/detail/4359">data services streaming using XMPP PubSub</a>. We know that having to do frequent HTTP polling sucks, and unfortunately that's the best we can do many times, so they proposed to use a cut-down XMPP server (no roster, etc.) to build a public Publish/Subscribe messaging infrastructure. They worked it out for FireEagle and Flickr building external <a href="http://xmpp.org/extensions/xep-0114.html">XMPP components</a>, and connected a web stack through queues. XSF has gone further, proposing a new standard for <a href="http://xmpp.org/extensions/xep-0253.html">chaining components</a>, and why not, even <a href="http://xmpp.org/internet-drafts/draft-saintandre-atompub-notify-07.txt">a pubsub data stream for Atom</a>.

Honestly, there is plenty of buzz. Brian Dainton also talked about <a href="http://www.slideshare.net/bdainton/a-change-in-protocol-exploring-xmpp-in-ruby-presentation?type=document">XMPP for event broadcasting instead of REST</a>. The folks at <a href="http://www.chesspark.com/">ChessPark</a>, with <a href="http://metajack.im/about/">Jack Moffitt</a>, are doing just that with <a href="http://metajack.im/2008/08/04/thoughts-on-scalable-xmpp-bots/">component bots</a>.

It might be that XMPP eventually replaces HTTP for event notification, avoiding the need to poll. But today, HTTP and REST are patterns known to work. Let me examine why I think a REST approach still works better today:
<ul>
	<li>The Internet, the firewalls, the monitoring, are not built today for persistent connections. XMPP real-time events are possible since a TCP socket is kept open. <a href="http://xmpp.org/extensions/xep-0124.html">BOSH</a> and <a href="http://xmpp.org/extensions/xep-0206.html">XMPP over BOSH</a> make it possible to run XMPP over HTTP, and provide almost real-time notification. I like BOSH, a lot, but it is still an emerging technology that needs plenty of love. XMPP metadata is still not implemented in BOSH, and the client-side implementations are weak.</li>
	<li>Running an Apache server and setting a up a REST service is almost straight forward. We know how it works, how it scales, and how it fails. Running a XMPP server, even the excellent ejabberd, is not as easy as running Apache, and most folks are likely not to run their own XMPP server and rely on third parties like jabber.org or gtalk. The good folks at <a href="http://blog.gnipcentral.com/2008/11/03/winding-down-xmpp-for-now/">gnip cut down on XMPP</a> because of lack of reliability of the XMPP third parties. XMPP, still, is too complex to operate.</li>
	<li>Supporting <a href="http://metajack.wordpress.com/2008/06/10/binary-data-is-xmpps-achilles-heel/">binary data is XMPP's achilles heel</a>.</li>
	<li>There are simpler HTTP only alternatives. <a href="http://brad.livejournal.com/2143713.html">Brad Fitzpatrick</a> implemented a never-ending Atom feed for the <a href="http://updates.sixapart.com/">LiveJournal update stream</a> years ago. A partial solution to reduce polling, although not real-time, is <a href="http://roy.gbiv.com/untangled/2008/paper-tigers-and-hidden-dragons">Roy's better resource mapping</a>. And let's not forget the straight forward <a href="http://joshua.schachter.org/2008/07/beyond-rest.html">callback</a>. Oh yes, <a href="http://mymobilesite.net/">running an Apache server on your mobile phone is possible</a>.</li>
</ul>
Will XMPP become the messaging middleware for the web? Eventually, perhaps, but in today's environment, neither the infrastructure or the software are ready to support such a model. As importantly, there are simpler alternatives to achieve real-time event notification without requiring the publish/subscribe architecture.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date>2008-12-30 11:04:21</wp:post_date>
		<wp:post_date_gmt>2008-12-30 11:04:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>will-xmpp-be-the-messaging-middleware-for-the-rest-web</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409187063201793]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415530188;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:254;}i:1;a:1:{s:2:"id";i:116;}i:2;a:1:{s:2:"id";i:129;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2609</wp:comment_id>
			<wp:comment_author><![CDATA[Pourquoi XMPP (n&#8217;)est (pas) le futur HTTP ? at OTMF]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ubikod.com/otmf/2009/02/10/pourquoi-xmpp-nest-pas-le-futur-http/</wp:comment_author_url>
			<wp:comment_author_IP>213.251.189.201</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 00:17:54</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 00:17:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Bruno Fernandez-Ruiz souligne quant à lui que l&#8217;infrastructure réseau actuelle (firewall, outils de monitoring, internet) n&#8217;est pas adaptée à la conservation de sockets persistantes. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2610</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Cestari]]></wp:comment_author>
			<wp:comment_author_email>eric@ohmforce.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.cestari.info/</wp:comment_author_url>
			<wp:comment_author_IP>82.238.70.31</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 10:41:58</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 10:41:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thanks for the post, Bruno. Made me write down a few ideas I have on the subject :
http://www.cestari.info/2009/2/10/why-choose-xmpp-versus-http-or-http-versus-xmpp]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2600</wp:comment_id>
			<wp:comment_author><![CDATA[Egon Willighagen]]></wp:comment_author>
			<wp:comment_author_email>egon.willighagen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://chem-bla-ics.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>130.238.45.93</wp:comment_author_IP>
			<wp:comment_date>2009-01-22 10:57:44</wp:comment_date>
			<wp:comment_date_gmt>2009-01-22 10:57:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Recently, Jonathan, me and other have developed software that implements a XMPP proposal (IO-DATA, XEP-0244) that formalizes the machine-2-machine chatting for running services. I blogged about that a few times, including this week:

http://chem-bla-ics.blogspot.com/2008/10/next-generation-asynchronous.html
http://chem-bla-ics.blogspot.com/2009/01/details-behind-calling-xmpp-cloud.html

We find the asynchronous nature very attractive.

Joe, we also think that the support of multiple namespaces allows strong data typing, needed in life science services.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2599</wp:comment_id>
			<wp:comment_author><![CDATA[Joe]]></wp:comment_author>
			<wp:comment_author_email>josephjameswood@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>198.240.130.75</wp:comment_author_IP>
			<wp:comment_date>2009-01-22 01:45:19</wp:comment_date>
			<wp:comment_date_gmt>2009-01-22 01:45:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I hope XMPP won't become the new standard.  Having written an IM using it I couldn't recommend it as a protocol.  Single letter element names, multiple nested namespaces.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2606</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.96.9.205</wp:comment_author_IP>
			<wp:comment_date>2009-02-02 08:29:04</wp:comment_date>
			<wp:comment_date_gmt>2009-02-02 08:29:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Egon - I think we are talking about slightly different things. One issue is optimizing the s2s communication, and basically IO-DATA looks like the formalization of an RPC layer on top of XMPP. But to me, the biggest issue is bridging the HTTP workload with the messaging infrastructure. If XMPP is such messaging infrastructure, you need some sort of queues, which will normally be XMPP components or sometimes light XMPP servers. The issue really becomes scaling those queues.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2616</wp:comment_id>
			<wp:comment_author><![CDATA[Online]]></wp:comment_author>
			<wp:comment_author_email>iuraoster@yandex.ru</wp:comment_author_email>
			<wp:comment_author_url>http://vip-progon.ru/</wp:comment_author_url>
			<wp:comment_author_IP>92.115.192.196</wp:comment_author_IP>
			<wp:comment_date>2009-02-20 07:50:30</wp:comment_date>
			<wp:comment_date_gmt>2009-02-20 07:50:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Пинайте своего хостера - сайт с трудом открылся :(]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2738</wp:comment_id>
			<wp:comment_author><![CDATA[The Year of Living Asynchronously | Illation Ltd]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.illation.com.au/2010/01/the-year-of-living-asynchronously/</wp:comment_author_url>
			<wp:comment_author_IP>216.218.252.12</wp:comment_author_IP>
			<wp:comment_date>2010-01-13 12:05:13</wp:comment_date>
			<wp:comment_date_gmt>2010-01-13 12:05:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] has been embraced by the real-time web crowd, most publicly in Google Wave but also in other &#8220;back-web&#8221; contexts such [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2846</wp:comment_id>
			<wp:comment_author><![CDATA[Illation LTD &raquo; The Year of Living Asynchronously]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.illation.com/archives/24</wp:comment_author_url>
			<wp:comment_author_IP>174.122.148.162</wp:comment_author_IP>
			<wp:comment_date>2012-02-01 05:25:45</wp:comment_date>
			<wp:comment_date_gmt>2012-02-01 05:25:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] been embraced by the real-time web crowd, most publicly in Google Wave but also in other “back-web” contexts such [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328073945.4869";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3235</wp:comment_id>
			<wp:comment_author><![CDATA[The Year of Living Asynchronously &laquo; &laquo; Illation.com Illation.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://illation.com/new/the-year-of-living-asynchronously/</wp:comment_author_url>
			<wp:comment_author_IP>174.122.148.162</wp:comment_author_IP>
			<wp:comment_date>2012-05-10 14:17:24</wp:comment_date>
			<wp:comment_date_gmt>2012-05-10 14:17:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] been embraced by the real-time web crowd, most publicly in Google Wave but also in other “back-web” contexts such [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1336659444.6604";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3376</wp:comment_id>
			<wp:comment_author><![CDATA[Karim]]></wp:comment_author>
			<wp:comment_author_email>san_ypssli@sancharnet.in</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406002202</wp:comment_author_url>
			<wp:comment_author_IP>92.96.159.206</wp:comment_author_IP>
			<wp:comment_date>2012-05-21 12:46:07</wp:comment_date>
			<wp:comment_date_gmt>2012-05-21 12:46:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>I hear you Julien but it seems that every other field today is trying to get into the brsower so XMPP needs to do it too. Having separate clients sounds backward to me and I really hop brsowers will integrate XMPP someday. At least libstrophe covers some immediate needs but is it enough? Hard to say.But beyond the technology issue, there is a need for big players to open up their data through XMPP.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2738</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337604367.3733";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Twisted Virtual Environment Goodness</title>
		<link>http://www.olympum.com/imps/twisted-virtual-environment-goodness/</link>
		<pubDate>Tue, 13 Jan 2009 14:35:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[Python 2.5.1 is bundled into Mac OS X 10.5 (Leopard), which comes also with setuptools. The breadth of easy_install packages is available pretty much at your fingertips on Leopard.

On the downside, Leopard’s python ships with old versions of some packages, and we might need to upgrade them. We are left with three choices:
<ol>
	<li>Overwrite packages with new ones.</li>
	<li>Install new ones and set PythonPath.</li>
	<li>Use virtualenv.</li>
</ol>
I prefer to use #3. It’s cleaner, it does not change my system, it allows as many environments as we like without one contaminating the other, while at the same time not requiring a fresh python re-install for every working environment.

I want to create an environment for my imps-to-xmpp gateway, for which will be using twisted words. I want to use the latest version (8.2), but the shipped version with leopard is fairly old (2.5):
<pre><code>$ which twistd
/usr/bin/twistd
$ twistd --version
twistd (the Twisted daemon) 2.5.0
Copyright (c) 2001-2006 Twisted Matrix Laboratories.
See LICENSE for details.
</code></pre>
So, we’ll start by installing virtualenv using setuptools:
<pre><code>$ easy_install virtualenv
</code></pre>
And now, we’ll create a virtual environment on which we can install the updated twisted:
<pre><code>$ cd ~/Sites/
$ mkdir python
$ cd python
$ virtualenv imps
$ source imps/bin/activate
$ easy_install twisted
</code></pre>
We can now check that we are running the latest version of twisted (8.2 as of writing):
<pre><code>$ twistd --version
twistd (the Twisted daemon) 8.2.0
Copyright (c) 2001-2008 Twisted Matrix Laboratories.
See LICENSE for details.</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2009-01-13 14:35:09</wp:post_date>
		<wp:post_date_gmt>2009-01-13 14:35:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>twisted-virtual-environment-goodness</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="imps"><![CDATA[IMPS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409185468977153]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415059678;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:121;}i:1;a:1:{s:2:"id";i:36;}i:2;a:1:{s:2:"id";i:118;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2577</wp:comment_id>
			<wp:comment_author><![CDATA[Getting libwxml on MacPorts]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/imps/getting-libwxml-on-macports/</wp:comment_author_url>
			<wp:comment_author_IP>207.192.69.162</wp:comment_author_IP>
			<wp:comment_date>2009-01-13 23:00:06</wp:comment_date>
			<wp:comment_date_gmt>2009-01-13 23:00:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Enter the virtualenv: [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Twisted Web IMPS Echo Client</title>
		<link>http://www.olympum.com/other/twisted-web-imps-echo-client/</link>
		<pubDate>Tue, 13 Jan 2009 14:36:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=118</guid>
		<description></description>
		<content:encoded><![CDATA[Having a twisted environment, I have been able to write a simple web resource handler. I like twisted, although the documentation is pretty weak, so you have to go down to read the code rather frequently if you want to know how to do things.

My first task was to handle an XML post for IMPS CSP. I thought I would skip the wbxml version to start with.

So first thing was to setup the test client. Just for now, I used <code>curl</code> to post the data:
<pre><code>curl http://localhost:8080/ -d @login-success.in.txt
</code></pre>
Where <code>login-success.in.txt</code> is the first message the phone sends in:
<pre><code>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE WV-CSP-Message PUBLIC "-//OMA//DTD WV-CSP 1.2//EN" "http://www.openmobilealliance.org/DTD/WV-CSP.DTD"&gt;
&lt;WV-CSP-Message xmlns="http://www.wireless-village.org/CSP1.1"&gt;
  &lt;Session&gt;
    &lt;SessionDescriptor&gt;
      &lt;SessionType&gt;Outband&lt;/SessionType&gt;
    &lt;/SessionDescriptor&gt;
    &lt;Transaction&gt;
      &lt;TransactionDescriptor&gt;
        &lt;TransactionMode&gt;Request&lt;/TransactionMode&gt;
        &lt;TransactionID&gt;nok1&lt;/TransactionID&gt;
      &lt;/TransactionDescriptor&gt;
      &lt;TransactionContent xmlns="http://www.wireless-village.org/TRC1.1"&gt;
        &lt;Login-Request&gt;
          &lt;UserID&gt;hermes.onesoup&lt;/UserID&gt;
          &lt;ClientID&gt;
            &lt;URL&gt;WV:IMPEC01$00001@NOK.S60&lt;/URL&gt;
          &lt;/ClientID&gt;
          &lt;Password&gt;xxxxxxx&lt;/Password&gt;
          &lt;TimeToLive&gt;86400&lt;/TimeToLive&gt;
          &lt;SessionCookie&gt;wv:nokia.1789505498&lt;/SessionCookie&gt;
        &lt;/Login-Request&gt;
      &lt;/TransactionContent&gt;
    &lt;/Transaction&gt;
  &lt;/Session&gt;
&lt;/WV-CSP-Message&gt;
</code></pre>
The payload is contained within the POST data, but there are not arguments on it (no a=x). So I needed to get the raw content. To achieve that, I created a <code>hello.py</code> file which would contain my <code>Hello</code> resource handler:

<pre name="code" class="python">
from twisted.web.resource import Resource

class Hello(Resource):
    allowedMethods = ('POST',)

    def render_POST(self, request):
        request.content.seek(0, 0)
        data = request.content.read()
        return data
</pre>

<p id="scroll_to_here">As we can see, all this does is to send the payload in the HTTP POST request back to the client. To get this running on twisted, we write an <code>index.rpy</code> and save it in <code>/Users/brunofr/Sites</code> (adjust):</p>

<pre><code>from imps.csp import hello

# comment the next line in production
reload(hello)
resource = hello.Hello()
</code></pre>
A couple of comments about this code:
<ol>
	<li>I put the code within the <code>imps.csp</code> module.</li>
	<li>I call <code>reload</code> to allow me to edit the module during development.</li>
</ol>
And bang, we run it:
<pre><code>twisted -n web --path=/Users/brunofr/Sites
</code></pre>
Point your browser to <code>http://localhost:8080/</code>. It does not work, since we are not accepting the ‘GET’ method. But if you use <code>curl</code>:
<pre><code>curl http://localhost:8080/ -d @login-success.in.txt
</code></pre>
it works, as it should.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date>2009-01-13 14:36:54</wp:post_date>
		<wp:post_date_gmt>2009-01-13 14:36:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>twisted-web-imps-echo-client</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2601</wp:comment_id>
			<wp:comment_author><![CDATA[Open Source Wireless Village IMPS at onesoup&#8217;s free mobile instant messenger]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.onesoup.com/blog/open-source-wireless-village-imps/</wp:comment_author_url>
			<wp:comment_author_IP>207.192.69.162</wp:comment_author_IP>
			<wp:comment_date>2009-01-22 12:15:54</wp:comment_date>
			<wp:comment_date_gmt>2009-01-22 12:15:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] I have blogged about in the past, I am fully re-writing the system to move to XMPP. All the code, obviously, is now written in Python. The new [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Getting libwbxml on MacPorts</title>
		<link>http://www.olympum.com/imps/getting-libwbxml-on-macports/</link>
		<pubDate>Tue, 13 Jan 2009 20:15:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[I need to be able to receive <code>wbxml</code> (binary XML) and transform it to xml using the IMPS 1.1/1.2/1.3 dictionary in Python. In PHP, I was using the PHP PECL extension <code>wbxml</code>, which uses <code>libwbxml</code> (<code>wbxml2</code>). In python, I need <code>pywbxml</code>. I like MacPorts, and I’ll use that instead of compiling myself the packages.
<ol>
	<li><a href="http://www.macports.org/install.php">Install MacPorts</a>.</li>
	<li>Self-update:
<pre><code>sudo port -v selfupdate
</code></pre>
</li>
	<li>Some general goodness I can’t live without (wget will pull a long dependency list of things we’ll need for web development):
<pre><code>sudo port install wget
</code></pre>
</li>
	<li>Wait.</li>
	<li>Install wbxml
<pre><code>sudo port install wbxml2
</code></pre>
</li>
	<li>And we get an error:
<pre><code>$ sudo port -v install wbxml2
---&gt;  Configuring wbxml2
Error: Target org.macports.configure returned: invalid command name "cd"
Warning: the following items did not execute (for wbxml2):
org.macports.activate org.macports.configure org.macports.build
org.macports.destroot org.macports.install
Error: Status 1 encountered during processing.
</code></pre>
</li>
</ol>
So I filed a <a href="https://trac.macports.org/ticket/17984">ticket</a>. It seems like wbxml2 ownership moved to the <a href="http://libwbxml.opensync.org/">opensync folks</a> since the port was added. The port builds on 0.9.0 and the latest version is 0.10.1. I don’t much (nothing?) about MacPorts, but I went ahead and I patched it. You can find the patch on the <a href="https://trac.macports.org/ticket/17984">ticket</a> itself.

Finally, moving onto <code>pywbxml</code>. It seems the only maintained <code>pywbxml</code> code is from the <a href="http://www.synce.org/">synce</a> folks.
<ol>
	<li><a href="http://downloads.sourceforge.net/synce/pywbxml-0.1.tar.gz">Download pywbxml from sourceforge</a>.</li>
	<li>Enter the <a href="http://www.olympum.com/imps/twisted-virtual-environment-goodness/">virtualenv</a>:
<pre><code>$ source ~/Sites/python/imps/bin/activate
</code></pre>
</li>
	<li><code>pywbxml</code> needs pyrex, so we’ll install that first with:
<pre><code>$ easy_install pyrex
</code></pre>
</li>
	<li>Install <code>pywbxml</code>:
<pre><code>$ tar xzfv pywbxml-0.1.tar.gz
$ cd pywbxml-0.1
$ ./configure
$ make
$ make install
</code></pre>
</li>
	<li>Optionally, move the libraries to the virtualenv to keep things clean:
<pre><code>$ mv /Library/Python/2.5/site-packages/pywbxml.* \
    /Users/brunofr/Sites/python/imps/lib/python2.5/site-packages
</code></pre>
</li>
</ol>
Now, we can test it:
<pre id="scroll_to_here"><code>  $ python
  Python 2.5.1 (r251:54863, Apr 15 2008, 22:57:26)
  [GCC 4.0.1 (Apple Inc. build 5465)] on darwin
  Type "help", "copyright", "credits" or "license" for more information.
  &gt;&gt;&gt; from pywbxml import xml2wbxml, wbxml2xml
  &gt;&gt;&gt; xml = """&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE WV-CSP-Message PUBLIC "-//OMA//DTD WV-CSP 1.2//EN" "http://www.openmobilealliance.org/DTD/WV-CSP.DTD"&gt;&lt;WV-CSP-Message xmlns="http://www.wireless-village.org/CSP1.1"&gt;&lt;Session&gt;&lt;SessionDescriptor&gt;&lt;SessionType&gt;Outband&lt;/SessionType&gt;&lt;/SessionDescriptor&gt;&lt;Transaction&gt;&lt;TransactionDescriptor&gt;&lt;TransactionMode&gt;Request&lt;/TransactionMode&gt;&lt;TransactionID&gt;nok1&lt;/TransactionID&gt;&lt;/TransactionDescriptor&gt;&lt;TransactionContent xmlns="http://www.wireless-village.org/TRC1.1"&gt;&lt;Login-Request&gt;&lt;UserID&gt;hermes.onesoup&lt;/UserID&gt;&lt;ClientID&gt;&lt;URL&gt;WV:IMPEC01$00001@NOK.S60&lt;/URL&gt;&lt;/ClientID&gt;&lt;Password&gt;xxxxxx&lt;/Password&gt;&lt;TimeToLive&gt;86400&lt;/TimeToLive&gt;&lt;SessionCookie&gt;wv:nokia.1789505498&lt;/SessionCookie&gt;&lt;/Login-Request&gt;&lt;/TransactionContent&gt;&lt;/Transaction&gt;&lt;/Session&gt;&lt;/WV-CSP-Message&gt;"""
  &gt;&gt;&gt; binary = xml2wbxml(xml)
  &gt;&gt;&gt; text = wbxml2xml(binary)
  &gt;&gt;&gt; binary
  '\x03\x01j\x00Imnp\x80\x19\x01\x01rtv\x80 \x01u\x03nok1\x00\x01\x01s\x00\x01]\x00\x00z\x03hermes.onesoup\x00\x01Jw\x03WV:\x00\x80\x12\x03PEC01$00001@NOK.S60\x00\x01\x01\x00\x01a\x03xxxxxx\x00\x01r\xc3\x03\x01Q\x80\x01p\x03wv:nokia.1789505498\x00\x01\x01\x01\x01\x01\x01'
  &gt;&gt;&gt; text
  '&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE AirSync PUBLIC "-//AIRSYNC//DTD AirSync//EN" "http://www.microsoft.com/"&gt;&lt;Delete xmlns="http://synce.org/formats/airsync_wm5/airsync"&gt;&lt;unknown&gt;&lt;unknown&gt;&lt;unknown&gt;&lt;Truncation/&gt;&lt;/unknown&gt;&lt;/unknown&gt;&lt;unknown&gt;&lt;unknown&gt;&lt;unknown&gt;&lt;Supported/&gt;&lt;/unknown&gt;&lt;unknown&gt;nok1&lt;/unknown&gt;&lt;/unknown&gt;&lt;unknown&gt;&lt;Email3Address&gt;&lt;unknown&gt;hermes.onesoup&lt;/unknown&gt;&lt;Fetch xmlns="http://synce.org/formats/airsync_wm5/airsync"&gt;&lt;unknown&gt;WV:&lt;CollectionId/&gt;PEC01$00001@NOK.S60&lt;/unknown&gt;&lt;/Fetch&gt;&lt;HomeCity&gt;xxxxxx&lt;/HomeCity&gt;&lt;PagerNumber&gt;\x01Q\x80&lt;/PagerNumber&gt;&lt;OtherState&gt;wv:nokia.1789505498&lt;/OtherState&gt;&lt;/Email3Address&gt;&lt;/unknown&gt;&lt;/unknown&gt;&lt;/unknown&gt;&lt;/Delete&gt;'
</code></pre>
It seems like it’s not using the WV CSP 1.1/1.2 dictionary (not surprising since I did not specify it anywhere). Looking at the code, in <code>pywbxml.pyx</code>, I can see:
<pre><code>  params.lang = WBXML_LANG_AIRSYNC
</code></pre>
So, whereas the PHP PECL <code>wbxml</code> extension is exposing all the parameters in <code>libwbxml</code>, it seems like the Python version <code>pywbxml</code> is not, and it’s hard-coding assumptions.

Lesson learned with my day on python, twisted, wbxml, etc.: spending my time fixing the basics, does not allow me to work on the problems I need to solve. Will I fix <code>pywbxml</code>? I don’t know, but most likely not.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2009-01-13 20:15:52</wp:post_date>
		<wp:post_date_gmt>2009-01-13 20:15:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-libwbxml-on-macports</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="imps"><![CDATA[IMPS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[getting-libwxml-on-macports]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415237302;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:129;}i:1;a:1:{s:2:"id";i:313;}i:2;a:1:{s:2:"id";i:116;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>pywbxml revisited</title>
		<link>http://www.olympum.com/imps/pywbxml-revisited/</link>
		<pubDate>Wed, 14 Jan 2009 22:48:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=129</guid>
		<description></description>
		<content:encoded><![CDATA[I know I said I was not likely to fix <code>pywbxml</code>, but the alternative was even less appealing. I <em>know</em> I have to move away from Java:
<ol>
	<li>Continuing to use a mix of Java and PHP to leverage the PHP PECL <code>wbxml</code> extension creates an unnecessary complexity.</li>
	<li>Moving the PHP code doing <code>wbxml2xml</code> and <code>xml2wbxml</code> transformations to Java is possible but I noticed lack of activity on <a href="http://sourceforge.net/projects/kxml/">KML at sourceforge</a> (the project that contains the wbxml library for Java). <a href="http://libwbxml.opensync.org/">libwbxml</a> in contrast is owned and maintained by the opensync folks, and it’s only the python bindings that needed some love.</li>
	<li>The XMPP library I use in Java, <a href="http://www.igniterealtime.org/projects/smack/index.jsp">Smack</a> uses a model of one-thread-per-socket, which for server-side and maintaining hundreds or thousands of users will require me to have much more memory in the box that I would like to. I rather use an event-based / reactor architectural style.</li>
</ol>
So I decided to patch the Python bindings for my needs (rather than fixing it properly by exposing the args through the API). The Python bindings seem to be generated out of SWIG, so editing <code>src/pywbxml.pyx</code> is enough to get the dictionary I wanted for IMPS (<code>WBXML_LANG_WV_CSP12</code>). The change is straight forward, simply:
<pre><code>params.lang = WBXML_LANG_WV_CSP12
</code></pre>
or the unified patch:
<pre><code>--- pywbxml-0.1/src/pywbxml.pyx 2006-07-28 01:51:57.000000000 +0100
+++ pywbxml-0.1-wv/src/pywbxml.pyx  2009-01-14 21:55:40.000000000 +0000
@@ -14,7 +14,7 @@
     object PyString_FromStringAndSize(char *s, int len)
     int PyString_AsStringAndSize(object obj, char **buffer, int *length)

-class WBXMLParseError:
+class WBXMLParseError(Exception):
     def __init__(self, code):
         self.code = code
         self.description = &lt;char *&gt; wbxml_errors_string(code)
@@ -28,7 +28,7 @@
     cdef WBXMLGenXMLParams params

     params.gen_type = WBXML_GEN_XML_CANONICAL
-    params.lang = WBXML_LANG_AIRSYNC
+    params.lang = WBXML_LANG_WV_CSP12
     params.indent = 0
     params.keep_ignorable_ws = 1
</code></pre>
You will notice an additional change in the patch for WBXMLParseError - this comes from the Debian package, and ensures the we are raising a proper exception.

With this applied, compiled, and installed, I ran the same test with an IMPS CSP document, this time successfully:
<pre id="scroll_to_here"><code>$ python
Python 2.5.1 (r251:54863, Apr 15 2008, 22:57:26)
[GCC 4.0.1 (Apple Inc. build 5465)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from pywbxml import xml2wbxml, wbxml2xml
&gt;&gt;&gt; xml = """&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE WV-CSP-Message PUBLIC "-//OMA//DTD WV-CSP 1.2//EN" "http://www.openmobilealliance.org/DTD/WV-CSP.DTD"&gt;&lt;WV-CSP-Message xmlns="http://www.wireless-village.org/CSP1.1"&gt;&lt;Session&gt;&lt;SessionDescriptor&gt;&lt;SessionType&gt;Outband&lt;/SessionType&gt;&lt;/SessionDescriptor&gt;&lt;Transaction&gt;&lt;TransactionDescriptor&gt;&lt;TransactionMode&gt;Request&lt;/TransactionMode&gt;&lt;TransactionID&gt;nok1&lt;/TransactionID&gt;&lt;/TransactionDescriptor&gt;&lt;TransactionContent xmlns="http://www.wireless-village.org/TRC1.1"&gt;&lt;Login-Request&gt;&lt;UserID&gt;hermes.onesoup&lt;/UserID&gt;&lt;ClientID&gt;&lt;URL&gt;WV:IMPEC01$00001@NOK.S60&lt;/URL&gt;&lt;/ClientID&gt;&lt;Password&gt;xxxxxx&lt;/Password&gt;&lt;TimeToLive&gt;86400&lt;/TimeToLive&gt;&lt;SessionCookie&gt;wv:nokia.1789505498&lt;/SessionCookie&gt;&lt;/Login-Request&gt;&lt;/TransactionContent&gt;&lt;/Transaction&gt;&lt;/Session&gt;&lt;/WV-CSP-Message&gt;"""
&gt;&gt;&gt; binary = xml2wbxml(xml)
&gt;&gt;&gt; text = wbxml2xml(binary)
&gt;&gt;&gt; text
'&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE WV-CSP-Message PUBLIC "-//OMA//DTD WV-CSP 1.2//EN" "http://www.openmobilealliance.org/DTD/WV-CSP.DTD"&gt;&lt;WV-CSP-Message&gt;&lt;Session&gt;&lt;SessionDescriptor&gt;&lt;SessionType&gt;Outband&lt;/SessionType&gt;&lt;/SessionDescriptor&gt;&lt;Transaction&gt;&lt;TransactionDescriptor&gt;&lt;TransactionMode&gt;Request&lt;/TransactionMode&gt;&lt;TransactionID&gt;nok1&lt;/TransactionID&gt;&lt;/TransactionDescriptor&gt;&lt;TransactionContent&gt;&lt;Login-Request&gt;&lt;UserID&gt;hermes.onesoup&lt;/UserID&gt;&lt;ClientID&gt;&lt;URL&gt;WV:IMPEC01$00001@NOK.S60&lt;/URL&gt;&lt;/ClientID&gt;&lt;Password&gt;xxxxxx&lt;/Password&gt;&lt;TimeToLive&gt;86400&lt;/TimeToLive&gt;&lt;SessionCookie&gt;wv:nokia.1789505498&lt;/SessionCookie&gt;&lt;/Login-Request&gt;&lt;/TransactionContent&gt;&lt;/Transaction&gt;&lt;/Session&gt;&lt;/WV-CSP-Message&gt;'
</code></pre>
Yes, I am now <em>happier</em>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date>2009-01-14 22:48:44</wp:post_date>
		<wp:post_date_gmt>2009-01-14 22:48:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pywbxml-revisited</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="imps"><![CDATA[IMPS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415291089;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:141;}i:1;a:1:{s:2:"id";i:10;}i:2;a:1:{s:2:"id";i:72;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Snow blocks railway company websites</title>
		<link>http://www.olympum.com/policy/snow-blocks-railway-company-websites/</link>
		<pubDate>Mon, 02 Feb 2009 08:11:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=135</guid>
		<description></description>
		<content:encoded><![CDATA[We knew it was coming. Met Office kept talking about. Heavy snow across the South East of England. Regardless, this morning is a complete mess, as expected, and the country comes to a halt, as usual.

And to a degree, it is normal. It is very difficult to size transport for peak emergencies. Possible, but costly to the tax payers. So, in a way, I understand we are stuck today.

But what I don't understand is how all the web infrastructure associated with network railways is basically down.

Let's start with Southern Railway:

<code>
$ curl -v http://www.southernrailway.com/
* About to connect() to www.southernrailway.com port 80 (#0)
*   Trying 213.86.249.117... connected
* Connected to www.southernrailway.com (213.86.249.117) port 80 (#0)
&gt; GET / HTTP/1.1
&gt; User-Agent: curl/7.16.3 (powerpc-apple-darwin9.0) libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3
&gt; Host: www.southernrailway.com
&gt; Accept: */*
&gt;
&lt; HTTP/1.1 500 Generated error
&lt; Date: Mon, 02 Feb 2009 07:57:42 GMT
&lt; Connection: close
&lt; Content-Type: text/html
&lt;
&lt;html&gt;&lt;body&gt;
&lt;h2&gt;No suitable nodes are available to serve your request.&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;
* Closing connection #0
</code>

Okay, so let's see SouthEastern:

<code>
$ curl -v http://www.southeasternrailway.co.uk/
* About to connect() to www.southeasternrailway.co.uk port 80 (#0)
*   Trying 213.86.249.125... connected
* Connected to www.southeasternrailway.co.uk (213.86.249.125) port 80 (#0)
&gt; GET / HTTP/1.1
&gt; User-Agent: curl/7.16.3 (powerpc-apple-darwin9.0) libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3
&gt; Host: www.southeasternrailway.co.uk
&gt; Accept: */*
&gt;
&lt; HTTP/1.1 500 Generated error
&lt; Date: Mon, 02 Feb 2009 08:04:03 GMT
&lt; Connection: close
&lt; Content-Type: text/html
&lt;
&lt;html&gt;&lt;body&gt;
&lt;h2&gt;No suitable nodes are available to serve your request.&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;
* Closing connection #0
</code>

Not provisioning capacity for an unforeseen event could be excused, but not provisioning capacity for a foreseen event has no excuse, especially for an infrastructure company. This is the core of a public service, and if doing this is not possible, it's time to revisit whether their current hosting arrangements are adequate. Definitely, not impressed, especially when cloud infrastructure is becoming so easily available.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date>2009-02-02 08:11:22</wp:post_date>
		<wp:post_date_gmt>2009-02-02 08:11:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>snow-blocks-railway-company-websites</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="policy"><![CDATA[Policy]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415209127;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:316;}i:1;a:1:{s:2:"id";i:118;}i:2;a:1:{s:2:"id";i:324;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2607</wp:comment_id>
			<wp:comment_author><![CDATA[Tjalle]]></wp:comment_author>
			<wp:comment_author_email>tjallew@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>83.245.227.181</wp:comment_author_IP>
			<wp:comment_date>2009-02-02 09:46:04</wp:comment_date>
			<wp:comment_date_gmt>2009-02-02 09:46:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hah, Move to Finland here we know how to handle the snow and the ice (except the italian pendolinos ;-)).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2608</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.96.9.205</wp:comment_author_IP>
			<wp:comment_date>2009-02-02 22:29:15</wp:comment_date>
			<wp:comment_date_gmt>2009-02-02 22:29:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's obviously too cold for them.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2607</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Painfully HTTP Java</title>
		<link>http://www.olympum.com/java/painfully-http-java/</link>
		<pubDate>Wed, 11 Feb 2009 21:03:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=141</guid>
		<description></description>
		<content:encoded><![CDATA[I have been working on AtomPub and coding a prototype over the past few evenings to get <a href="http://abdera.apache.org/">Apache Abdera</a> talking to <a href="http://couchdb.apache.org/">CouchDB</a>. I know there is an experimental adapter in Abdera for CouchDB, but it does not use CouchDB the way I need to.

I decided to write my own provider, workspace manager, adapter, etc. I have been using <a href="http://code.google.com/p/couchdb4j/">couchdb4j</a>, the Java library binding used to talk to CouchDB, and <a href="http://json-lib.sourceforge.net/">json-lib</a>, a JSON library for Java.

Why, it has been <em>really especially extremely very</em> painful!

HTTP and JSON, REST a bit, and to a lesser degree XML, are supposed to be technologies that make your life easier as a programmer and as a server. But with Java, it's the other way round. What should be easy, becomes complex. I am very disillusioned about the suitability for the Java language in pretty much any domain related to HTTP.

With Java in HTTP, you have to jump API hurdles, pull hundreds of dependencies, and end up with stack traces deep as a black hole. Yeah, it works, mostly because of the amazing development support and tools for Java, such as Maven and Eclipse. But that alone does not make Java a viable technology for programming HTTP.

Java has it uses, and it is a good programming language. I don't think I'd ever code C++ again if I could use Java. But that's more on the number crunching, for the <a href="http://hadoop.apache.org/core/">Hadoop</a> of this world.

I'll stay with my PHP, Ruby and Python while I can. Perhaps it's also time to learn a functional programming language like Erlang.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date>2009-02-11 21:03:47</wp:post_date>
		<wp:post_date_gmt>2009-02-11 21:03:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>painfully-http-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2613</wp:comment_id>
			<wp:comment_author><![CDATA[Subbu Allamaraju]]></wp:comment_author>
			<wp:comment_author_email>subbu@subbu.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.subbu.org</wp:comment_author_url>
			<wp:comment_author_IP>67.161.88.86</wp:comment_author_IP>
			<wp:comment_date>2009-02-14 01:46:12</wp:comment_date>
			<wp:comment_date_gmt>2009-02-14 01:46:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good points. I agree. I would include nio in the same bucket. NIO is great, but needs some higher-level APIs to make it more productive to write code.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2612</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2611</wp:comment_id>
			<wp:comment_author><![CDATA[Subbu Allamaraju]]></wp:comment_author>
			<wp:comment_author_email>subbu@subbu.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.subbu.org</wp:comment_author_url>
			<wp:comment_author_IP>209.131.62.115</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 04:48:20</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 04:48:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What exactly is the problem with Java? Are you referring to some bad library problems?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2612</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.96.9.205</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 09:46:56</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 09:46:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think it's mostly a library issue, due to bad core library design, and partially a language issue itself.

For example, JSON is a first class citizen in the web world. Manipulating JSON in Python, Perl, Ruby and PHP is a pleasure, but not so much in Java.

Likewise for XML manipulation. Having worked on Apache Xalan-J and XSLTC I can tell you that the biggest issue Java has processing XML is a much higher CPU cost due to garbage collection, as the amount of strings that need to be created and released is simply huge.

Likewise for REST support, or simply client/server HTTP libraries. In Java, you need to use Apache Commons libraries to be able to play with verbs, headers, and control exactly the interaction. That's a JDK library issue by itself, that the designers valued more certain APIs than others. It's perhaps anecdotal, but support for HTTP is built-in into the core language libraries in PHP and Python.

Last, but not least, web  programming design patterns are complex in Java and need to be spelled out, where as <a href="http://bitworking.org/projects/oscon2008/The-lack-of-design-patterns-in-Python.pdf" rel="nofollow">in Python design patterns are actually built into the language</a>.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2611</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2660</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Cestari]]></wp:comment_author>
			<wp:comment_author_email>eric@ohmforce.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.cestari.info/</wp:comment_author_url>
			<wp:comment_author_IP>82.238.70.31</wp:comment_author_IP>
			<wp:comment_date>2009-03-02 12:40:58</wp:comment_date>
			<wp:comment_date_gmt>2009-03-02 12:40:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bruno, if you allow me, I think you are ripe for erlang and the OTP design patterns. 

The combination of cheap processes, message passing and pattern matching is wonderful.

What is interesting in this language is that you don't actually need to abstract and do high level architecture and UML and whatnots. 

Want to access an url ? http:request(VERB ...)

Want to do it asynchronously ? pass the {sync, false} parameter to the call. The call will return immediatly and the http process will  the reply message when it's arrived. It's just a matter of pattern matching to handle it.

Process pooling : pg2 module will pool the processes you'll give it, and it's distributed.

I could ramble on. (There are a few things that could be better, but that's not the gist of my comment ;) ). I admit I've never had so much fun before while coding ; erlang is instant gratification.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2663</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.96.9.205</wp:comment_author_IP>
			<wp:comment_date>2009-03-02 21:23:22</wp:comment_date>
			<wp:comment_date_gmt>2009-03-02 21:23:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Eric, lol, most definitely ready. I love learning programming languages, and have started reading the Pragmatic Programmer's Erlang book. I've set Erlang as my "new language to learn" of the year (Scala was my language for 2008). Working with ejabberd and couchdb, that was really the immediate consequence.

I am still unsure at this early stage how far I am comfortable taking the Erlang stack. Mochiweb and Yaws look pretty cool, and I might end up there. Any views on either one?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2660</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2702</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Cestari]]></wp:comment_author>
			<wp:comment_author_email>eric@ohmforce.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.cestari.info/</wp:comment_author_url>
			<wp:comment_author_IP>82.238.70.31</wp:comment_author_IP>
			<wp:comment_date>2009-03-09 07:20:11</wp:comment_date>
			<wp:comment_date_gmt>2009-03-09 07:20:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mochiweb appears to have a good momentum currently. I don't know it very well, though webmachine built upon it seems to be very interesting. http://code.google.com/p/webmachine/

Yaws : I did play with it a little. But I use it more for picking the useful web functions (url_encode etc) which are not part of the standard distributions.

Currently I use and develop for the ejabberd webserver. It's good enough for making REST architectures. (built an atompub server with it).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2663</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3732</wp:comment_id>
			<wp:comment_author><![CDATA[Zalina]]></wp:comment_author>
			<wp:comment_author_email>yosemitensp@earthlink.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406020143</wp:comment_author_url>
			<wp:comment_author_IP>65.167.24.34</wp:comment_author_IP>
			<wp:comment_date>2012-05-24 00:43:13</wp:comment_date>
			<wp:comment_date_gmt>2012-05-24 00:43:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Chad DePue has compared Go to Erlang, and says: “Go pevoidrs a service to the Erlang community in that it validates the fundamentals of the Erlang platform. Goroutines are equivalent to Erlang processes  and Channels to Erlang messages.” He believes the most obvious application for Go is in web infrastructure, which is apt given where it’s coming from.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2612</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337820193.7641";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>A Web Linked by Atoms</title>
		<link>http://www.olympum.com/future/a-web-linked-by-atoms/</link>
		<pubDate>Fri, 27 Mar 2009 13:14:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/a-web-linked-by-atoms/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Looking back at the past 20 years of the history of the internet, one can realize that what we call today the web has changed dramatically, but that one thing is certain: it will continue to evolve. Gone are the days of manually editorialized directories, of static content, of one way conversations. Today we live in a dynamic, social, interactive web. And it&#8217;s a web that is traversing the digital realm and changing how we understand our physical world, breaking communication barriers and making information and knowledge easily accessible.</p>

<p>Yet, although much has changed, the web remains an almost completely deregulated environment, not only on the legal side, but also on the technical side. That&#8217;s one of the web&#8217;s merits, making it easy to publish documents. Those documents are part of a forest, many sit in isolation, and only a small number of links are connecting those documents. The hyperlink is the web&#8217;s way of connecting documents, yet, because the web is a flexible environment, there are no requirements on developers as of how they structure their documents, nor as what link schemes they use.</p>

<p>But what is an advantage on one end, reducing the barriers of entry to publishers and developers, is also a disadvantage on the other end. We end up with billions of documents that are difficult to navigate, and the information, although there, is difficult to find and access.</p>

<p>Organizing the web has been a growing pain since the early days. As the web evolved, so did the technologies used to organize it. In the beginning, only a few universities and government agencies had documents, and it was feasible to maintain a directory. Later on, commercial entities entered the web at exponential rate, and business were created just to solve exactly this problem: organize the web.</p>

<p>The web is growing so fast, that we are not able to reasonably scale the production and maintenance of web directories. And there came web search engines, based on the information retrieval research of the late 80s and early 90s, to solve this very problem. But search engines are  starting to show their age:</p>

<ul>
<li>We are accustomed to a web that is almost infinite, so deep and wide that we know that not even search engines can reach the very end-leafs of it. We know that the long tail is getting longer, and that the amount of disconnected content is just growing every day.</li>
<li>Traditional media is struggling to find its place in the web social ecosystem. &#8220;Head&#8221; content is expensive to produce, and is becoming less and less profitable to operate. The audience is moving to tail and (social) user generated content, where it spends hours. Media businesses, as we know it, are dying slowly. Content is no longer king, and guess what, search can&#8217;t find the new king.</li>
</ul>

<p>Today&#8217;s problem is also today&#8217;s opportunity. Interestingly, the tools necessary to fix this are <em>almost</em> in place. This the &#8220;Atom Web&#8221;, or a web linked by Atoms, which some would perhaps deem as a bastard child of <a href="http://www.w3.org/DesignIssues/Semantic.html">the semantic web</a>. The Atom Web is a web where the hyperlink is really empowered as the new king, and takes the crown away from content. It&#8217;s a web where document and link meta-data is more important than data, just like the <a href="http://ilpubs.stanford.edu:8090/422/">PageRank algorithm</a> changed search by using link (citation) flows as a measure of relevance.</p>

<p>The <a href="http://www.ietf.org/rfc/rfc4287.txt">Atom Syndication Format</a> and the <a href="http://www.ietf.org/rfc/rfc5023.txt">Atom Publishing Protocol</a> have the capabilities to change the web as we know it, well beyond the initial purpose to serve as a content syndication mechanism. Atom contains almost all the necessary meta-data missing in a HTML document, plus it provides a neat way to link content. But to achieve this, we need to empower Atom by introducing three new principles:</p>

<ul>
<li><em>Content is opaque</em>. We shouldn&#8217;t accept (almost) any extensions to Atom. Atom should be reserved as an envelope containing only meta-data, with the source element containing all the content or a reference to the content resource. Perhaps in a few cases we might need extensions, like search, paging, presence and location. But rather, I see the very large majority of extensions as content.</li>
<li><em>Post Atoms, Get Feeds</em>. Atom entries have little meaning by themselves. Instead, they live in collections through feeds. An entry may belong to many collections. Collections are views, representations, of the underlying documents, grouped in a wide array of combinations. Feeds can represent pretty much anything: the revision history of an entry, all known content about an entity, a blend of categories and topics, related content, etc. Congruent collections are much easier for a UI consumer, as a simple request returns everything necessary to render a widget, a module, or a complete page, perhaps even as JSON directly from the browser. Notice that I am not assigning any semantics to the feed, that&#8217;s up to the implementation, but specifying that a feed is <em>the</em> first class citizen, followed by the entry.</li>
<li><em>Links are type-aware</em>. Links are the most important part of Atom, and content-types are the tools of choice to help bring semantic value to the relations (rather than custom schemas extending Atom). In a way, the Atom Web is a reduced subset, a predecessor, of the Semantic Web, since we don&#8217;t necessarily know the subject-predicate relationship for all structured data (yet). I rather think of something along the lines of <code>&lt;link type="application/atom+xml;content=application/foo+xml"&gt;</code>, which would be describing the content-type inside the referred Atom document. Obviously, you may still point directly to the underlying resource, because you can, and because that&#8217;s how the web works today.</li>
</ul>

<p>Certainly, there is a bit of web infrastructure required to make this true. The same way we have the web server for the sometimes-linked web, we need the atom server for the always-linked web. But an atom server is not just a web server adhering to the the AtomPub protocol. Atom server implementations can provide whichever machinery they want as long as the adhere to the three principles above. An atom server needs to have the ability for publishers to define collections, or more precisely, the matching rules that will define views, and which will be exposed as collections, through feed resources. Such view generation will be offloaded partially to batch computing, perhaps on the form of map/reduce jobs. Some implementations may for example decide to use schema-less document stores in order to generate those views.</p>

<p>One could get started today with this and build a gigantic store replicating copies of the content hosted elsewhere on the web. The store could be populated either by crawling or by allowing developers to publish into it. But eventually, this store would have problems finding all the deep end-leaf documents.</p>

<p>A few big players adopting Atom to expose their data, for example making the webmap available through Atom and opening the API for publishers to post onto the store, could dramatically change this game. There would still be plenty of problems to solve, ranging from the now even more important link-spam detection and moderation, to the not so obvious scaling problems, but at least we would be one step closer to organizing the web.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2009-03-27 13:14:57</wp:post_date>
		<wp:post_date_gmt>2009-03-27 13:14:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-web-linked-by-atoms</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409176887439360]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2742</wp:comment_id>
			<wp:comment_author><![CDATA[The Linked-Atom Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/internet/the-linked-atom-web/</wp:comment_author_url>
			<wp:comment_author_IP>82.113.146.252</wp:comment_author_IP>
			<wp:comment_date>2010-05-14 05:03:02</wp:comment_date>
			<wp:comment_date_gmt>2010-05-14 05:03:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] within the context of semantic annotations, Atom has its shortcomings. Rather than abusing Atom, perhaps we need to create a separate, specialized out-of-line resource [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Heads or Tails</title>
		<link>http://www.olympum.com/future/heads-or-tails/</link>
		<pubDate>Tue, 07 Apr 2009 11:43:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[If you have been following the media industry over the last years, you'll have surely realized that traditional media is struggling. Even before the crisis, advertisers have started switching from offline to online, and now with the crisis we see a consolidation in a few ad agencies and a few brokers.

Many magazines and newspapers are in such position that if their debt does not get re-financed they will have to file for bankruptcy. Many music labels find themselves in a very similar position, or have already gone belly up. Video houses are struggling with costs. It's not possible to compete with pirated content. TV channels are going bust.

But there is also a lot of smoke-n-mirrors going on.

I hear claims. Some argue that traditional media is dying. Some advocate social media has taken over. Some forget the economics of running a media business. That the article is dying. That head content is now irrelevant. That the democratization of content production will increase quality. That user-generated content is the future.

Others blame ISPs and the likes of Yahoo, Google, AOL for this. They talk about stealing content and taking away the advertiser money flows the so badly need right now to survive. Some go preaching about how policing the unregulated wild wild web with Digital Rights Management is the only way for them to remain profitable.

What is for sure is that the media industry is suffering. What is also certain is that consumers are generally rational, and make purchasing decisions based on utility. Many consumers are today rather pissed off with the traditional media. And I believe what we are seeing it's just a consequence of the media business own behavior, being extremely zealous to protect their content rights with solutions that make the consumer experience worse, rather than better.

Is it not annoying that you can't, legally, make a copy of a DVD for backup purposes? Is it not annoying that you can't buy DVDs while you travel to other continents? Is it not annoying that your DRM tracks only play with proprietary technology? Is is not insane that games are region locked?

Like Lola would say, I surely think it's extremely highly very annoying.

Long, long time ago, information traveled slowly, snail pace actually. Controlling where a film was being shown, or who had the tapes, or who was selling the newspapers was a relatively easy thing to do. Yet, already then, there was sharing. You'd share a magazine at the hairdresser's. You'd share a VHS tape. But, for most, things were controllable since the medium was perishable, and things were not flowing the pipes, yet.

The Internet has changed it. Information is available at speed of light, at whatever bandwidth you have contracted. Sharing is easy now. And because they can, and because that's how humans are, consumers want to share what they own. The same way they can share a book, or photos, or toys, ...

Revenue starts to go down on the rich media side of the business due to pirated copies flowing on the net. So DRM moves in. Badly in. Actually completely gone wrong. It alienates consumers. Napster, eMule, Kazaa, ... all appear because consumers want it. But truth is that DRM is protecting some of the revenue, and that's why content right owners keep lobbying for it. But it's still going down the hill. High-Definition media appears and somehow fixes partially the problem. But it won't last long. It's only working because of constraints in bandwidth.

Paper media businesses have trouble getting audience. You'll find many reasons for it, but the key underlying factor is that they've ignored speed of light. Information can flow immediately. And if it can, it will. Those media businesses that understood and embraced this, new incumbents mostly, but also some old faces, have been doing better. But they have made the industry more competitive as a consequence,aAnd those that did not understand it, find themselves struggling.

So what do you when you are losing? For starters, you find a scapegoat. Done that. Ironically, deep inside, you realize your business model is gone and you are just trying to hang onto it for as long as possible. In reality, you are just buying time. Precious time you don't have, to figure out the next business model.

Yet, one has to ask where did it all go wrong? Audiences are actually not spending that much time on tail content. High quality production "head" content is still where online minutes are spent. Although I put some value to UGC, I still believe good productions require good funding. Good talent needs to be compensated. Be it via ads, via subscriptions, via concerts, ...

To me the issue that traditional media needs to address is how to operate their businesses at a whole new level of revenue and cost. Since revenue levels per production unit are down by one order of magnitude, one must produce significantly more, and do it a much lower cost basis. I can think of three things the media industry can do to achieve this:

<ul>
        <li>The tail, by definition, is long. Sorting out the tail is a mess. To start with, go manual, and use your editors to find the gems in the tail. Cream it out. Find the new head, at no production cost. But don't stop there.</li>
        <li>In parallel, invest in algorithmic matching. Eventually you want to surface all the metadata in media to replace the editor. We can't today. But it should the goal.</li>
        <li>Production costs are high and need to be shared among all players. By sharing production costs with your competitors (you hear me well) you are actually removing those cost components that should be commodities, so that you can move up the stack to solve the creative problem better. Likewise, if you can share the production costs with the long-tail of user-generated productions, all the better. You are basically getting that subsidy you need at production time. Since you have addressed costs, you can now play with content pricing. You can charge, or you can go free. You have gained that freedom back. You can design new business models. Consumers benefit. Producers benefit.</li>
</ul>

The first item is really a way to get going. The latter two are truly strategic, and are what I call the "open media infrastructure services". Think of it like the Amazon services for media production and distribution.

Much of that infrastructure already exists for distribution, as the channels of pirated content, and they are actually almost free. Production is not there yet, and will require investment. But without taking these steps, I am doubtful head content production will last. Or if it does, it will do only out of government subsidies, using taxpayers money. And that, really, would be a pity.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2009-04-07 11:43:40</wp:post_date>
		<wp:post_date_gmt>2009-04-07 11:43:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>heads-or-tails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415574942;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:217;}i:1;a:1:{s:2:"id";i:347;}i:2;a:1:{s:2:"id";i:12;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>On Language Polyglotism</title>
		<link>http://www.olympum.com/future/on-language-polyglotism/</link>
		<pubDate>Wed, 22 Apr 2009 22:54:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/on-language-polyglotism/</guid>
		<description></description>
		<content:encoded><![CDATA[I believe being a polyglot is nothing but an advantage, and that polyglots are normally the best programmers. As a matter of fact, I challenge myself to learn a new programming language every year. Last year it was Scala, this year I've started learning and writing some Erlang (and yes, there is a pattern here for functional programming languages).

One of the reasons I like learning programming languages is a drive to reach the Holly Programming Grail: I find most fascinating discovering which language is better suited for which task. In other words, some languages excel at tasks where other languages fail. An organization could decide to allow all those languages to exist, and if we were doing best-of-breed in every problem domain, we would end up with a language soup. So the question then is, is such soup good or bad? In other words, when we think about developing Internet applications: which and how many languages should an organization use?

There are two factors to consider in choice of language choices (assuming the language choice is functionally the best choice for solving the problem at hand): talent and operations.

Talent is truly an interesting one. Whereas a startup can possibly afford to pick more exotic languages based on their goodness, large organizations can do less so because of talent. This is because A-class developers will excel in any language, and usually A-class developers are polyglots. But one can only hire so many A-class developers, and eventually you end up growing into B- and C-class developers. Your ability to maintain software at that point really depends on your C-class hiring pipe. Pick a rare language choice, and you are calling for trouble.

Operations is very different from talent. Here the size of the company also matters. Developer cost will be the starting cost, but as the business becomes successful operational cost becomes the key driver (specially in consumer Internet applications). In a way, you want to pick the language choices that drive your productivity higher, and later slowly move into reducing your operational cost.

If you follow me, you'll notice talent and operations are conflicting today. Java is the mainstream programming language worldwide, i.e. A-, B- and C-class talent is widely available, yet scaling Java horizontally at linear cost is difficult. On the opposite end, Erlang is a good choice for distributed concurrency and scaling linearly, yet B- and C-class talent is difficult to find.

I used to advocate the JVM as the minimum host environment, yet allowing language choice across the stack. As long as it could run on the JVM and I could manage it, any language was fine. One could run the complete stack on a JVM. The presentation tier in JRuby, Jython, P8 or Caucho's PHP implementation. The application logic and persistence in Java or Scala. The batch computing in Scala. But it just does not work that well. Even though Scala has the artifacts to work, the JVM and the runtime libraries don't. Shared memory, native threads and locks means the JVM will be more expensive to scale and operate on the long run. The JVM is a feasible, stable and proven alternative, yet it is an expensive choice (in operational cost and probably lost opportunity because of slower agility).

Given this context, my language choices would be:

<ul>
<li><em>Conservative</em> stack, which gets the job done well enough, can be operated, and you can get accessible talent.
    <ul>
        <li>Frontend: PHP</li>
        <li>Application Logic: Java</li>
        <li>Persistence: Java and C/C++</li>
        <li>Batch: Java</li>
    </ul>
</li>
<li><em>Medium Risk</em> stack, that addresses some of today's shortcomings, but reduces the talent pool:
    <ul>
        <li>Frontend: JRuby on a JVM, with Merb</li>
        <li>Application Logic: Scala on a JVM, with Jersey</li>
        <li>Persistence (non-relational): Scala on a JVM</li>
        <li>Batch: Scala, with Hadoop</li>
    </ul>
</li>
<li><em>High Risk</em> stack, forward looking to the highly multi-core CPU roadmaps announced by Intel and AMD, that reduces even further the talent-pool:
    <ul>
        <li>Frontend: JRuby on a JVM, with Merb</li>
        <li>Application Logic: Erlang. Actually, I'd love to see a Scala-like language targeted to the Erlang VM to make it more palatable. But for now, I'd settle on Erlang.</li>
        <li>Persistence (non-relational): Erlang</li>
        <li>Batch: Erlang </li>
    </ul>
</li>
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date>2009-04-22 22:54:19</wp:post_date>
		<wp:post_date_gmt>2009-04-22 22:54:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-language-polyglotism</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409168054231041]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>8621</wp:comment_id>
			<wp:comment_author><![CDATA[@DesignedByBlind]]></wp:comment_author>
			<wp:comment_author_email>DesignedByBlind@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/DesignedByBlind/status/265603775396446208/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-11-05 23:57:29</wp:comment_date>
			<wp:comment_date_gmt>2012-11-05 23:57:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>@JamieKnight I'd call the generalists in this case Language Polyglotic developers: http://t.co/JWrtz6Le</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1352162226.2499";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8622</wp:comment_id>
			<wp:comment_author><![CDATA[@spacefeline]]></wp:comment_author>
			<wp:comment_author_email>spacefeline@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/spacefeline/status/265658350564417538/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-11-06 03:34:21</wp:comment_date>
			<wp:comment_date_gmt>2012-11-06 03:34:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>please read this http://t.co/ydTqRbfV i get distracted with my adhd : )</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1352172888.9799";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Composable and Concurrent</title>
		<link>http://www.olympum.com/future/composable-and-concurrent/</link>
		<pubDate>Thu, 23 Apr 2009 15:00:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/composable-and-concurrent/</guid>
		<description></description>
		<content:encoded><![CDATA[On my previous entry <a href="/future/on-language-polyglotism/">on the present and future of programming languages</a>, I briefly covered on the reasons I think it is important to be looking at this problem now. I though I would expand the discussion.

The laws of physics that we know have stopped our ability to make chips significantly faster today, and rather hardware manufacturers now need to place more and more cores in one die. The result as software developers is that we are now faced with computers with multiple cores and multiple CPUs. It is now the norm to find computers with 2 cores, and most servers are now 4 or 8 core machines.

Historically, <a href="http://www.gotw.ca/publications/concurrency-ddj.htm">developers lived on the free lunch</a>, and with time they knew code would run faster, since clock speeds would get faster. Chips will still continue to get faster in the future, but marginally what we've seen over the last 18 years. Today, it's not about running faster, but having more transistors. And what once was a good programming paradigm for the single core, it's not valid any longer for the multi-core situtation.

Here is where concurrent programming is born. Writing software that scales to multiple cores with the current programming paradigms is hard. The main mechanism we know is the usage of threads, and locks to protect shared estate between threads. It is a model somewhat understand by developers, but that it is however extremely hard to get right.

On the server-side, programming languages that can only leverage one core are going to have a really hard time to compete in the future. Programming languages that have adopted the thread-per-request model are better placed, but will nevertheless face a wall at some point because they rely on locks to operate to protect the transactionality of shared state. Multi-threaded programming and locks are not scalable, mainly because they are not <em>composable</em>.

Building composable software really requires us to move away from sharing state. Working with immutable data structures, and immutable containers, allows us to avoid state, hence allowing modularity and composability (the core principle of software development for the last 35 years, and the philosophy of UNIX tools). But working with immutable data goes against extensibility principles in object oriented programming.

There are a few paradigms that have been in the research arena for the last 10 years and are now finally being adopted. These paradigms take the shape of message passing, parallel programming and functional programming. Functional programming languages are naturally parallel and use immutable data. Unfortunately functional programming languages are not mainstream, and most functional languages that have been successful (Haskell and Lisp) actually allow mutable structures. Erlang however is an exception. Erlang is naturally parallel, uses only immutable data, and is based on message passing. Erlang is a good language to solve the concurrency programming paradigm.

The question though is whether adopting a language like Erlang would make sense for most organizations. Rather, some may argue that evolving the abstraction of concurrency into the current leading programming languages is the way forward. I'd disagree since this is somehow what Scala does, but given that it lives in a JVM, with threads and locks, and using libraries that use threads and locks, it's unlikely new language constructs will allow existing code bases to be fixed. To me, Erlang looks like a much better choice. It's a proven choice and with many years of history.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2009-04-23 15:00:31</wp:post_date>
		<wp:post_date_gmt>2009-04-23 15:00:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>composable-and-concurrent</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409167895232514]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1414945836;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:315;}i:1;a:1:{s:2:"id";i:245;}i:2;a:1:{s:2:"id";i:313;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2757</wp:comment_id>
			<wp:comment_author><![CDATA[Why node.js Matters]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/internet/why-node-js-matters/</wp:comment_author_url>
			<wp:comment_author_IP>82.113.146.252</wp:comment_author_IP>
			<wp:comment_date>2010-06-13 15:36:33</wp:comment_date>
			<wp:comment_date_gmt>2010-06-13 15:36:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] I believe we are finally at a turning point. Multi-core architectures imply the end of the free lunch. It is happening. Writing highly concurrent server-side applications that are able to scale [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Making XMPP Work for the Mobile Environment</title>
		<link>http://www.olympum.com/imps/making-xmpp-work-for-the-mobile-environment/</link>
		<pubDate>Sun, 09 Aug 2009 09:06:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/imps/making-xmpp-work-for-the-mobile-environment/</guid>
		<description></description>
		<content:encoded><![CDATA[I've been thinking about a standards-based client for a mobile environment. XMPP has quite a few strong merits, against it's competitors such as OMA IMPS and SIP Messaging. For one, it's a community standard, and it's actually possible to submit new specs if so required. Secondly, it's becoming the standard protocol for IM, and it's emergent in the open Pub/Sub infrastructure, i.e. why-polling-is-bad.

Unfortunately, there are still a couple of key problems with XMPP in a mobile environment - none of them can be solved in a standard way. I wonder if we could harvest a couple of good ideas from OMA IMPS and spec them under XMPP.

<h3>Bandwidth</h3>

The XMPP stream is verbose, which is not a bad thing by itself, except when you live in a mobile environment. Compression, either at the application (gzip) or the payload level (XEP-138), shifts the problem onto CPU cycles: you still need to decompress first, then decode, which increase latency and shortens battery life. Ideally, you would like to compress the payload onto something that can be decoded and parsed at once without requiring decompression, i.e. WBXML.

Unfortunately it seems like the community has previously slashed against these changes. When Google shifted from XMPP to its custom binary XML protocol for GTalk API, there was a heated discussion about its suitability. But what are folks suggesting that works for the mobile environment, and not just smartphones? I have not seen anything that would work in all phones, hence why WBXML. Please prove me wrong.

<h3>Real-time Notifications</h3>

The default XMPP stream uses bi-directional TCP/IP connections to allow real-time notifications (messaging, presence, etc.). Open sockets in a mobile environment are a bad idea for quite a few reasons, and although BOSH/HTTP-binding for XMPP solves the TCP/IP persistent connection problem, it is still expensive from a device perspective, as there is always a hanging HTTP request. As far as I can tell, there is currently no XMPP solution to this, and I can see how a extension to XMPP adding WAP-PUSH, WAP-UDP, and perhaps standalone UPD, would make sense.

Again, I'd like to think there is a standard solution for this. And no, iPhone Push notification does not really count.

<h3>The Standard Way</h3>

We can let folks come up with their own implementations, and then try to refit a spec for the sake of interoperability. But we know how difficult this becomes in other processes like Oasis, JCP, etc. I wonder then, if it is time now to spec this out, (and no, <a href="http://xmpp.org/extensions/xep-0239.html">spec jokes</a>, don't count):

<ul>
  <li>Binary XMPP</li>
  <li>Push Notifications</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date>2009-08-09 09:06:29</wp:post_date>
		<wp:post_date_gmt>2009-08-09 09:06:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>making-xmpp-work-for-the-mobile-environment</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="imps"><![CDATA[IMPS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409166876033024]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415350646;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:97;}i:1;a:1:{s:2:"id";i:116;}i:2;a:1:{s:2:"id";i:79;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Out of the Eclipse to Netbeans</title>
		<link>http://www.olympum.com/java/out-of-the-eclipse-to-netbeans/</link>
		<pubDate>Thu, 20 Aug 2009 15:51:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/java/out-of-the-eclipse-to-netbeans/</guid>
		<description></description>
		<content:encoded><![CDATA[I have been using emacs and the command line for now almost 20 years. Once in a while, I dip into IDEs, but always go back to the command line. My biggest gripe with IDEs is that it keeps me away from the actual build, and that I normally have to spend time duplicating building configuration in the IDE. The canonical source for build configuration should be the build system (Make, ant, maven, etc.). With an IDE one would have to always be things in sync, leading to errors and all sort of weird stuff.

But I keep trying looking for the holy grail. In the past, I've been relatively happy with Eclipse for the odd refactoring job. I would fire it up, fix, and close it, back again to the command line.

This time around, I wanted to see if an IDE would make me stop using emacs. I set myself a few requirements:

<ul>
    <li>Auto-complete. Not intellisense crap. Basic emacs completion is enough.</li>
    <li>Maven is the source. I don't want to keep a parallel reality when maven poms have all the information already on it.</li>    
    <li>Unit testing. I want to run and debug my unit tests from the IDE.</li>
    <li>Basic re-factoring, especially code usage reports.</li>
    <li>Light on resource usage.</li>
</ul>

I looked into IntelliJ IDEA 8.1, Netbeans 6.7 and Eclipse 3.5. Here are my findings.

<h3>IDEA</h3>

I got an evaluation license and only used it a few days. IDEA is a fantastic IDE, and despite high memory consumption, it felt light-weight and kept the system very responsive. In principle, it met all the requirements, and the refactoring support was simply the best out of the lot. However, at some point things started to go wrong:

<ul>
    <li>Compilation errors. Cannot find symbol, although running maven from the command line would not throw any errors. I did not want to spend figuring out what was wrong here. I am sure some IDEA expert would have told me I was doing something wrong, or that some configuration had to be changed. But IDEA was already failing the requirement: maven is the source. I don't want to fiddle around with the IDE settings.</li>
    <li>Mercurial integration problems. The plugin kept on throwing up and breaking the environment. I had to uninstall it, but that's really a minor point.</li>
</ul>

<h3>Eclipse</h3>

Then came Eclipse. Overall it looked good, but there was no Maven support out of the box. I tried installing Q4e, but getting JUnit support in debug mode was just too painful. m2eclipse worked fine, and Eclipse met all requirements with it.

<h3>Netbeans</h3>

Netbeans was last. I've never liked Netbeans. But I did now. A lot.

It looked good. It mapped nicely into OS X, which the others did not, in terms of user input and display. It supported Maven out of the box as a source of truth for build configuration. It offered substantial more refactoring features than Eclipse, but less than IDEA. Mercurial integration was spot on. And I could run my unit tests in debug mode.

But most importantly, Netbeans did not get on my way. I did not have to configure anything to get going. It was like using emacs, but with all the goodies.

<h3>The winner</h3>

I am going for Netbeans. IDEA looks good, but I am not sure I would pay out the license fee for the powerful refactoring features. Others might, but I probably won't. Eclipse was also improved, but having to fiddle with plugins to get Maven support was really sub-standard.

So, it is Netbeans.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date>2009-08-20 15:51:36</wp:post_date>
		<wp:post_date_gmt>2009-08-20 15:51:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>out-of-the-eclipse-to-netbeans</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409167438065665]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415330843;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:354;}i:1;a:1:{s:2:"id";i:355;}i:2;a:1:{s:2:"id";i:10;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Relocating to the US</title>
		<link>http://www.olympum.com/future/relocating-to-the-us/</link>
		<pubDate>Sat, 26 Sep 2009 07:11:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/relocating-to-the-us/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
Tomorrow, I'll be flying to the US and leaving the UK. But this time, it's different. Now, it's a one way flight. But that flight is the end of a journey that started four months. A difficult journey full of live experiences.
</p>
<p>
Back in April, Yahoo made me an offer to move to California, with my family, to take on a new role. Since then, we've had twins, boy and girl, moved house once, finished our ever-lasting DIY project, a little summer bungalow in the middle of Kent, only this time using contractors, sold our cars, packed everything, cancelled the school, the utilities, the direct debits, the payments, changed addresses, changed insurance policies, and finally put our lives on a plane.
</p>
<p>
And it is surprising how many things are broken, that you only realize when you get out of the usual cycle. Returns for faulty products that take weeks, P&amp;C carriers that don't want to take your money. Or the complexity of servicing or selling your car when you only have one car. The utter absurdity of BT, making as pay 9 months of non-fulfilled line and broadband contract. A TV license officer poking around thinking that everybody in the UK must watch TV, actually the BBC, arguing that otherwise they are weirdos. A council planning officer arguing that our carport is closer to the highway than the main elevation of the house and asking us to pay for planning permission, even though every single aerial photograph shows they are incorrect. A school asking us to pay a full term of tuition, and then denying our daughter from attending. Or well, the length of processing the legal paperwork to work in the US with a Finnish-Spanish family.
</p>
<p>
It is also saddening, because of many things aren't broken and we have to leave a little behind. Like the goodbye photo-book our eldest got yesterday from her classmates. Or our beloved Greek-German friends that we'll miss so much. Or my mahogany Bechstein 1980 model M. Or my new Startrek home office. Or the beautiful views at dawn over the grazing land from our conservatory.
</p>
<p>
Tomorrow, a new exciting period in our lives starts. As much as I am sad about leaving, I am also thrilled about the opportunity to work for Yahoo! Inc in its Sunnyvale headquarters doing one of what I think is one of the most exciting jobs available in Yahoo! and in the industry. And it's not just me me. We all are excited. The wife is clearly hoping for more days of sunshine, which should not be difficult to meet, easier life with children, and most definitely, not DIY in years to come.
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>273</wp:post_id>
		<wp:post_date>2009-09-26 07:11:40</wp:post_date>
		<wp:post_date_gmt>2009-09-26 07:11:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>relocating-to-the-us</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409162240921601]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>On Apple, Flash and Java</title>
		<link>http://www.olympum.com/mobile/on-apple-flash-and-java/</link>
		<pubDate>Wed, 17 Feb 2010 23:25:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/mobile/on-apple-flash-and-java/</guid>
		<description></description>
		<content:encoded><![CDATA[Steve Jobs said reportedly that Flash is buggy and that it won't make it to the iPad and iPhone. The same story was used for Java, a technology that Steve Jobs described as not worth going onto the phone. However, I call B.S. on Apple's arguments. Apple has decided not to ship Flash and Java not because of the lack of intrinsic value and quality, but because if allowed these technologies would result in the vertical disintegration of the Apple platform.

Microsoft saw the same threat with Netscape and Java more than 15 years ago. When the application developers were developing for Windows, Microsoft was controlling the ecosystem, but most importantly, reaping the rewards of the complementary value generated the applications created by those developers. The more applications that were out there, the more users wanted to use Microsoft Windows.

But Netspace and Java were promoting a cross-platform environment with the famous write once, run anywhere. In the Internet, data formats and viewers are open, and any developer can create new applications. Being able to run those applications on multiple platforms is a significant advantage, especially in the context of the Internet. Microsoft reacted by exposing the Windows API, what developers were familiar with, through ActiveX and Internet Explorer. Developers could reuse their tools and code and use these to create great applications that would only run on Internet Explorer and Windows. Great apps attracted users, and more users attracted more developers. This is how Microsoft attacked the jugular of Netscape and Sun. Netscape eventually went bankrupt, but that's probably partially because of its own doing.

To Apple, Flash and Java technologies pose the same cross-platform threat that Netscape and Java were to Microsoft. Apple wants to control the hardware, the operating system, and the content that goes onto the devices through iTunes. Apple is locking developers onto its own APIs and its own distribution system, controlling all the feedback loops that the Apple ecosystem has.

Steve Jobs clearly learned the lessons well from Bill Gates. By allowing the Flash and Java runtimes, Apple would be opening the door to competitor products and applications running on multiple platforms, which could result in users switching platform if a competitor platform would for example lower costs or subsidize users or developers. Today, developers, and users, are locked in to the Apple platform.

In a market where the economics of developing applications for the iPhone are not that attractive, allowing cross platform would result in killing the value of developing for that platform. Most developers cannot afford to write code in parallel for Symbian, Android and iPhone, as the cost of doing so would eat up whatever small margins they are now getting. But because the alternative platforms to the iPhone have even smaller margins, developers are "happy" to be locked into Apple.

However, such lock-in is dangerous as it is a vector of Apple becoming a monopoly in the portable computing device market. Apple might argue about how ensuring a perfect user experience is the main reason why they control the whole ecosystem. However, Apple not only controls the user experience, but the runtimes. Apple could allow Flash and Java runtimes, and only approve those applications complying with the user experience guidelines. However, it is not likely to do so, because it would be opening the door to make a competitor platform, namely Android, stronger.

This situation makes me highly upset. I still believe that the iPhone SDK is one order of magnitude better than what you get with Symbian, and still a few knots better than what Android has to offer. Symbian and Android suffer, although not on equal degrees, of the multiple identity problem. There is no one Symbian, there are many Symbians. There is no one Andriod, there are many Androids. This atomization of the device and the user experience makes the developer's jobs significantly more complex than it ought to be.

Flash and Java have some of the same problems as Symbian or Android. Since the target platform is unknown, the developer has to work much harder to provide a user experience that works in all environments. It's a trade off the developer opts in to. As a developer, I want to have the freedom to opt into a harder development environment, if that means getting cross-platform support because my business model so it requires. And until Apple gives me that, I won't get anywhere close to the iPhone.

Apple needs a strong competitor, and the only one that is positioned to potentially become one is Nokia. Nokia unfortunately has been playing the disintegration harakiri game really well, and completely opened itself for a competitive attack. As a developer, I don't care whatsoever what their internal device platform strategy, but externally, as a developer, and consequently as a user, I care about consistency of APIs, distribution channels, tools, etc. Now that Android Linux is becoming the standard for Java on the mobile phone, I wonder if all is left for Nokia is to become the standard for Flash and AIR on the mobile. Except, of course, if they really believe that they can compete with their own Linux distribution.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date>2010-02-17 23:25:43</wp:post_date>
		<wp:post_date_gmt>2010-02-17 23:25:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-apple-flash-and-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409162924613632]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Brilliant Tech Video Ad</title>
		<link>http://www.olympum.com/internet/brilliant-tech-video-ad/</link>
		<pubDate>Tue, 04 May 2010 21:04:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=284</guid>
		<description></description>
		<content:encoded><![CDATA[<object width="480" height="385"><param name="movie" value="http://www.youtube.com/v/LNE0R3rEe5Q&hl=en_US&fs=1&"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/LNE0R3rEe5Q&hl=en_US&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="480" height="385"></embed></object>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date>2010-05-04 21:04:08</wp:post_date>
		<wp:post_date_gmt>2010-05-04 21:04:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>brilliant-tech-video-ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet"><![CDATA[Internet]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[exemplary-video-ad]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409141592772608]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>The Linked-Atom Web</title>
		<link>http://www.olympum.com/internet/the-linked-atom-web/</link>
		<pubDate>Fri, 14 May 2010 05:02:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=288</guid>
		<description></description>
		<content:encoded><![CDATA[The release of Facebook's Open Graph Protocol has spurred renewed interest
in the semantic web. I give credit to Facebook for pushing forward an RDFa
derived format onto the world wide web. In fact, RDFa is the least
interesting part. Producing semantic data has been around for a long time.
Most importantly, I give Facebook credit for focusing on the interesting
part of the problem: consumption of semantic data.

And although it's a great achievement, I regret the locked-in and
centralized nature of Facebook's Open Graph Protocol. The web is an open
environment, where open wins at the end.

<h2>Entity Identifiers</h2>

Facebook assigns and owns internal identifiers to entities. These
identifiers do not look unique, nor something that external parties,
disconnected from Facebook could assign, inspect or do anything useful with.
By owning the identifiers, Facebook is owning the entity graph.

The assumption of a single party owning the identifiers for entities is
fundamentally flawed. Entities appear, disappear, merge and fork. Known
entities change constantly, and most importantly what you and I, or anybody
else understands and knows as an entity is different. IMDB and Netflix will
both describe the movie "The Book of Eli", however each use different
identifiers. To assume that one unique identifier can be used consistently
and universally across the web leads to information lock-in.

Luckily, the web is an open environment. And, at the end, open wins on the
web (prove by induction to the avid reader).

Identity on the open web is federated, starting at the top-level domain
identifiers, and all the web to a fully qualified Universal Resource
Identifiers (URIs). In reality, there are many sources of truth. Some of
those are canonical, or trusted, yet many other sources exist. Movies data
from IMDB or Netflix will usually be considered canonical. Yet that does not
stop Wikipedia, or any web publisher, from creating its own entities. All it
takes is a URI.

Anybody on the web, be it Facebook or Freebase, can make statements such as:
this URI on Netflix is about the same movie as this other URI on IMDB. All
it takes is a web page with a couple of links. The difference between
Facebook and the "web" way, is that a web page is identified by a URI, and
anybody can create one in a federated way. Not just Facebook.

<h2>Semantic Web Annotation Techniques</h2>

The most interesting value of the web is not about describing resources, or
the roles of the relationships between resources, but the relationships
themselves. The statement "Madonna is related to Guy Ritchie" is, in
relative terms, more important than the more fact-complete "Madonna is Guy
Ritchie's ex-wife". Although the fact "ex-wife" increases knowledge, it has
only value once we asserted that the relationship exists. Establishing
relationships can be achieved through links and URIs. That's what the web is
about. Pages and links to other pages.

The problem however with the current web of pages and links is that all URIs
are anonymous. Ideally, I would like to bring some structure to those
relationships so that I can codify exactly what "ex-wife" means. That's what
semantic annotations address: naming the role in the relationship between
resources in a structured format.

Inlined semantic annotations, ala Facebook, is one possible way of linking
data sets. The issue however with this approach is that the meta-data about
the resource is mingled with the data. This creates a number of problems.
First, there is an arbitrary distinction between what constitutes data and
what is metadata. Additionally, one needs to be able to parse the resource
format in order to find the semantic annotations. Aside the parsing
computing cost, adding semantic annotations to videos, images, etc. would
require custom extensions to be container format, which is practically
unfeasible. Practically speaking inline semantic annotations are only
partially useful, and only for text-readable content types.

A better alternative would be to use out-of-line semantic annotations. In
this model, we cleanly separate meta-data from the resource data itself.
This separation should be not just syntactical, but structural. Semantic
annotation constructs should treat the data as an opaque resource. For all
we care, we should treat all data as binary resources. If we wanted to look
into the data, an specialized parser would read the data, and surface
interesting facts that we could then promote to metadata.

The first possible construct that provides out-of-line semantic annotations
is the <a href="http://tools.ietf.org/html/draft-nottingham-http-link-header-10">Link HTTP
Header</a>.
Using link headers we can describe a web resource without having to parse
the payload, by simply looking at the HTTP headers. Examples of usage for
link headers could include:

<pre><code>  Link: &lt;http://www.cern.ch/TheBook/chapter2&gt;; rel="Previous"
  Link: &lt;mailto:timbl@w3.org&gt;; rev="Made"; title="Tim Berners-Lee"
</code></pre>

Although powerful, link headers are not particularly accessible for most
publishers, since they require programming access to the web server to
generate those link headers. Additionally, if we are only interested in the
semantic annotations, fetching a full document only to throw it away is
highly inefficient both for consumer and publisher.

A better construct to provide out-of-line semantic annotations is to create
a separate resource altogether representing the semantic annotations for the
parent resource. This alternative, alike link headers, also differentiates
between data and meta-data, but does not require stack changes to HTTP.
Furthermore, it does not require the publisher to generate those semantic
annotations. Anybody can publish semantic annotation documents for any
resource on the web. In that sense, the use of out-of-line semantic
documents that describe web resources is truly open and federated.

<h2>The Linked-Atom</h2>

There are many possible formats for describing resources in an out-of-line
fashions. One of the most interesting formats ones is the <a href="http://www.ietf.org/rfc/rfc4287.txt">The Atom
Publishing Format</a>. With Atom, the
focus is on identity and linking resources. The actual content is hidden
away.

But within the context of semantic annotations, Atom has its
<a href="http://www.olympum.com/future/a-web-linked-by-atoms/">shortcomings</a>. Rather
than abusing Atom, perhaps we need to create a separate, specialized
out-of-line resource descriptor. I call such format the "Linked-Atom". There
are a few differences between Atoms and Linked-Atoms. Whereas the atom is a
generic format for content publishing, the linked-atom is only using for
linking web resources.

Let's consider a graph whereby:

<ul>
<li>Each resource on the web is unique identified by a URI. Let's make such
resource a vertex, and the identity of this vertex be the URI.</li>
<li>A resource can link to other resources, also identified by URIs. We'll
make each link a directed edge, and the link's identity the URI of the
target resource.</li>
<li>Edges have a type, which corresponds to the type of the target resource.</li>
<li>Edges might be named, or remain anonymous.</li>
</ul>

In this graph, the set of a vertex and its outbound edges constitutes a
linked-atom. The linked-atom introduces some additional constraints:

<ul>
<li>A linked-atom is immutable. A change in the graph (adding or removing
edges, or changing edge types or edge names) creates a new Atom, with the
vertex identifier and a new revision number.</li>
<li>Linked-atoms are identified by a composite key composed of the vertex
identifier and the revision identifier.</li>
<li>The list of all linked-atoms describing all revisions of a vertex
constitutes a collection.</li>
<li>Collections are uniquely identified by the vertex identifier.</li>
</ul>

A possible JSON representation for a linked-atom would be:

<pre><code>    {
        "id": "http://example.com/foo.html",
        "rev_id": 1,
        "links": [
            {
                "id": "http://example.com/bar.html",
                "rev_id": 2,
                "type": "text/html",
                "name": "bar" 
            },
            {
                "id": "http://example.com/toto.png",
                "rev_id": 1,
                "type": "image/png",
                "name": "toto" 
            }
        ] 
    }
</code></pre>

A more compact representation of the atom is perhaps more interesting for
extracting information. Instead of grouping all the edges into a single
document, we would create describe each vertex-edge relationship as a
N-tuple. A possible implementation of the linked-atom could use n-tuples to
store the data:

<pre><code>    http://example.com/foo.html 1 http://example.com/bar.html 2 text/html bar
    http://example.com/foo.html 1 http://example.com/toto.png 1 image/png toto
</code></pre>

<h2>The Graph</h2>

Using linked-atoms, we can model the information in the web, not simply as a
graph of pages and links, but a graph of named and typed links between
vertices. Each linked-atom represents a statement about a web resource, a
piece of knowledge. The advantage of a linked-atom graph is that anybody can
publish a document making statements via linked-atoms and collections of
linked-atoms, and not just the publisher of the web resource.

This is in contrast with Facebook's Open Graph Protocol, where only the
publisher of the web resource can make such statements, and where only one
consumer assigns identifiers to those statements. Maybe the Linked-Atom is
not the perfect construct, but it provides an alternative to what I see as a
centralized lock-in model that threatens the open nature of the web.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date>2010-05-14 05:02:08</wp:post_date>
		<wp:post_date_gmt>2010-05-14 05:02:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-linked-atom-web</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet"><![CDATA[Internet]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409157174595584]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3104</wp:comment_id>
			<wp:comment_author><![CDATA[Shidan Gouran]]></wp:comment_author>
			<wp:comment_author_email>shidan@gulfpearl.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.gulfpearl.com</wp:comment_author_url>
			<wp:comment_author_IP>99.225.104.196</wp:comment_author_IP>
			<wp:comment_date>2012-04-13 06:46:28</wp:comment_date>
			<wp:comment_date_gmt>2012-04-13 06:46:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Hi, I know you wrote this some time ago but your section on entity identifiers sounds like FUD and unwarranted Facebook bashing to me. I think trying to allude that the use of a non standard namespace (whatever that means) creates any type of vendor lock-in is just ridiculous in my opinion and a failure (in at least 2010) to understand why the non unique naming assumption for linked data is important.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1334299588.7346";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3220</wp:comment_id>
			<wp:comment_author><![CDATA[Javier Jerónimo (@jeniux)]]></wp:comment_author>
			<wp:comment_author_email>jeniux@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/jeniux/status/199284706473287680/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-05-06 23:49:11</wp:comment_date>
			<wp:comment_date_gmt>2012-05-06 23:49:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>http://t.co/09oSBshZ</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1336350919.3129";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Android Solves Rubik in 24 Seconds</title>
		<link>http://www.olympum.com/mobile/android-solves-rubik-in-24-seconds/</link>
		<pubDate>Sun, 09 May 2010 16:57:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=296</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Update (20100524)</strong>: the owner of the video has removed it. That's the "beauty" of UGC.

<object width="640" height="385"><param name="movie" value="http://www.youtube.com/v/0v8pJSGi4CA&hl=en_US&fs=1&"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/0v8pJSGi4CA&hl=en_US&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="385"></embed></object>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>296</wp:post_id>
		<wp:post_date>2010-05-09 16:57:39</wp:post_date>
		<wp:post_date_gmt>2010-05-09 16:57:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>android-solves-rubik-in-24-seconds</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409157803347968]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415368838;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:225;}i:1;a:1:{s:2:"id";i:70;}i:2;a:1:{s:2:"id";i:335;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Autonomy, Mastery, Purpose</title>
		<link>http://www.olympum.com/other/autonomy-mastery-purpose/</link>
		<pubDate>Sat, 29 May 2010 04:41:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=305</guid>
		<description></description>
		<content:encoded><![CDATA[<object width="640" height="385"><param name="movie" value="http://www.youtube.com/v/u6XAPnuFjJc&color1=0xb1b1b1&color2=0xd0d0d0&hl=en_US&feature=player_embedded&fs=1"></param><param name="allowFullScreen" value="true"></param><param name="allowScriptAccess" value="always"></param><embed src="http://www.youtube.com/v/u6XAPnuFjJc&color1=0xb1b1b1&color2=0xd0d0d0&hl=en_US&feature=player_embedded&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowScriptAccess="always" width="640" height="385"></embed></object>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2010-05-29 04:41:31</wp:post_date>
		<wp:post_date_gmt>2010-05-29 04:41:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>autonomy-mastery-purpose</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409156356317186]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Why node.js Matters</title>
		<link>http://www.olympum.com/internet/why-node-js-matters/</link>
		<pubDate>Sun, 13 Jun 2010 15:36:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/internet/why-node-js-matters/</guid>
		<description></description>
		<content:encoded><![CDATA[Since the days when I coded my first reactor [POSA2] back at MIT, I have been convinced of the
conceptual simplicity of non-blocking event driven server. Aside not blocking for I/O and being able
to scale well beyond polling architectures, it is harder, sometimes impossible, to make concurrent
programming mistakes with an event-driven programming paradigm. However, reactor servers never took
off massively, probably because event based programming of server-side applications is a more
complex programming paradigm for the average programmer than a thread- or process-per-request. In in
a way, we have had not enough pressure to move, yet. Things would just work, reasonable well.

But I believe we are finally at a turning point. Multi-core architectures imply <a href="http://www.olympum.com/future/composable-and-concurrent/">the end of the free
lunch</a>. It is happening. Writing highly
concurrent server-side applications that are able to scale linearly as the number of cores increases
is something that we should be preparing for.

Once you believe reactor servers are the future, and somewhat the present, comes the question of
programming language. When it comes to programming for the web, there are many religions and
options: PHP, Ruby, Python, Java, C#, ... However, when it comes to writing web applications, there
are three languages on which all web developers agree universally on: HTML, CSS and Javascript.

And this is what makes node.js exciting. node.js develops a reactor server on top of Google's V8
Javascript engine. First, it solves the free lunch problem using a language that is universally
accessible to web developers. Second, it opens the door for innovation to a world of extremely high
concurrency, for example, MMORPGs, and potentially to a completely different web interaction
paradigm.

With motivation in mind, I set myself to learn a bit more about node.js. I chose one possible stack,
node.js + express + mongodb, but there are many more to learn. What follows in the rest of this post
are my raw notes, which I am posting here just in case it helps fellow developers getting up to
speed in all this new cool technology.

<h2>Installation</h2>

First, we install <a href="http://nodejs.org/">node.js</a> itself, and <a href="http://github.com/drnic/kiwi">kiwi</a>, a
packaging system for node.js, using homebrew (I have dropped Macports in favor of
<a href="http://github.com/webs/homebrew">homebrew</a>, as it allows me to create my own installation recipes
really easily).

<pre><code>$ brew install node
$ brew install kiwi
</code></pre>

That installed for me:

<pre><code>kiwi (0.3.1)
node (0.1.98)
</code></pre>

Once we have kiwi, we install the <a href="http://expressjs.com/">express</a> framework:

<pre><code>$ kiwi -v install express
</code></pre>

Finally, we install <a href="http://www.mongodb.org/">mongodb</a>:

<pre><code>$ brew install mongodb

If this is your first install, automatically load on login with:
    cp /usr/local/Cellar/mongodb/1.4.3-x86_64/org.mongodb.mongod.plist ~/Library/LaunchAgents
    launchctl load -w ~/Library/LaunchAgents/org.mongodb.mongod.plist

If this is an upgrade and you already have the org.mongodb.mongod.plist loaded:
    launchctl unload -w ~/Library/LaunchAgents/org.mongodb.mongod.plist
    cp /usr/local/Cellar/mongodb/1.4.3-x86_64/org.mongodb.mongod.plist ~/Library/LaunchAgents
    launchctl load -w ~/Library/LaunchAgents/org.mongodb.mongod.plist

Or start it manually:
    mongod run --config /usr/local/Cellar/mongodb/1.4.3-x86_64/mongod.conf
</code></pre>

And finally, the native adapter to mongodb for node.js:

<pre><code>$ kiwi install mongodb-native
</code></pre>

<h2>Hello World</h2>

Fire text editor and create app.js:

<pre><code>var kiwi = require('kiwi')
kiwi.require('express')

get('/', function(){
  this.contentType('html')
  return '&lt;h1&gt;Welcome To Express&lt;/h1&gt;'
})

run()
</code></pre>

And back to the terminal:

<pre><code>$ node app.js
</code></pre>

Point the browser to:

<pre><code>http://localhost:3000/
</code></pre>

<h2>Tutorial App</h2>

I found a good blog with many <a href="http://howtonode.org/">node.js tutorials</a>, including one on building
a <a href="http://howtonode.org/express-mongodb">blog app example</a> that included <a href="http://github.com/creationix/howtonode.org/blob/master/articles/express-mongodb/express-mongodb-2.zip">source
code</a>
using express and mongodb.

To run the demo, first start mongodb, and then node.js (I used two terminal windows):

<pre><code>$ mongod run --config /usr/local/Cellar/mongodb/1.4.3-x86_64/mongod.conf
$ node app.js
</code></pre>

And then visit <code>http://localhost:3000/</code>. I could not create a new blog post by visiting
<code>http://localhost:3000/blog/new</code>, as I'd get an error:

<pre><code>/Users/brunofr/Projects/express-mongodb-2/app.js:39
        title: article.title,
                      ^
TypeError: Cannot read property 'title' of undefined
    at /Users/brunofr/Projects/express-mongodb-2/app.js:39:23
</code></pre>

Looking at the code, it seems like the route <code>blog/*</code> is being executed before <code>blog/new</code>:

<pre><code>get('/blog/*', function(id){
  var self = this;
  articleProvider.findById(id, function(error, article) {
    self.render('blog_show.html.haml', {
      locals: {
        title: article.title,
        article:article
      }
    });
  });
});

get('/blog/new', function(){
  this.render('blog_new.html.haml', {
    locals: {
      title: 'New Post'
    }
  });
});
</code></pre>

Reversing the order fixed the problem.

<h2>Benchmark</h2>

I found one interesting benchmark, on <a href="http://tjholowaychuk.com/post/543953703/express-vs-sinatra-benchmarks">Express vs
sinatra</a>, which as always
should be taken with a grain of salt. But the benchmark illustrates some of the properties of
reactor servers that we have been talking about.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date>2010-06-13 15:36:30</wp:post_date>
		<wp:post_date_gmt>2010-06-13 15:36:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-node-js-matters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet"><![CDATA[Internet]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409154158497792]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2777</wp:comment_id>
			<wp:comment_author><![CDATA[NodeJS: To V8 or not to V8]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/future/nodejs-to-v8-or-not-to-v8/</wp:comment_author_url>
			<wp:comment_author_IP>82.113.146.252</wp:comment_author_IP>
			<wp:comment_date>2011-02-06 00:05:58</wp:comment_date>
			<wp:comment_date_gmt>2011-02-06 00:05:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] have been saying for a while that server-side Javascript matters. We, at Yahoo!, see a bright future in server-side Javascript and are making a big investment in [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2796</wp:comment_id>
			<wp:comment_author><![CDATA[A fresh work enviroment for Node.js and Express on Ubuntu 10 in about 30 minutes &laquo; Fabiano PS]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://fabianosoriani.wordpress.com/2011/08/01/a-fresh-work-enviroment-for-node-js-and-express-on-ubuntu-10-in-about-30-minutes/</wp:comment_author_url>
			<wp:comment_author_IP>216.151.210.17</wp:comment_author_IP>
			<wp:comment_date>2011-08-02 18:24:19</wp:comment_date>
			<wp:comment_date_gmt>2011-08-02 18:24:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] duplicated code. Besides, the concurrency performance seems really nice. (most importantly, people smarter then me thinks the [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Nodes and Jetties</title>
		<link>http://www.olympum.com/future/nodes-and-jetties/</link>
		<pubDate>Fri, 09 Jul 2010 05:59:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/nodes-and-jetties/</guid>
		<description></description>
		<content:encoded><![CDATA[I am intrigued by node.js. Others are not so much. So they ask me, why node.js, why not Jetty, or Netty, or ... ? Others say, and Twisted, and EventMachine? The core of the answer lies in a simple not well understood truth: concurrent programming is really hard. Concurrent programming using threads and locks to shared memory is <em>extremely</em> hard. Most programmers get concurrency wrong, since they don't quite realize that threads actually execute <em>simultaneously</em>.

Functional programming languages have long understood this, and designed mechanisms to avoid the risk of a programmer getting it wrong, such as immutable data structures (take a look at java.lang.String, designed by Lee Boynton, a true Lisp guy), or message passing (erlang).

Surprisingly, another line of programming has ended up in the same place. PHP can be deployed multi-threaded on Apache, but unfortunately most native libraries are <em>not</em> thread safe, so one ends up running processes as workers. Similarly, Python has the GIL, and Guido has no interest in fixing that. And yet, PHP and Python scale really well using processes.

So, here's the interesting bit about node.js. It's written on a functional programming language, Javascript, and provides a reactor server (remember POSA2?) on a single thread! I hear you say, how does it scale to multiple cores? It does not.

A single thread is only able to utilize one CPU. Even though most web apps are initially I/O bound, at some point programmers somehow manage to make them CPU bound (such as marshaling and wrangling JSON and XML). This will limit the scalability on the single process. In order to scale beyond 1 core, two possibilities exist. Right now, one would need to launch one node.js process per core, and then setup a load balancer. In the future, launching the processes needs to be done inside node (maybe this is fixed in the future?). The second option, which might also be implemented based on the node.js web site, is to adopt the Web Workers spec.

Now, because of the (single) threading model, response times are fairly unpredictable. One would expect a Java server on an async stack, such as Jetty, to provide more consistent response times, as it uses multiple threads. <a href="http://praxx.is/post/486034949/comet-with-bayeux-node-js-vs-jetty-and-cometd">A test</a> corroborates such hypothesis (look at the curve distribution for node.js vs jetty).

At the same time, because of the (single) threading model, memory usage is very low in node.js,  compared with Netty, or Jetty, where as a result of being multi-threaded, memory usage will be higher for the same load and latency. A <a href="http://news.ycombinator.com/item?id=1454722">discussion</a> on ycombinator seems to be along these lines. I am of the opinion that being able to run both on low and large memory profiles is critical to becoming successful, especially as many developers run their code in shared hosts.

If you have followed me this far, putting memory aside as that can be shared on the heap, you will then conclude that a multi-threaded Java-based async I/O server, like Jetty, should be better that node.js. And I would agree, only if it was not Java.

So here's the deal. Except a counted number of exceptions, Java libraries carry significant legacy of the wrong kind of concurrent programming, either abusing or ignoring locks. Either they do not scale to multiple cores, or they corrupt integrity of state. And this will continue to be a problem, since Java does not prevent bad programming practices in a concurrent setting. But there is a light: using the JVM, ignoring Java and most existing Java libraries.

Building new libraries for the JVM that are truly designed for concurrency requires using the right abstractions, and this is where functional programming comes into place. There are three key functional programming language contenders to the JVM: Javascript (Rhino), Scala, and Clojure.

First, there is Javascript, with Rhino, Mozilla's Javascript implementation for the JVM. <a href="http://www.ringojs.org/wiki/">Ringo</a> is a nodejs alternative based on Rhino. Unfortunately, Rhino is slow and quite a memory hog. Additionally calls in Ringo are blocking, which defeats the programming model. And Ringo uses the same Java libraries that were not coded with concurrency in mind. Compared to nodejs, Ringo has no community (a quick scan reveals 9701 messages in the node.js mailing list in 12 months of usage, against only 181 in 2 years of usage).

Next, come Scala and Clojure. Both are very intriguing, perhaps Clojure being more of my taste. For Clojure, we now have <a href="http://github.com/ztellman/aleph">Aleph</a>, a thin Netty wrapper. On multi-core, it seems to beat node.js latency and throughput wise, at the cost of memory. And Clojure allows message passing, immutable data structures, ala Lisp, all transparently mapped onto threads. Beautiful I say.

But Scala and Clojure are not Javascript. Javascript attracts many developers from the browser world, it provides a consistent event-driven programming paradigm for both server runtime and client runtime. Eventually, this pushes most UI logic to the browser, and leaves the server as a smart data source. As much as I find Clojure extremely exciting, I don't think it can realistically compete with Javascript.

So, realistically, only node.js is a viable alternative today. Maybe Clojure truly succeeds, and a Clojure based async I/O server appears. But for now, node.js is more interesting.

But don't get me wrong: node.js is very young, truly bleeding edge, and needs substantial work. Some of that work will make it easy for applications to scale beyond one core. Scaling beyond one core will improve consistency in response times. But given the vibrant community and excitement (and hype) around node.js, I am fairly confident this will happen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date>2010-07-09 05:59:20</wp:post_date>
		<wp:post_date_gmt>2010-07-09 05:59:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nodes-and-jetties</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409153118703616]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415411119;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:313;}i:1;a:1:{s:2:"id";i:356;}i:2;a:1:{s:2:"id";i:347;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3023</wp:comment_id>
			<wp:comment_author><![CDATA[(@damo_inc) (@damo_inc)]]></wp:comment_author>
			<wp:comment_author_email>damo_inc@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/damo_inc/status/180618921718714368/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-03-16 11:38:01</wp:comment_date>
			<wp:comment_date_gmt>2012-03-16 11:38:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>@larister hehe.. typical - I need more sleep - mos def! here it is: http://t.co/UKGZudBE</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331901347.9409";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2967</wp:comment_id>
			<wp:comment_author><![CDATA[Damo (@damo_inc)]]></wp:comment_author>
			<wp:comment_author_email>damo_inc@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/damo_inc/status/174609849269760000/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-28 21:40:06</wp:comment_date>
			<wp:comment_date_gmt>2012-02-28 21:40:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>@paullherve http://t.co/I89eEns5  so #jetty beats #nodejs but when JS fanboys make nodejs multicore it'll be uber fast.For now #jetty/#netty</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1330483417.017";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6337</wp:comment_id>
			<wp:comment_author><![CDATA[Node.js can not compete with Jetty | Smash Company]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.smashcompany.com/technology/node-js-can-not-compete-with-jetty</wp:comment_author_url>
			<wp:comment_author_IP>184.106.153.176</wp:comment_author_IP>
			<wp:comment_date>2012-09-13 02:25:56</wp:comment_date>
			<wp:comment_date_gmt>2012-09-13 02:25:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] An interesting, sideways argument for Clojure: A single thread is only able to utilize one CPU. Even though most web apps are initially I/O bound, at some point programmers somehow manage to make them CPU bound (such as marshaling and wrangling JSON and XML). This will limit the scalability on the single process. In order to scale beyond 1 core, two possibilities exist. Right now, one would need to launch one node.js process per core, and then setup a load balancer. In the future, launching the processes needs to be done inside node (maybe this is fixed in the future?). The second option, which might also be implemented based on the node.js web site, is to adopt the Web Workers spec. [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1347503156.3377";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>On Scaling node.js to Multiple Cores</title>
		<link>http://www.olympum.com/future/on-scaling-node-js-to-multiple-cores/</link>
		<pubDate>Sat, 10 Jul 2010 15:29:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/on-scaling-node-js-to-multiple-cores/</guid>
		<description></description>
		<content:encoded><![CDATA[From <a href="http://groups.google.com/group/nodejs/browse_thread/thread/36146559c089dca0">a thread</a> on multicore leverage in nodejs, <a href="http://blog.feedly.com/">Edwin Khodabakchian</a> talking about <a href="http://feedly.com/">feedly</a>:

<blockquote>
  We have an "admin" node process which is started with as input the 
  number of "feedly" node processes it should launch and monitor. When 
  the admin starts, it spawns multiple "feedly" node processes, padding 
  as input the port the feedly node should listen to 9701 for the first 
  one,...9710 for the 10th one.
  
  On the server we have a varnish server which load balances the traffic 
  from m.feedly.com to 127.0.0.1:9701 --- 127.0.0.1:9710.
  
  Each "feedly" node process has a 127.0.0.1:970x/heath endpoint where 
  it reports stats about its execution. The admin node monitor each 
  feedly node every 2 minutes and makes sure that the feedly node is 
  healthy and responding. If not, it kills the child and restart a new 
  instance of the feedly node listening to the same port.
  
  All feedly nodes point to a redis instance for shared memory/session 
  management. This allows incoming HTTP requests to be load balances 
  across any feedly nodes transparently. 
  In dev/staging, we have varnish and all the node processes running on 
  the same box.
  
  In production, we can scale out by having varnish on one server and 
  multiple node cell (where a cell is an admin+10 feedly). This allows 
  us to do rolling upgrades, etc. without any interruption to the 
  service.
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date>2010-07-10 15:29:11</wp:post_date>
		<wp:post_date_gmt>2010-07-10 15:29:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-scaling-node-js-to-multiple-cores</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409152191782912]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415153608;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:315;}i:1;a:1:{s:2:"id";i:313;}i:2;a:1:{s:2:"id";i:586;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Facebook BigPipe in an Async Servlet</title>
		<link>http://www.olympum.com/java/facebook-bigpipe-in-an-async-servlet/</link>
		<pubDate>Wed, 14 Jul 2010 06:44:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/java/facebook-bigpipe-in-an-async-servlet/</guid>
		<description></description>
		<content:encoded><![CDATA[Since <a href="http://www.subbu.org/">Subbu</a> wrote <a href="http://www.subbu.org/blog/2010/07/bigpipe-done-in-node-js">BigPipe using node.js</a>, I had to see how the same thing would look like in a Java async servlet.

<a href="http://codemonkeyism.com/">Stephan Schmidt</a> had already written <a href="http://codemonkeyism.com/facebook-bigpipe-java/">Facebook BigPipe for Java</a>, but using a synchronous servlet model, not asynchronous. I decided to implement it using Jetty continuations and the Jetty HTTP client, but the code should be easy to adapt to servlet 3.0 <code>AsyncContext</code>.

<script src="http://gist.github.com/475077.js"></script>

The code initially constructs the page with a few empty <code>div</code>s that will contain the pagelets, for example:

<pre>
&lt;div id='pagelet3'&gt;&lt;/div&gt;
</pre>

I keep the connection open from the browser to the server while I render pagelets. As pagelets become available, I flush them onto the browser, which in turn inserts them into the right place in the DOM using Javascript. Assuming we get back a response from the remote module protocol:

<pre>
&lt;span&gt;some useful message for module: pagelet3&lt;/span&gt;
</pre>

We wrap it inside Javascript so that it looks like:

<pre>
&lt;script&gt;arrived('pagelet3', '&lt;span&gt;some useful message for module: pagelet3&lt;/span&gt;');&lt;/script&gt;
</pre>

All is left is for the <code>arrived</code> function to update the <code>pagelet3</code> element in the DOM.

In terms of concurrency, the initial page construction is done synchronously. As soon as I have the frame in place with the <code>div</code>s that will eventually hold the pagelets, I suspend the execution of the servlet, which in turn releases the thread that was attached to the client connection. At that point, I fire in parallel HTTP client requests to the remote module server.

For resuming the continuation, I could have used a counter, but since each HTTP client execution is a separate thread, unlike in node.js, I did not want to have to acquire a lock and synchronize to be able to update the counter. Instead, I used request attributes, as setting, getting and removing them is thread safe. The code keeps a list of references to the elements that we are offloading to a remote module server, as an <code>ArrayList</code> with the ids to fire parallel requests to <code>http://localhost:8080/module?id={id}</code>; each <code>id</code> is also kept as a request attribute. As each request comes back from the remote module server, I write and flush the response buffer, so that the element appears on the browser immediately, and I remove the corresponding request attribute.

Although the code is not as readable and straight forward as what Subbu got with node.js, I am actually surprised how simple the async Java solution actually turned out to be.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date>2010-07-14 06:44:48</wp:post_date>
		<wp:post_date_gmt>2010-07-14 06:44:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>facebook-bigpipe-in-an-async-servlet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409148978528258]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415314715;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:315;}i:1;a:1:{s:2:"id";i:313;}i:2;a:1:{s:2:"id";i:335;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2771</wp:comment_id>
			<wp:comment_author><![CDATA[Tutorial: How To Implement BigPipe Using ASP.Net MVC &#8211; Part 1 | JMPerez Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.josemanuelperez.es/2010/09/tutorial-bigpipe-asp-net-mvc-facebook/</wp:comment_author_url>
			<wp:comment_author_IP>212.227.114.72</wp:comment_author_IP>
			<wp:comment_date>2010-09-19 20:46:52</wp:comment_date>
			<wp:comment_date_gmt>2010-09-19 20:46:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] other people have implemented the basics of this technique using Java (Bruno Fernandez-Ruiz and Stephan Schmidt) and using Node.js (Subbu Allamaraju).   This entry was posted in General and [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2790</wp:comment_id>
			<wp:comment_author><![CDATA[Performance of RESTful Apps]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.subbu.org/blog/2011/03/performance-of-restful-apps</wp:comment_author_url>
			<wp:comment_author_IP>173.255.212.94</wp:comment_author_IP>
			<wp:comment_date>2011-03-04 19:10:56</wp:comment_date>
			<wp:comment_date_gmt>2011-03-04 19:10:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] I/O based servers like nodejs are very attractive for this (see my nodejs example or Bruno&#8216;s example using [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Quick benchmark checkpoint on Java and NodeJS</title>
		<link>http://www.olympum.com/java/quick-benchmark-java-nodejs/</link>
		<pubDate>Sun, 23 Jan 2011 19:46:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=324</guid>
		<description></description>
		<content:encoded><![CDATA[Java (my nodejs-inspired NIO/Netty based HTTP server):

<pre><code>Server server = Http.createServer();
server.setRequestListener(new RequestListener() {
    @Override
    public void service(ServerRequest request, ServerResponse response) {
        HashMap&lt;String, String&gt; headers = new HashMap&lt;String, String&gt;();
        headers.put("Content-Type", "text/html; charset=utf-8");
        headers.put("Content-Length", "47");
        response.writeHeader(200, headers);
        response.end("&lt;html&gt;&lt;body&gt;&lt;h1&gt;hüllo world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;");
    }
});
server.listen(8080);
</code></pre>

Javascript:

<pre><code>http.createServer(function(req, res) {
    res.writeHead(200, {"Content-Length": "47",
                        "Content-Type": "text/html; charset=utf-8"});
    res.write("&lt;html&gt;&lt;body&gt;&lt;h1&gt;hüllo world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;");
    res.end();
}).listen(8080);
</code></pre>

My quick "smoke" benchmark results using ab (MBA, 2 cores, 10.6.6, 4 GB, 2.13 GHz). First Java:

<pre><code>$ ab -k -n 2000 -c 200  http://localhost:8080/
Time taken for tests:   0.127 seconds
Complete requests:      2000
Failed requests:        0
Write errors:           0
Keep-Alive requests:    2000
Total transferred:      305850 bytes
HTML transferred:       95833 bytes
Requests per second:    15693.29 [#/sec] (mean)
Time per request:       12.744 [ms] (mean)
Time per request:       0.064 [ms] (mean, across all concurrent requests)
Transfer rate:          2343.65 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   1.6      0      10
Processing:     1    5   2.9      5      16
Waiting:        1    5   2.9      5      16
Total:          1    6   3.4      5      19
</code></pre>

and then nodejs (kriszyp/multi-node using node 0.2.5 on 2 nodes):

<pre><code>$ ab -k -n 2000 -c 200 http://127.0.0.1:8080/
Time taken for tests:   0.225 seconds
Complete requests:      2000
Failed requests:        0
Write errors:           0
Keep-Alive requests:    2000
Total transferred:      300150 bytes
HTML transferred:       94047 bytes
Requests per second:    8876.38 [#/sec] (mean)
Time per request:       22.532 [ms] (mean)
Time per request:       0.113 [ms] (mean, across all concurrent requests)
Transfer rate:          1300.90 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    1   1.9      0      11
Processing:     0   18   3.7     18      28
Waiting:        0   18   3.7     18      28
Total:          0   18   4.5     18      39
</code></pre>

So far, so good. I can now start adding Rhino.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>324</wp:post_id>
		<wp:post_date>2011-01-23 19:46:58</wp:post_date>
		<wp:post_date_gmt>2011-01-23 19:46:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quick-benchmark-java-nodejs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409146977865728]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415225869;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:328;}i:1;a:1:{s:2:"id";i:315;}i:2;a:1:{s:2:"id";i:313;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3270</wp:comment_id>
			<wp:comment_author><![CDATA[Domenico Renna]]></wp:comment_author>
			<wp:comment_author_email>dmn.renna@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.63.139.90</wp:comment_author_IP>
			<wp:comment_date>2012-05-18 10:49:28</wp:comment_date>
			<wp:comment_date_gmt>2012-05-18 10:49:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Can you repat this banchmark using siege instead of ab, I'm intresting to the difference</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337338168.0425";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4117</wp:comment_id>
			<wp:comment_author><![CDATA[Simon]]></wp:comment_author>
			<wp:comment_author_email>simon@dancingcloudservices.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.68.239.129</wp:comment_author_IP>
			<wp:comment_date>2012-06-23 02:51:47</wp:comment_date>
			<wp:comment_date_gmt>2012-06-23 02:51:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Hmm, you don't appear to have posted sufficient info to make a fair comparison with other technologies. Did you run other servers and if so with what tuning conditions for things like thread count?</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340419907.9133";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Java AIO (NIO.2) vs NodeJS</title>
		<link>http://www.olympum.com/java/java-aio-vs-nodejs/</link>
		<pubDate>Sun, 30 Jan 2011 09:13:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/java/java-aio-vs-nodejs/</guid>
		<description></description>
		<content:encoded><![CDATA[I just installed OpenJDK 7 on Ubuntu 10.04 LTS under VirtualBox (one core, 256 MB). I wanted to run a quick test to see how the new JDK7 Async channel APIs were performing in comparison with node. A simple test of a hello world running on a single core shows that the JVM truly has what it takes to be the best runtime for network servers. Most notably, compare the distribution of response times, especially at 99%. The advantage the JVM is showing might be enough to comfortably fit Rhino onto it.

Here are the numbers from Apache benchmark. First, Java AIO (build b127):

<pre><code>brunofr@ubuntu-vm:~$ ab -n 30000 -c 300 http://127.0.0.1:8080/
Concurrency Level:      300
Time taken for tests:   4.908 seconds
Complete requests:      30000
Requests per second:    6112.65 [#/sec] (mean)
Time per request:       49.079 [ms] (mean)
Transfer rate:          567.26 [Kbytes/sec] received

Percentage of the requests served within a certain time (ms)
  50%      8
  66%      8
  75%      9
  80%     11
  90%     12
  95%     13
  98%     14
  99%     18
 100%   4553 (longest request)
</code></pre>

And then nodejs (from Ryan's branch):

<pre><code>brunofr@ubuntu-vm:~$ ab -n 30000 -c 300 http://127.0.0.1:8124/
Concurrency Level:      300
Time taken for tests:   8.140 seconds
Complete requests:      30000
Requests per second:    3685.69 [#/sec] (mean)
Time per request:       81.396 [ms] (mean)
Transfer rate:          273.55 [Kbytes/sec] received

Percentage of the requests served within a certain time (ms)
  50%     35
  66%     44
  75%     50
  80%     53
  90%     60
  95%     65
  98%     75
  99%     86
 100%   3285 (longest request)
</code></pre>

Note that right now AsynchronousChannel only has platform support on Linux and Solaris (you'll get a java.lang.InternalError: platform not recognized running on OSX).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>328</wp:post_id>
		<wp:post_date>2011-01-30 09:13:32</wp:post_date>
		<wp:post_date_gmt>2011-01-30 09:13:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-aio-vs-nodejs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409145207865344]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415536850;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:315;}i:1;a:1:{s:2:"id";i:324;}i:2;a:1:{s:2:"id";i:129;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2794</wp:comment_id>
			<wp:comment_author><![CDATA[Node.js From the Enterprise Java Perspective | Shine Technologies Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.shinetech.com/?p=394</wp:comment_author_url>
			<wp:comment_author_IP>208.78.99.126</wp:comment_author_IP>
			<wp:comment_date>2011-06-10 07:59:38</wp:comment_date>
			<wp:comment_date_gmt>2011-06-10 07:59:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] Netty and Apache MINA, witch are both based on the Java NIO (New I/O) API. According to this test done by Bruno Fernandez-Ruiz the NIO API performs very well against Node.js. Problem is that these frameworks are outside of the [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2795</wp:comment_id>
			<wp:comment_author><![CDATA[Node.js From the Enterprise Java Perspective | The Shine Technologies Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://shinetechblog.wordpress.com/2011/06/10/nodejs-from-the-enterprise-java-perspective/</wp:comment_author_url>
			<wp:comment_author_IP>216.151.210.19</wp:comment_author_IP>
			<wp:comment_date>2011-07-28 05:55:27</wp:comment_date>
			<wp:comment_date_gmt>2011-07-28 05:55:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] Netty and Apache MINA, witch are both based on the Java NIO (New I/O) API. According to this test done by Bruno Fernandez-Ruiz the NIO API performs very well against Node.js. Problem is that these frameworks are outside of the [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2997</wp:comment_id>
			<wp:comment_author><![CDATA[Charles]]></wp:comment_author>
			<wp:comment_author_email>charles.villemure@boreal-is.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>204.19.34.218</wp:comment_author_IP>
			<wp:comment_date>2012-03-07 13:06:01</wp:comment_date>
			<wp:comment_date_gmt>2012-03-07 13:06:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Could you provide me with the source code you used to do this benchmark.  I would like to recreate your benchmark with the latest version of both and check out the result.</p>

<p>NodeJS HelloWorld is quite simple, but i'm not quite sure how to build the java part!</p>

<p>Thanks</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331125561.9148";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3046</wp:comment_id>
			<wp:comment_author><![CDATA[Dobes]]></wp:comment_author>
			<wp:comment_author_email>dobesv@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://dobesv.com</wp:comment_author_url>
			<wp:comment_author_IP>27.53.74.250</wp:comment_author_IP>
			<wp:comment_date>2012-03-24 12:02:28</wp:comment_date>
			<wp:comment_date_gmt>2012-03-24 12:02:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Would you care to include a benchmark of a synchronous I/O version for Java on the same system?</p>

<p>Just to see if async I/O is actually deserving the credit here.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332590548.3169";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3048</wp:comment_id>
			<wp:comment_author><![CDATA[meh]]></wp:comment_author>
			<wp:comment_author_email>what_the@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>188.84.17.121</wp:comment_author_IP>
			<wp:comment_date>2012-03-24 23:17:13</wp:comment_date>
			<wp:comment_date_gmt>2012-03-24 23:17:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Show the source code or the benchmark didn't happen :(</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332631033.0896";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2976</wp:comment_id>
			<wp:comment_author><![CDATA[Christian Reichel (@chrisreichel)]]></wp:comment_author>
			<wp:comment_author_email>chrisreichel@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/chrisreichel/status/175426432602865664/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-03-02 03:44:55</wp:comment_date>
			<wp:comment_date_gmt>2012-03-02 03:44:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Java AIO vs Node.js http://t.co/hT0Aj34F</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330662788.3702";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2913</wp:comment_id>
			<wp:comment_author><![CDATA[vladimirus (@vladimirus)]]></wp:comment_author>
			<wp:comment_author_email>vladimirus@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/vladimirus/status/169766913340219392/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-15 12:56:00</wp:comment_date>
			<wp:comment_date_gmt>2012-02-15 12:56:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>java 1 - node.js 0: http://t.co/2FmCpyOk</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329313004.2125";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26839</wp:comment_id>
			<wp:comment_author><![CDATA[@gotoalberto]]></wp:comment_author>
			<wp:comment_author_email>gotoalberto@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/gotoalberto/status/395684252336943104/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2013-10-30 22:50:51</wp:comment_date>
			<wp:comment_date_gmt>2013-10-30 22:50:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Java NIO.2 vs Node.js -&gt; Java wins http://t.co/W5vWMvNk1Z</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1383176068.21103;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>NodeJS: To V8 or not to V8</title>
		<link>http://www.olympum.com/future/nodejs-to-v8-or-not-to-v8/</link>
		<pubDate>Sun, 06 Feb 2011 00:05:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/nodejs-to-v8-or-not-to-v8/</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Update:</strong> Jason Hoffman (Chief Scientist, Founder of Joyent) has written a <a href="http://joyeur.com/2011/02/05/on-brunos-concern-about-the-current-coupling-of-node-js-and-v8/">very good response</a> to this post. Obviously I owe him some responses, which is <a href="http://www.olympum.com/future/answering-jason-on-v8-governance-and-impact-to-nodejs/">on a separate post</a>.

If you have not watched <a href="http://www.yuiblog.com/blog/2010/08/30/yui-theater-douglas-crockford-crockford-on-javascript-scene-6-loopage-52-min/">Douglas Crockford's video lecture on server-side
Javascript</a>,
I recommend you do that first before reading further into this post.

I have been saying for a while that <a href="http://www.olympum.com/internet/why-node-js-matters/">server-side Javascript
matters</a>. We, at Yahoo!,
see <a href="http://developer.yahoo.com/blogs/ydn/posts/2010/11/on-deck-yuiconf-2010-with-a-focus-on-yui-yql-and-node-js/">a bright future in server-side
Javascript</a>
and are making a big investment in it. But if you <a href="http://twitter.com/olympum">follow me on
twitter</a>, you'll know that I am also looking into
ensuring high-availability of server-side Javascript-based services on
production. Which really comes down to something like: to V8 or not to V8.

NodeJS is currently tightly coupled to Google's V8 engine. V8 was not designed
as a server-side engine, but as a browser-based engine. Furthermore, V8 was
designed squarely to run in Chrome's multi-process model. As much as I think
V8 is a brilliant piece of engineering, it's software that was not designed to
run on a server.

More to the point, it's really up to Google to work with the community to make
V8 work on the server-side. Sometimes Google is responsive, but sometimes it
might not. It varies as it depends how fixing a bug or applying a patch may
align with Google's product roadmap and plans. I don't know Google's plans, and I
suspect most NodeJS committers don't know either.

Maybe for some folks this might not seem like a big problem. And probably, if
you are running a site with a few thousand daily page views, it might actually
not be a big deal. But to Yahoo!, and <a href="http://amix.dk/blog/post/19577">to
others</a>, it's a big deal and we believe this
is fundamental to the success of the NodeJS project.

Writing a Javascript runtime that does not fail is hard. Even the really smart
V8 folks have explicitly designed V8 for failures to happen and safeguard the
browser. In a browser, a JS engine failure is an inconvenience to the user:
damn, you lost a tab. In a thread-per-request blocking I/O server design it's
also not a big deal, you lose one in-flight request. But in an event-driven
web server, it's a major flaw, you lose thousands of in-flight requests you
have already accepted.

For NodeJS to scale to billions of page views like Yahoo!'s, we need to
make sure the Javascript engine / VM behind Node is rock-solid for server-side
loads, i.e. it fails extremely rarely.

Google may invest on supporting V8 on the server-side, just like the Mozilla
folks do. Or somebody else might invest and ensure V8 is rock-solid on the
server and Google may merge the patches nicely. Or maybe not, and the
community may need to fork V8. Or something else ... Nobody really knows.

Either way, it's time for the NodeJS community to realise there is a
roadblock and discuss it openly.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>330</wp:post_id>
		<wp:post_date>2011-02-06 00:05:01</wp:post_date>
		<wp:post_date_gmt>2011-02-06 00:05:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nodejs-to-v8-or-not-to-v8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409142041174018]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415454461;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:335;}i:1;a:1:{s:2:"id";i:340;}i:2;a:1:{s:2:"id";i:347;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2784</wp:comment_id>
			<wp:comment_author><![CDATA[JavaScript Magazine Blog for JSMag &raquo; Blog Archive &raquo; News roundup: isotope, hash-bangs, node.js and V8, IE9 to support Geolocation]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jsmag.com/blog/2011/02/isotope-hash-bangs-node-js-and-v8-ie9-geolocation/</wp:comment_author_url>
			<wp:comment_author_IP>98.141.220.218</wp:comment_author_IP>
			<wp:comment_date>2011-02-11 10:14:40</wp:comment_date>
			<wp:comment_date_gmt>2011-02-11 10:14:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] Bruno Fernandez-Ruiz (Yahoo! Fellow, VP and Platform Architect) has raised some concerns about the tight coupling of node.js to Google&#8217;s V8 engine. He raises the concern that V8 was primarily designed for the browser, and while the engine has been made to be fault-tolerant in a browser, it hasn&#8217;t necessarily been made the same way for code running on a server, where faults are more catastrophic and affect many more users. He also brings up a concern about Google&#8217;s responsiveness: &#8220;Sometimes Google is responsive, but sometimes it might not [sic].&#8221; [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2783</wp:comment_id>
			<wp:comment_author><![CDATA[Quick Hits :: 2011-01-07 | rud.is]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://rud.is/b/index.php/2011/02/07/quick-hits-2011-01-07/</wp:comment_author_url>
			<wp:comment_author_IP>184.106.97.102</wp:comment_author_IP>
			<wp:comment_date>2011-02-08 00:35:20</wp:comment_date>
			<wp:comment_date_gmt>2011-02-08 00:35:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] NodeJS: To V8 or not to V8 [bruno fernandez-ruiz] [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2781</wp:comment_id>
			<wp:comment_author><![CDATA[NodeJS and V8 | Peter Griess&#39;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.std.in/2011/02/06/nodejs-and-v8/</wp:comment_author_url>
			<wp:comment_author_IP>184.73.255.211</wp:comment_author_IP>
			<wp:comment_date>2011-02-06 18:32:58</wp:comment_date>
			<wp:comment_date_gmt>2011-02-06 18:32:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] is a response to this blog post by @olympum, with the rest of the thread being here and [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2779</wp:comment_id>
			<wp:comment_author><![CDATA[Answering Jason on V8 governance and impact to NodeJS]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/future/answering-jason-on-v8-governance-and-impact-to-nodejs/</wp:comment_author_url>
			<wp:comment_author_IP>82.113.146.252</wp:comment_author_IP>
			<wp:comment_date>2011-02-06 05:30:52</wp:comment_date>
			<wp:comment_date_gmt>2011-02-06 05:30:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] bruno fernandez-ruiz random code dumps      &laquo; NodeJS: To V8 or not to V8 [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2778</wp:comment_id>
			<wp:comment_author><![CDATA[On Bruno&#8217;s Concern About the Current Coupling of node.js and V8 &laquo; Joyeur]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://joyeur.com/2011/02/05/on-brunos-concern-about-the-current-coupling-of-node-js-and-v8/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.69.18</wp:comment_author_IP>
			<wp:comment_date>2011-02-06 03:15:51</wp:comment_date>
			<wp:comment_date_gmt>2011-02-06 03:15:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] Bruno Fernandez-Ruiz (Yahoo! Fellow, VP and Platform Architect) wrote about his concerns around the current tight coupling between node.js and V8. Feel free to take a moment and read the original article: &#8220;NodeJS: To V8 or not to V8&#8243;. [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2786</wp:comment_id>
			<wp:comment_author><![CDATA[Code.DanYork.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://code.danyork.com/2011/02/11/a-fascinating-exchange-on-node-js-googles-v8-and-control/</wp:comment_author_url>
			<wp:comment_author_IP>74.220.219.132</wp:comment_author_IP>
			<wp:comment_date>2011-02-12 01:29:41</wp:comment_date>
			<wp:comment_date_gmt>2011-02-12 01:29:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p><strong>A Fascinating Exchange on Node.JS, Google&#8217;s V8&#8230; and Control...</strong></p>

<p>Back on Sunday, there was a fascinating exchange on blog sites about the tight linkage between Node.js and Google&#8217;s V8 JavaScript Engine. It started with Bruno Fernandez-Ruiz of Yahoo with his post: NodeJS: To V8 or not to V8 where he expressed h...</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2793</wp:comment_id>
			<wp:comment_author><![CDATA[Can V8 or node.js replace JVM? - Quora]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.quora.com/Can-V8-or-node-js-replace-JVM</wp:comment_author_url>
			<wp:comment_author_IP>184.72.86.196</wp:comment_author_IP>
			<wp:comment_date>2011-06-09 00:05:59</wp:comment_date>
			<wp:comment_date_gmt>2011-06-09 00:05:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] QuestionAdd QuestionV8 (JavaScript engine) Node.js JVM Can V8 or node.js replace JVM?Follow-up on http://www.olympum.com/future/no...&nbsp;&nbsp;Add AnswerBIU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@&nbsp;&nbsp;&nbsp;Edit Link Text Show answer [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2804</wp:comment_id>
			<wp:comment_author><![CDATA[Writing my own JSON-RPC server in NodeJS &laquo; LLH&#8230;azndezign]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://longho.wordpress.com/2011/09/11/writing-my-own-json-rpc-server-in-nodejs/</wp:comment_author_url>
			<wp:comment_author_IP>216.151.210.44</wp:comment_author_IP>
			<wp:comment_date>2011-09-11 21:48:28</wp:comment_date>
			<wp:comment_date_gmt>2011-09-11 21:48:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] http://www.olympum.com/future/nodejs-to-v8-or-not-to-v8/ [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3036</wp:comment_id>
			<wp:comment_author><![CDATA[Rashad Majali (@rashad612)]]></wp:comment_author>
			<wp:comment_author_email>rashad612@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/rashad612/status/182486066304000000/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-03-21 15:17:23</wp:comment_date>
			<wp:comment_date_gmt>2012-03-21 15:17:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[NodeJS: To V8 or not to V8 http://t.co/Tbcq4BuT via @olympum
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332347887.4955";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Answering Jason on V8 governance and impact to NodeJS</title>
		<link>http://www.olympum.com/future/answering-jason-on-v8-governance-and-impact-to-nodejs/</link>
		<pubDate>Sun, 06 Feb 2011 05:30:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/answering-jason-on-v8-governance-and-impact-to-nodejs/</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Update (2011/9/11)</strong>: this post is picking up again 8 months later, I've <a href="http://www.olympum.com/architecture/ahead-with-node-js-and-google-v8/">written an update</a> as of where we stand.

<hr/>

Jason Hoffman (Chief Scientist, Founder at Joyent) has posted some <a href="http://joyeur.com/2011/02/05/on-brunos-concern-about-the-current-coupling-of-node-js-and-v8/">good
questions to
me</a>,
based on my original <a href="http://www.olympum.com/future/nodejs-to-v8-or-not-to-v8/">nodejs and
V8</a> post. Let me
summarise Jason's questions and comments into three key messages:

<blockquote>
  It's Joyent's responsibility that NodeJS runs well period. We're not
  afraid of a language VM. [...] actual node.js committers (who all work
  at Joyent) know quite a bit and have pretty good relations with the V8
  team.
</blockquote>

That's a very honourable goal and perfectly within Joyent's capabilities and track record. I am <em>not</em> debating that.

<blockquote>
  If there are actual technical problems with V8′s reliability or ???
  and these affect the use of node.js in production then I’d like to
  see details.
</blockquote>

The discussion is not really whether I have technical production problems or
not with V8 (within NodeJS); all software has bugs. My issue is about project
governance. Let's say such a problem affecting reliability exists and that
Joyent fixes it by developing a critical patch for V8, a patch that the
upstream maintainer does not deem it necessary to merge. For how long would
Joyent maintain and test such patches?

Another aspect of governance: intellectual property rights.

My point: it's not whether Google's V8 project is open or not, it's that since
governance of V8 may become a problem <em>in the future</em>, it requires a solution
<em>now</em> so that large organisations can put their full weight behind NodeJS.
Joyent's weight behind NodeJS is necessary, but not sufficient. I prefer
addressing the problems in the code.

<blockquote>
  node.js is only implemented on V8 but that’s only because we’re
  going to focus on making node.js awesome first. [...] After all, we
  are still working on getting it to 1.0
</blockquote>

Open source software is commonly designed to make it easy to replace parts or
components that may be at risk of being legally tainted or patent encumbered
(e.g. mono's architecture as an example of isolation). I would put V8 in the
same bucket of "risky parts", although for different reasons. Given the lack
of definition on Google's V8 project governance, and the current tight
coupling between node and V8, I wonder how realistic it will be to implement a
different VM post-1.0 if we haven't got the right layer of abstraction
pre-1.0. Or perhaps the problem (the reassurance of governance) can be
addressed by working under the umbrella of a foundation that ensures such
governance.

Let me end by saying that I am still as committed as ever to NodeJS and that I
really believe in Joyent's engineering strength to make NodeJS 1.0 a reality.
Joyent is putting their money where their mouth is. We know they are working
hard making node <em>awesome</em>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date>2011-02-06 05:30:44</wp:post_date>
		<wp:post_date_gmt>2011-02-06 05:30:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>answering-jason-on-v8-governance-and-impact-to-nodejs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409143316234240]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415454509;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:330;}i:1;a:1:{s:2:"id";i:347;}i:2;a:1:{s:2:"id";i:315;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2782</wp:comment_id>
			<wp:comment_author><![CDATA[On Bruno&#8217;s Concern About the Current Coupling of node.js and V8 &laquo; Joyeur]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://joyeur.com/2011/02/05/on-brunos-concern-about-the-current-coupling-of-node-js-and-v8/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.96.198</wp:comment_author_IP>
			<wp:comment_date>2011-02-06 20:49:15</wp:comment_date>
			<wp:comment_date_gmt>2011-02-06 20:49:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] Answering Jason on V8 governance and impact to NodeJS on February 5, 2011 at 9:30 [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2780</wp:comment_id>
			<wp:comment_author><![CDATA[NodeJS: To V8 or not to V8]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/future/nodejs-to-v8-or-not-to-v8/</wp:comment_author_url>
			<wp:comment_author_IP>82.113.146.252</wp:comment_author_IP>
			<wp:comment_date>2011-02-06 05:39:48</wp:comment_date>
			<wp:comment_date_gmt>2011-02-06 05:39:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] fernandez-ruiz random code dumps      &laquo; Java AIO (NIO.2) vs NodeJS Answering Jason on V8 governance and impact to NodeJS [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2785</wp:comment_id>
			<wp:comment_author><![CDATA[JavaScript Magazine Blog for JSMag &raquo; Blog Archive &raquo; News roundup: isotope, hash-bangs, node.js and V8, IE9 to support Geolocation]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jsmag.com/blog/2011/02/isotope-hash-bangs-node-js-and-v8-ie9-geolocation/</wp:comment_author_url>
			<wp:comment_author_IP>98.141.220.218</wp:comment_author_IP>
			<wp:comment_date>2011-02-11 10:15:04</wp:comment_date>
			<wp:comment_date_gmt>2011-02-11 10:15:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] has a followup reply here. It&#8217;s also worth checking out the discussion on Hacker [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2791</wp:comment_id>
			<wp:comment_author><![CDATA[NodeJS and V8 | Peter Griess&#39;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.std.in/2011/02/06/nodejs-and-v8/</wp:comment_author_url>
			<wp:comment_author_IP>184.73.255.211</wp:comment_author_IP>
			<wp:comment_date>2011-03-06 03:01:42</wp:comment_date>
			<wp:comment_date_gmt>2011-03-06 03:01:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] [This is a response to this blog post by @olympum, with the rest of the thread being here and here.] [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2802</wp:comment_id>
			<wp:comment_author><![CDATA[Ahead with Node.JS and Google V8]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/architecture/ahead-with-node-js-and-google-v8/</wp:comment_author_url>
			<wp:comment_author_IP>82.113.146.252</wp:comment_author_IP>
			<wp:comment_date>2011-09-11 15:34:14</wp:comment_date>
			<wp:comment_date_gmt>2011-09-11 15:34:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] bruno fernandez-ruiz random code dumps      &laquo; Answering Jason on V8 governance and impact to NodeJS [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2806</wp:comment_id>
			<wp:comment_author><![CDATA[NodeJS与Rails如何选择？ | 飞扬网络博客]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.feshine.net/technology/460.html</wp:comment_author_url>
			<wp:comment_author_IP>61.164.140.177</wp:comment_author_IP>
			<wp:comment_date>2011-10-10 10:48:36</wp:comment_date>
			<wp:comment_date_gmt>2011-10-10 10:48:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] 提到NodeJS的发展，人们首先会想到它所依赖的Javascript引擎V8，该引擎最初是Google用于自身浏览器Chrome中，作为一款为 Web浏览器设计的Javascript引擎，其可靠性是否适应于服务器端呢？几个月之前，NodeJS东家Joyent的创始人Jason与 Yahoo!副总裁Bruno就V8和NodeJS的关系发起了一场讨论。最近Bruno又在博客中提到了一些近况，他表示Yahoo将继续支持NodeJS的发展，目前团队内部的成果非常显著，但暂时不能过多透露。至于他最初对V8的依赖担忧，Bruno认为形势发生了改变。首先，Google对V8的缺陷修补非常支持支持和迅速。再次，Mozilla已经着手准备创建基于Spidermonkey的NodeJS实现。Yahoo!和Joyent正在密切合作发展NodeJS。     &laquo; 上一篇 | 下一篇 &raquo; [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>On Scaling out NodeJS in a Reliable Manner</title>
		<link>http://www.olympum.com/future/on-scaling-out-nodejs-in-a-reliable-manner/</link>
		<pubDate>Sun, 06 Feb 2011 18:15:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=340</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Single-Thread I/O</h2>

Why this is good, separating I/O from CPU. Exception with large shared state,
i.e. YCS. Reliability and stress tests are critical. A single Javascript
context overhead per process.

Scaling to multiple cores involves multiple processes, handing off the socket
file descriptor and accepting the connection on the child process, letting the
kernel do the round robin. Note that there are other ways to scale out, but
this is the preferred way.

On spawn vs fork, i.e. describe Bene's patch.

<h2>Do we need threads? Handing off CPU-bound workloads</h2>

WebWorkers to child process, not effective, need for multi-threading to fully
effectively leverage multi-core configurations, e.g. 64 cores. Discussion on
process vs thread based, and why we want threads.

<h2>Adding Javascript</h2>

<ul>
<li>Single threaded I/O: must ensure reliability, if the reactor comes down,
it's a BIG deal as thousands of accepted socket connections will reset. MTTF
must be very high. It comes down to V8 handling errors more gracefully and
allowing recovery.</li>
<li>CPU bound workload: running a separate Javascript context per thread. There
are two options, the V8-way or the-other-Javascript-engine way.

<ul>
<li>V8 uses statics and, unlike other Javascript engines, none of the method
signatures passes the context along. We could move all statics in V8 into
a context object and pass it along in thread local storage when we call
::Lock.</li>
<li>Switch from V8 to a context-per-thread engine, e.g. JaegerMonkey or
JavaScriptCore. To allow compatibility with V8, we would need to hide the
Context object being passed along on every call to the engine. We would
create a V8-like API that does that magic behind the scenes using thread
local storage.</li>
<li>In either case, we'd have to do some similar fixes in NodeJS itself, as
most of the statics would need to move onto a separate global object.</li>
</ul></li>
</ul>

<h2>Decoupling Reactor and JS</h2>

<ul>
<li>If JS drives the reactor, a JS-engine failure, kills the reactor.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date>2011-02-06 18:15:03</wp:post_date>
		<wp:post_date_gmt>2011-02-06 18:15:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>on-scaling-out-nodejs-in-a-reliable-manner</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409140074414080]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415078058;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:315;}i:1;a:1:{s:2:"id";i:356;}i:2;a:1:{s:2:"id";i:251;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Ahead with Node.JS and Google V8</title>
		<link>http://www.olympum.com/architecture/ahead-with-node-js-and-google-v8/</link>
		<pubDate>Sun, 11 Sep 2011 15:34:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=347</guid>
		<description></description>
		<content:encoded><![CDATA[It has been 10 months since I posted about Google V8. But somebody re-started
<a href="http://news.ycombinator.com/item?id=2982684">a thread again on Hacker News</a>
about <a href="http://www.olympum.com/future/answering-jason-on-v8-governance-and-impact-to-nodejs/">my old blog
post</a>.
So now I am compelled to briefly say where we are at.

We have continued and extended our investment in Node.JS. I can tell you that
what the teams are doing is transformative and pure awesomeness. Unfortunately
this is as much as I can tell you right now, but really soon you'll start
hearing what we've done. In every single demo, internal and external, we have
done of the technology, the feedback has been fantastic. I am very happy and
fortunate to have a team of super-stars working on this.

As per my concern on being locked into Google V8 and not being able to support
the software, things have changed since I last blogged. First, Google has been
very, very, supportive addressing V8 bugs whenever they existed.

Secondly, here at Yahoo! we donated some code to the fine folks at Mozilla to
<a href="https://github.com/bfrancojr/v8monkey">wrap the Spidermonkey API with the V8
API</a>. Mozilla went on to create a full
implementation of <a href="http://blog.zpao.com/post/4620873765/about-that-hybrid-v8monkey-engine">Node.JS on
Spidermonkay</a>
and provide the architectural re-assurance we needed. I am still surprised
however from the discussion on the blogosphere and twitterspace months ago
about how many developers don't seem to pay attention to open source
governance. When you have the responsibility for a multi-million dollar
technology investment, you want to make sure you cover all your bases.

Finally, we have partnered closely with the fine folks at Joyent and are
working through the final stages of negotiation for how we'll work together
going forward.

Let me say that I am really excited about what the technology innovation that
Node.JS is bringing to the industry, whether that is to create a new
generation of I/O intensive servers, or to bring Javascript to the
server-side. I see Node.JS' future is bright.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date>2011-09-11 15:34:12</wp:post_date>
		<wp:post_date_gmt>2011-09-11 15:34:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ahead-with-node-js-and-google-v8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409136882184194]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2803</wp:comment_id>
			<wp:comment_author><![CDATA[Answering Jason on V8 governance and impact to NodeJS]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/future/answering-jason-on-v8-governance-and-impact-to-nodejs/</wp:comment_author_url>
			<wp:comment_author_IP>82.113.146.252</wp:comment_author_IP>
			<wp:comment_date>2011-09-11 15:36:43</wp:comment_date>
			<wp:comment_date_gmt>2011-09-11 15:36:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] fernandez-ruiz random code dumps      &laquo; NodeJS: To V8 or not to V8 Ahead with Node.JS and Google V8 [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3035</wp:comment_id>
			<wp:comment_author><![CDATA[(@olympum) (@olympum)]]></wp:comment_author>
			<wp:comment_author_email>olympum@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/olympum/status/182487721879683074/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-03-21 15:23:58</wp:comment_date>
			<wp:comment_date_gmt>2012-03-21 15:23:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>@rashad612 that's old stuff, pls rd this one http://t.co/cTsi1EoW</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332344305.2161";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Railroad Diagrams from EBNF</title>
		<link>http://www.olympum.com/future/railroad-diagrams-from-ebnf/</link>
		<pubDate>Mon, 10 Oct 2011 21:04:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/railroad-diagrams-from-ebnf/</guid>
		<description></description>
		<content:encoded><![CDATA[I am playing with a new query language. I am defining the grammar as EBNF, but
I want to show railroad diagrams for those readers that are more graphical and
less familiar with BNF. I've found limited support for generating syntax
diagrams from EBNF. I've found a few tools, some working better than others:

<ul>
<li><a href="http://www.informatik.uni-freiburg.de/~thiemann/haskell/ebnf2ps/">Ebnf2ps</a>
(Haskell). This is the only tool I have not been able to get to work. I seem
to be missing AFM fonts in my TeX installation and I am not sure I want to
spend time figuring out how to generate the AFM files.</li>
<li>SQLite <a href="http://www.sqlite.org/docsrc/doc/tip/art/syntax/bubble-generator.tcl?mimetype=text/plain">bubble generator</a>
(Tk/Tcl). Strictly this tool does not consume EBNF grammars, but a custom
DSL. If I didn't care about EBNF, this would be the best tool</li>
<li><a href="https://github.com/featurist/node-ebnf-diagram">node-ebnf-diagram</a>
(Javascript). Although it works, I have to issues with it. One is that it
can only generate PNG files. That would not be too bad if it weren't for the
second issue: the tool does not automatically resize the canvas, and it
requires explicit width and height input. If I don't find anything else,
I'll probably end up using it.</li>
<li><a href="http://www.emacswiki.org/emacs/EbnfToPsPackage">ebnf2ps.el</a> (Emacs Lisp).
It works as advertised. The only issue I found is that the diagrams
generated have a small white gap on the lines on the right hand side.</li>
<li><a href="http://www.antlr.org/download.html">ANTLRWorks</a> (Java). Bundled with antlr,
it fits the task. Once you are in the game of defining the grammar in Java,
why not just go ahead and use the same tool to generate not only the parser
but the diagrams? This is what the tool does. Even if you are not doing a
Java parser/lexer, this is a good tool to use for documentation purposes.</li>
</ul>

I am using ANTLRWorks, generating all the diagrams from the command line as part of my markdown transform pipeline:

<pre><code>java -cp antlrworks-1.1.4.jar org.antlr.works.Console -f yql.g -o output/ -sd eps
</code></pre>

It works very well.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>354</wp:post_id>
		<wp:post_date>2011-10-10 21:04:33</wp:post_date>
		<wp:post_date_gmt>2011-10-10 21:04:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>railroad-diagrams-from-ebnf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415524839;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:355;}i:1;a:1:{s:2:"id";i:10;}i:2;a:1:{s:2:"id";i:75;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409136601534466]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Markdown, An Open Document Workflow</title>
		<link>http://www.olympum.com/future/markdown-an-open-document-workflow/</link>
		<pubDate>Sat, 15 Oct 2011 14:27:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/markdown-an-open-document-workflow/</guid>
		<description></description>
		<content:encoded><![CDATA[I've been using <a href="http://daringfireball.net/projects/markdown/">Markdown</a> since
2006, taking all my notes at work using a simple text editor and using the
Markdown text markup format. I also use Markdown for writing down thoughts and
posting to this blog. I rarely, if ever, use Word or even TeX/LaTeX. I treat
markdown as my source format and I generate all my target formats using
<a href="http://fletcherpenney.net/multimarkdown/">multimarkdown</a>: PDF, HTML, RTF,
etc.

I am happy with this process. I use a standard editor I find in any operating
system I happen to work with. I use a standard document format I know I will
be able to open in years to come: plain text. I use source control to version
my text files and synchronize between computers. This works everywhere I have
git and I am not locked-in into any particular cloud or tool or format or ...

As an editor, I use <a href="http://jblevins.org/projects/markdown-mode/">emacs markdown
mode</a> and it does me well. And
it's not about <a href="http://www.gnu.org/s/emacs/">emacs</a>: you may use
<a href="http://www.vim.org/">vi</a>, or <a href="http://macromates.com/">TextMate</a>, or whatever.
The point is that your favorite text editor, whichever it is, is probably good
enough. I have also recently started using <a href="http://markedapp.com/">Marked</a> as
a convenience for previewing the transformed markdown output without having to
continuously switch back to the browser or do <code>C-c C-c p</code> all the time.

I also use <a href="http://jekyllrb.com/">Jekyll</a> to transform some of my markdown
text files onto a static site where <a href="http://git-scm.com/">git</a> is the glue
here. It works everywhere I have git.

Recently I have had a need to bring my markdown files to the iPhone and the
iPad. And although one may find some specialized git iOS clients for things
like <a href="https://github.com/">github</a>, there is no general git client for iOS,
integrated with a text viewer, as far as I know.

Given the lack of shared file system in iOS, whichever app I use must have
both text editor, ideally with support for markdown preview, as well as sync
capabilities. <a href="http://itunes.apple.com/us/app/id396073482?mt=8">Nocs</a> is
exactly that. It uses <a href="http://db.tt/4rTs9QST">Dropbox</a> to sync your files, and
it has an embedded text editor with markdowns support. It fits perfectly into
my workflow. I continue to use emacs on the laptop, and Nocs on the iPad.
Dropbox syncs between laptop and tablet, and git between computers.

I am sure there are ways I could simplify the flow. But for now, this meets my
requirements.

Finally, I am not keen at all to use tools like
<a href="http://www.evernote.com/">Evernote</a>, since as far as I am concerned I am
losing both freedom and the future-proof aspects of plain text. I have
literally thousands of text notes accumulated over the years, and I have the
reassurance that I will always be able to access and edit my notes in years to
come. I don't want to risk putting my documents onto a proprietary platform.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>355</wp:post_id>
		<wp:post_date>2011-10-15 14:27:55</wp:post_date>
		<wp:post_date_gmt>2011-10-15 14:27:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>markdown-an-open-document-workflow</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409136601534466]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>The Praxis of Event Loops</title>
		<link>http://www.olympum.com/future/the-praxis-of-event-loops/</link>
		<pubDate>Sat, 15 Oct 2011 15:27:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/the-praxis-of-event-loops/</guid>
		<description></description>
		<content:encoded><![CDATA[On a theoretical world, given the ability for a processor to run an infinite
amount of threads, we could prove the following statements (no attribution
purposely given):

<ul>
<li>If you do more CPU than I/O, use threads.</li>
<li>If you do more I/O than CPU, use more threads.</li>
</ul>

which would allow us to conclude with the following corollary:

<blockquote>
  at full utilization, threads and events have the same theoretical
  throughput.
</blockquote>

Such argument ignores <strong>praxis</strong> -- it is a purely <strong>theoretical</strong> debate
disconnected from the reality of scaling services --.

Yahoo! serves over 20 billion daily requests through it's edge services
(remote proxies and caches throughout the world). These intermediate servers
are doing pure IO workloads, handling slow client IO and handing connections
off to the origin servers through Yahoo's pipes. It is critical that we
minimize the CPU cost per connection to be able to max the CPU at the max
number of connections per host.

The hosts on Yahoo!s edge network run exclusively event loops, and have been
doing so for over a decade, originally with Inktomi Traffic Server then with
Yahoo Traffic Server, and now with Apache Traffic Server, etc. The design
throughout is the same: a few "master" event loop threads, usually one per
core, and a small pool of worker threads. In total, a handful of 20~50 threads
per server. With this design, Yahoo! is able to scale to hundreds of thousands
of connections per server. It is currently still impossible, <em>in practice</em>, to
run a server with so many threads and still serve data.

Another practical need for event loops occurs at the other end of the serving
stack. Resolving a search query follows a general pattern of parsing and
rewriting the query, followed by fetching potential search results, and
finally doing document re-ranking. The first and last phases are CPU
intensive. The fetch operation is purely an IO workload that performs a
scatter-gather operation which fans out to hundreds to thousands of back
servers holding the search index across tens of columns. As a consequence, for
every client connection, it's possible to require one thousand upstream
connections. When the upstream index servers become slow, which is a common
failure situation, or perhaps in scenarios where we have to fetch data from a
remote data center, the number of connections in the system grows to tens of
thousands. It is also important that we keep all three phases running on the
same process to avoid serialization and transfer costs, essentially forcing us
to mix CPU and IO intensive workload. It is currently still impossible, <em>in
practice</em>, to perform this type of data intensive processing without using
event loops.

Unlike Yahoo's services, which combine an event loop with a handful of threads
per core, Node.JS design is a single-threaded event-loop per core. For pure IO
workloads this ensures the necessary simplicity required to be able to design
software that scales to thousands of concurrent active connections, as long as
nothing is blocking. I find it unfortunate that some developers have not
internalized this and are trying to run CPU intensive applications using
Node.JS. Inferring that because these badly designed applications are a
failure, therefore Node.JS is a failure is an unnecessary and unfair
generalization. Node.JS has a field of <em>practical</em> applicability, and like any
tool, a seasoned practitioner should know when, and when not, to use it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>356</wp:post_id>
		<wp:post_date>2011-10-15 15:27:47</wp:post_date>
		<wp:post_date_gmt>2011-10-15 15:27:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-praxis-of-event-loops</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409133703299074]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415511168;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:8;}i:1;a:1:{s:2:"id";i:315;}i:2;a:1:{s:2:"id";i:340;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3151</wp:comment_id>
			<wp:comment_author><![CDATA[Joey Parsons (@joeyparsons)]]></wp:comment_author>
			<wp:comment_author_email>joeyparsons@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/joeyparsons/status/194469937073487872/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-04-23 16:57:00</wp:comment_date>
			<wp:comment_date_gmt>2012-04-23 16:57:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>RT @dwollen: Wow, this is a great and balanced article on when #NodeJS is good, and when not to use it http://t.co/aY6ufcfI</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335202531.8954";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3154</wp:comment_id>
			<wp:comment_author><![CDATA[dwollen (@dwollen)]]></wp:comment_author>
			<wp:comment_author_email>dwollen@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/dwollen/status/194469623326973953/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-04-23 16:55:45</wp:comment_date>
			<wp:comment_date_gmt>2012-04-23 16:55:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Wow, this is a great and balanced article on when #NodeJS is good, and when not to use it http://t.co/aY6ufcfI</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335303305.6048";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3185</wp:comment_id>
			<wp:comment_author><![CDATA[Node.js Links (@nodejs_links)]]></wp:comment_author>
			<wp:comment_author_email>nodejs_links@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/nodejs_links/status/196041749251104768/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-04-28 01:02:49</wp:comment_date>
			<wp:comment_date_gmt>2012-04-28 01:02:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>RT @dwollen: Wow, this is a great and balanced article on when #NodeJS is good, and when not to use it http://t.co/aY6ufcfI</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335576894.2958";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3660</wp:comment_id>
			<wp:comment_author><![CDATA[Mick Dudley (@bassman54321)]]></wp:comment_author>
			<wp:comment_author_email>bassman54321@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/bassman54321/status/205017216666710016/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-05-22 19:28:08</wp:comment_date>
			<wp:comment_date_gmt>2012-05-22 19:28:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>@gustavonalle agree but this article suggests if it does the job it is good enough not everyone needs &gt; 10k connections http://t.co/oxSkMKKd</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337715212.0115";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>A Home Backup Strategy</title>
		<link>http://www.olympum.com/future/a-home-backup-strategy/</link>
		<pubDate>Fri, 09 Dec 2011 06:07:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/a-home-backup-strategy/</guid>
		<description></description>
		<content:encoded><![CDATA[For years I've been continuously fighting with backups. I have not been
particularly good or consistent at it. We've been okay with Time Machine and
Carbon Copy Cloner, but the recent addition of a digital SLR to our gadget
collection has meant running out of space on our shared home drive.

Historically I'd been using a WD My Book 2x1 TB RAID1 array connected to an
Apple Airport Extreme and shared via AirDisk (afp). We had Time Machine backup
all the computers in the house in the AirDisk. We'd also store our photos and
videos, etc. in the AirDisk. Aside running out of space, we had no good
offsite strategy. Given that our digital picture collection is continuously
becoming more and more valuable as a family history artifact, I though it was
time to address this properly, rather than just adding more space.

I started by classifying the risk associated with each data type:

<ul>
<li><strong>Personal files</strong>: document scans, photos, videos, etc. This is the
critical part of the equation. In case of fire or theft we'd have no
replacement and the loss would be HUGE.</li>
<li><strong>Shared Media</strong>: movies, music, etc. These are regrettable if lost, but can
be restore. I know how to find them back, even though it might be painful or
costly.</li>
<li><strong>Backups</strong>: the time machine backups from our home computers. Since we
have the laptops plus the backup, I was not too worried about losing this.</li>
</ul>

Since no all data is born equal, the required reliability levels vary. For
personal files, I want to be covered against hardware failures. For the other
kinds, I don't mind that much.

Additionally, for videos, I want to have the ability to connect the storage
unit directly to my computer while editing (my experience editing over the
network has not been great).

Finally, I really wanted an offsite backup for our personal data.

Given these constrains, I struggled to find a good (cost-effective)
combination, and since I think I've found something that works well for me, I
thought I'd share with others just in case this helps:

<ul>
<li>Airport Extreme Station 802.11n 2nd Generation (100/1000) (any 1 Gbps switch
would do).</li>
<li>Buffalo LinkStation Pro Duo 2x3 TB (NAS), connected to AES via 1 Gbps
ethernet. Setup as RAID1 and exposing two afp shares (Personal, Media) and a
Time Machine 'Backup' share that each computer uses to create a separate
sparsebundle.</li>
<li>2x WD My Book 2x1 TB on RAID0, mounted 'usbdisk', connected via USB to
LinkStation and used to backup incrementally every night from the NAS
internal disks. Every week I rotate the USB WD drive units between office
and home.</li>
<li>If I want to edit video, I unmount the USB drive and connect via Firewire to
my computer for doing video edits. When I mount it back, I manually copy the
edits back to the NAS internal drives. This is the only manual step in the
process.</li>
<li>The media files are exposed through the embedded server in the LinkStation
via UPnP and iTunes Server. This allows me to use Boxee on any computer (and
a patched Apple TV 2nd gen) to watch our videos. We also share iTunes music
this way without having to share libraries.</li>
</ul>

I ended up putting all the data under RAID1, but I think the cost is low since
we mostly only read from the array (except the backups). With this setup:

<ul>
<li>We have Time Machine for all computers in the house, happening over the
network and transparently.</li>
<li>We can access all data both via afp mounts as well as directly via USB/FW
for intensive reads / edits.</li>
<li>We have an offsite copy.</li>
</ul>

Overall, I am happy with the setup. I was initially worried about using a
home-grade NAS, but even though the LS is slow for writes, it's actually fast
for reads, so I am happy.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>357</wp:post_id>
		<wp:post_date>2011-12-09 06:07:53</wp:post_date>
		<wp:post_date_gmt>2011-12-09 06:07:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-home-backup-strategy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409133556076544]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415514431;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:225;}i:1;a:1:{s:2:"id";i:251;}i:2;a:1:{s:2:"id";i:21;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>The NodeJS Innovation Advantage</title>
		<link>http://www.olympum.com/architecture/the-nodejs-innovation-advantage/</link>
		<pubDate>Sat, 28 Jan 2012 21:40:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=363</guid>
		<description></description>
		<content:encoded><![CDATA[Thesis: <em>"when building large scale distributed systems, high performance functional programming languages provide the quickest turnaround from idea to concept; however such advantage disappears as we move from concept to production, and the overall time from idea to production across all programming languages is of the same order of magnitude"</em>.

<a href="http://www.olympum.com/wordpress/wp-content/uploads/2012/01/nodejs_innov_advantage.png"><img src="http://www.olympum.com/wordpress/wp-content/uploads/2012/01/nodejs_innov_advantage.png" alt="The NodeJS innovation advantage" title="nodejs_innov_advantage" width="510" height="366" class="aligncenter size-full wp-image-364" /></a>

I posted this diagram, without justification, yesterday evening, in an attempt to gauge the reactions of the community, in <a href="http://twitter.com/olympum">twitter</a>. Thank you to all of you that commented. With the experiment done, let me now provide my thesis and hopefully address most of the feedback so far. I intend to make this post fluid and keep updating as the conversation evolves.

Now, let me qualify the thesis. First, this is a thesis applicable to multiple domains, whether that's a low-level network switch appliance, a http proxy gateway or a web application. As a consequence, this is not a framework comparison, it's not about Rails vs Django vs Play vs Express vs .... This is not an argument about dynamic vs statically typed programming languages, although that definitely plays a partial role in the thesis.

Mine is a thesis about the complete <em>team</em> productivity by programming language and across the full product life-cycle from inception to retirement. The thesis is purely based on my observations throughout the years. There is not data to back it up, except anecdotal evidence. In summary, mine is a qualitative statement, not a quantitative one.

If the thesis were true, this would mean that teams using high-performance and functional programming languages can iterate more quickly from idea to concept. Such quick turnaround allows a constant validation of ideas in the code. Because it is quickly possible to see the idea running, we can afford to have more ideas. The quicker we are able to iterate between idea and concept, the more we are innovating.

Such quick turnaround has a real trade-off and a false trade-off.

Moving these concepts to production is difficult. Whether it's Scheme, or Lisp, or Clojure, or JavaScript, it becomes clear that we are "naked". Except in "safe but useless" languages, such as Haskell, in most "useful but unsafe" programming languages, the developer has to compensate for the dynamic nature of the language. The developer has to provide the <em>strictness</em>, and to a degree perform the job of the compiler. In statically-typed and imperative programming languages, the compile infrastructure helps the developer ensure the correctness of the code. In dynamically-typed and functional programming languages --by the way, yes these are orthogonal concepts but usually associated--, the developer needs to structure code and provide the necessary checks, assertions, unit tests, regressions tests and modular design. The addition of type hinting and type inference does not change this, it only shifts effort between "before concept" and "after concept".

High-performance functional programming languages trade strictness for innovation potential. Without the additional investment in checks and tests, these systems are not <em>predictable</em>. The time we gained upfront, we pay later for. I'd argue such trade-off is good, and allows quick iteration to find the right idea.

The second trade-off is about tech debt. The time to production is identical across languages, but because the developer in high-performance functional programming languages had to compensate for the lack of compiler infrastructure and runtime guardrails by adding completeness of tests and checks, the system is easier to maintain and has overall a better architecture. This is almost counter intuitive and I think most people don't think this way because they move too quickly from concept to production, and don't implement the necessary strictness. There is a tendency in the developer to move quickly from concept to production, and therefore accruing overall technical debt.

Finally, I believe server-side JavaScript and Google V8 provide such high-performance functional programming language, in the skin of an imperative one, and enable this quick turnaround from idea to concept. This possibly one of the key reasons we are seeing such explosion in adoption. I only hope developers start to realize the trade-off they are doing, and that in order to avoid accrual of technical debt, they better invest in checks and tests before they rush into production.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date>2012-01-28 21:40:27</wp:post_date>
		<wp:post_date_gmt>2012-01-28 21:40:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-nodejs-innovation-advantage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409130808819712]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415525537;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:315;}i:1;a:1:{s:2:"id";i:245;}i:2;a:1:{s:2:"id";i:251;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2809</wp:comment_id>
			<wp:comment_author><![CDATA[NodeJS Community (@NodeJsCommunity)]]></wp:comment_author>
			<wp:comment_author_email>NodeJsCommunity@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/NodeJsCommunity/status/163680805162467328/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 17:51:59</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 17:51:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Making an argument for NodeJS as instrument of innovation (now with text) - http://t.co/ASxlPHGx http://t.co/rigrV0dn</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869184.1692";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869289.0019";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2810</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno Fernandez-Ruiz (@olympum)]]></wp:comment_author>
			<wp:comment_author_email>olympum@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/olympum/status/163679985809362944/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 17:48:44</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 17:48:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Making an argument for NodeJS as instrument of innovation (now with text) - http://t.co/1sXcIuz5</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869184.6789";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2811</wp:comment_id>
			<wp:comment_author><![CDATA[NodeJS Community (@NodeJsCommunity)]]></wp:comment_author>
			<wp:comment_author_email>NodeJsCommunity@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/NodeJsCommunity/status/163668084002000896/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 17:01:26</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 17:01:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Even on a mature lang, hardening innovative off-the-beaten-path solutions takes as much time - http://t.co/ASxlPHGx http://t.co/QYmpVNeT</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869184.9404";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869289.0094";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2812</wp:comment_id>
			<wp:comment_author><![CDATA[Subbu Allamaraju (@sallamar)]]></wp:comment_author>
			<wp:comment_author_email>sallamar@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/sallamar/status/163666917641560065/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 16:56:48</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 16:56:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Even on a mature lang, hardening innovative off-the-beaten-path solutions takes as much time - http://t.co/sYtjVXGr</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869185.2355";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2813</wp:comment_id>
			<wp:comment_author><![CDATA[Sriharsha Vardhan (@sriharshav)]]></wp:comment_author>
			<wp:comment_author_email>sriharshav@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/sriharshav/status/163643674524270592/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 15:24:27</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 15:24:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>The NodeJS Innovation Advantage http://t.co/RdkPGZTg via @zite</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1327869185.544";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2814</wp:comment_id>
			<wp:comment_author><![CDATA[Outsider (@Outsideris)]]></wp:comment_author>
			<wp:comment_author_email>Outsideris@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/Outsideris/status/163643308961300480/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 15:22:59</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 15:22:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>The NodeJS Innovation Advantage http://t.co/Kb4a8mfZ</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869185.8424";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2815</wp:comment_id>
			<wp:comment_author><![CDATA[Denny Trebbin (@cirbif)]]></wp:comment_author>
			<wp:comment_author_email>cirbif@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/cirbif/status/163622452327481344/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 14:00:07</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 14:00:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>The NodeJS Innovation Advantage http://t.co/VnLTqOT1 via @zite</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869186.1924";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2816</wp:comment_id>
			<wp:comment_author><![CDATA[martjno (@martjno)]]></wp:comment_author>
			<wp:comment_author_email>martjno@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/martjno/status/163593705574502400/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 12:05:53</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 12:05:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>The NodeJS Innovation Advantage http://t.co/PhOXUBgc via @zite</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869186.4989";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2817</wp:comment_id>
			<wp:comment_author><![CDATA[Ertugrul Yilmaz (@ertugrulyilmaz)]]></wp:comment_author>
			<wp:comment_author_email>ertugrulyilmaz@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/ertugrulyilmaz/status/163554535036555264/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 09:30:14</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 09:30:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>The NodeJS Innovation Advantage
http://t.co/GxKbsw1S</p>

nodejs
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869186.8632";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2818</wp:comment_id>
			<wp:comment_author><![CDATA[Emanuel Kluge (@Herschel_R)]]></wp:comment_author>
			<wp:comment_author_email>Herschel_R@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/Herschel_R/status/163551827940483072/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 09:19:29</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 09:19:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>the node.js innovation advantage – http://t.co/ZE3znPTr v @nodejs</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1327869187.149";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2819</wp:comment_id>
			<wp:comment_author><![CDATA[Luke Bennett (@developerluke)]]></wp:comment_author>
			<wp:comment_author_email>developerluke@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/developerluke/status/163545188273356801/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 08:53:06</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 08:53:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>"The Node.js Innovation Advantage" - http://t.co/qg1xOfzq</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869187.4495";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2820</wp:comment_id>
			<wp:comment_author><![CDATA[Dhananjay Nene (@dnene)]]></wp:comment_author>
			<wp:comment_author_email>dnene@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/dnene/status/163530572940050432/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 07:55:01</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 07:55:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>How many flaws in this diagram? The NodeJS Innovation Advantage http://t.co/XBghPoxc Evangelism is good - but not incorrectness /via @talios</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869187.7812";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2821</wp:comment_id>
			<wp:comment_author><![CDATA[Pat Khunachak (@panutat)]]></wp:comment_author>
			<wp:comment_author_email>panutat@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/panutat/status/163527140002893824/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 07:41:23</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 07:41:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>node.js rocks! @nodejs: http://t.co/tRGPJL7O</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869188.1374";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2822</wp:comment_id>
			<wp:comment_author><![CDATA[Node.js Bot ♉ (@Nodejs_bot)]]></wp:comment_author>
			<wp:comment_author_email>Nodejs_bot@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/Nodejs_bot/status/163524508760809473/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 07:30:55</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 07:30:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>nodejs: http://t.co/StXwSJaj</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869188.4689";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2823</wp:comment_id>
			<wp:comment_author><![CDATA[node js (@nodejs)]]></wp:comment_author>
			<wp:comment_author_email>nodejs@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/nodejs/status/163518215199260672/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 07:05:55</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 07:05:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>http://t.co/ei1dUzxr</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869188.7659";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2824</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Brevoort (@mbrevoort)]]></wp:comment_author>
			<wp:comment_author_email>mbrevoort@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mbrevoort/status/163482431297564672/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 04:43:43</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 04:43:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>I've lived each one of these paths and completely agree -&gt;The NodeJS Innovation Advantage http://t.co/1HnvrHHk via @zite</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1327869189.107";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2825</wp:comment_id>
			<wp:comment_author><![CDATA[Node.js Bot ♉ (@Nodejs_bot)]]></wp:comment_author>
			<wp:comment_author_email>Nodejs_bot@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/Nodejs_bot/status/163455174067757057/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 02:55:25</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 02:55:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Say "XYZ is the best" an you're a troll. Post a graph without axis labels, based on no real data, and it is convincing! http://t.co/StXwSJaj</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1327869189.314";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2826</wp:comment_id>
			<wp:comment_author><![CDATA[Tomas Petricek (@tomaspetricek)]]></wp:comment_author>
			<wp:comment_author_email>tomaspetricek@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/tomaspetricek/status/163453761380028416/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 02:49:48</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 02:49:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Say "XYZ is the best" an you're a troll. Post a graph without axis labels, based on no real data, and it is convincing! http://t.co/u95dwjJn</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869189.6226";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2827</wp:comment_id>
			<wp:comment_author><![CDATA[NodeJS Community (@NodeJsCommunity)]]></wp:comment_author>
			<wp:comment_author_email>NodeJsCommunity@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/NodeJsCommunity/status/163409871314747392/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-28 23:55:23</wp:comment_date>
			<wp:comment_date_gmt>2012-01-28 23:55:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Exactly right. http://t.co/ASxlPHGx http://t.co/TRZr2KhU</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869189.8361";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869289.0154";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2828</wp:comment_id>
			<wp:comment_author><![CDATA[Node.js Bot ♉ (@Nodejs_bot)]]></wp:comment_author>
			<wp:comment_author_email>Nodejs_bot@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/Nodejs_bot/status/163407910427299840/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-28 23:47:36</wp:comment_date>
			<wp:comment_date_gmt>2012-01-28 23:47:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>ericflo: This is an interesting point that's probably true about Node.JS (vs. Java) http://t.co/StXwSJaj /via @jamesgolick</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869190.0311";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2829</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Florenzano (@ericflo)]]></wp:comment_author>
			<wp:comment_author_email>ericflo@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/ericflo/status/163407361871065091/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-28 23:45:25</wp:comment_date>
			<wp:comment_date_gmt>2012-01-28 23:45:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>This is an interesting point that's probably true about Node.JS (vs. Java) http://t.co/cIJj9coa /via @jamesgolick</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869190.3179";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2830</wp:comment_id>
			<wp:comment_author><![CDATA[James Golick (@jamesgolick)]]></wp:comment_author>
			<wp:comment_author_email>jamesgolick@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/jamesgolick/status/163406452743090177/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-28 23:41:48</wp:comment_date>
			<wp:comment_date_gmt>2012-01-28 23:41:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Exactly right. http://t.co/GQFpL6lt</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869190.6423";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2831</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno Fernandez-Ruiz (@olympum)]]></wp:comment_author>
			<wp:comment_author_email>olympum@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/olympum/status/163383400428879872/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-28 22:10:12</wp:comment_date>
			<wp:comment_date_gmt>2012-01-28 22:10:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>A critical NodeJS advantage is to allow a quick turnaround from idea to concept, and only then require hardening work. http://t.co/1sXcIuz5</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327869190.8923";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2832</wp:comment_id>
			<wp:comment_author><![CDATA[Luiz Rocha (@lsdr)]]></wp:comment_author>
			<wp:comment_author_email>lsdr@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/lsdr/status/163765301085876225/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-29 23:27:45</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 23:27:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>http://t.co/s1oehNyk - The nodejs Innovation Advantage</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327879989.6487";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2833</wp:comment_id>
			<wp:comment_author><![CDATA[Marc Fasel (@MarcFasel)]]></wp:comment_author>
			<wp:comment_author_email>MarcFasel@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/MarcFasel/status/163774121853984768/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-30 00:02:48</wp:comment_date>
			<wp:comment_date_gmt>2012-01-30 00:02:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>The Node.js innovation advantage - http://t.co/FKzrmnCq</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327887186.4248";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2834</wp:comment_id>
			<wp:comment_author><![CDATA[Ludovic Dreux (@ludovic_dreux)]]></wp:comment_author>
			<wp:comment_author_email>ludovic_dreux@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/ludovic_dreux/status/163811617996414977/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-30 02:31:47</wp:comment_date>
			<wp:comment_date_gmt>2012-01-30 02:31:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>RT @olympum: Making an argument for NodeJS as instrument of innovation (now with text) - http://t.co/1sXcIuz5</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327890795.5272";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2836</wp:comment_id>
			<wp:comment_author><![CDATA[nanhapark (@nanhapark)]]></wp:comment_author>
			<wp:comment_author_email>nanhapark@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/nanhapark/status/163861560387833857/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-30 05:50:15</wp:comment_date>
			<wp:comment_date_gmt>2012-01-30 05:50:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>RT @Outsideris: The NodeJS Innovation Advantage http://t.co/Kb4a8mfZ</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327905203.9619";s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329974965.8084";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329062443.5553";s:7:"message";s:39:"admin reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[admin]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2837</wp:comment_id>
			<wp:comment_author><![CDATA[The Node.JS Innovation Advantage | javascript.js | Scoop.it]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.scoop.it/t/javascript-js/p/1082231496/the-node-js-innovation-advantage</wp:comment_author_url>
			<wp:comment_author_IP>89.30.105.121</wp:comment_author_IP>
			<wp:comment_date>2012-01-30 08:03:30</wp:comment_date>
			<wp:comment_date_gmt>2012-01-30 08:03:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] background-position: 50% 0px; background-color:#222222; background-repeat : no-repeat; }         www.olympum.com  - Today, 8:03 [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327910610.2337";s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329974965.7983";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329062473.0113";s:7:"message";s:39:"admin reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[admin]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2838</wp:comment_id>
			<wp:comment_author><![CDATA[Michele Minazzato (@michelemina)]]></wp:comment_author>
			<wp:comment_author_email>michelemina@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/michelemina/status/163908837403930624/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-30 08:58:06</wp:comment_date>
			<wp:comment_date_gmt>2012-01-30 08:58:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>RT @nodejs: http://t.co/ei1dUzxr</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327916007.5573";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2839</wp:comment_id>
			<wp:comment_author><![CDATA[bdour akram (@bdour_akram)]]></wp:comment_author>
			<wp:comment_author_email>bdour_akram@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/bdour_akram/status/163977302160588800/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-30 13:30:10</wp:comment_date>
			<wp:comment_date_gmt>2012-01-30 13:30:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>The NodeJS Innovation Advantage
 http://t.co/96ekWJRY #nodejs</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327930385.8361";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2840</wp:comment_id>
			<wp:comment_author><![CDATA[The Node.JS Innovation Advantage | e-commerce et e-marketing for absolute beginners | Scoop.it]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.scoop.it/t/e-commerce-et-e-marketing-for-absolute-beginners/p/1084912774/the-node-js-innovation-advantage</wp:comment_author_url>
			<wp:comment_author_IP>89.30.105.121</wp:comment_author_IP>
			<wp:comment_date>2012-01-30 17:09:35</wp:comment_date>
			<wp:comment_date_gmt>2012-01-30 17:09:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] background-position: 50% 0px; background-color:#222222; background-repeat : no-repeat; }         www.olympum.com  - Today, 5:09 [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327943375.8158";s:7:"message";s:35:"Akismet caught this comment as spam";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329974965.7866";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329062478.7159";s:7:"message";s:39:"admin reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[admin]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2841</wp:comment_id>
			<wp:comment_author><![CDATA[timodonoghue (@timodonoghue)]]></wp:comment_author>
			<wp:comment_author_email>timodonoghue@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/timodonoghue/status/164048698429550593/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-01-30 18:13:52</wp:comment_date>
			<wp:comment_date_gmt>2012-01-30 18:13:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>http://t.co/6YH2RbpB -- The NodeJS Innovation Advantage -- olympum</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327948420.2184";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2842</wp:comment_id>
			<wp:comment_author><![CDATA[Dhananjay Nene]]></wp:comment_author>
			<wp:comment_author_email>dhananjay.nene@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.dhananjaynene.com</wp:comment_author_url>
			<wp:comment_author_IP>122.169.13.71</wp:comment_author_IP>
			<wp:comment_date>2012-01-31 04:01:55</wp:comment_date>
			<wp:comment_date_gmt>2012-01-31 04:01:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>It would be useful to consider an alternative goal, where "production ready" is replaced by "market validated". Quite often the  larger amount of time is spent in validating a product in the market and making the required changes as a part of that process, well after the production-ready stage.</p>

<p>Its hard to discuss broad conclusions like the one above in absence of specific contexts. At least in my experience, it is much easier (and quicker) to get to production ready stage with python than with java. Thus also leading to a quicker market validation. If these languages such as python were not able to take us faster both to production-ready and market validated stage, I don't know if they would be used as much.</p>

<p>Much of the discussed debates and tradeoffs focus on the stages thereafter.</p>

<p>And yes, Python is a dynamically typed, strongly typed language. (Not weakly typed language). I suspect the same to be true of Ruby as well.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327982515.8969";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2847</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Kovalenko (@cybind)]]></wp:comment_author>
			<wp:comment_author_email>cybind@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/cybind/status/164703867894902784/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-01 13:37:16</wp:comment_date>
			<wp:comment_date_gmt>2012-02-01 13:37:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>THE NODEJS INNOVATION ADVANTAGE: http://t.co/1ZosVanp</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328106840.7108";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2848</wp:comment_id>
			<wp:comment_author><![CDATA[(@cybind) (@cybind)]]></wp:comment_author>
			<wp:comment_author_email>cybind@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/cybind/status/164703864023560192/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-01 13:37:15</wp:comment_date>
			<wp:comment_date_gmt>2012-02-01 13:37:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>THE NODEJS INNOVATION ADVANTAGE: http://t.co/TvLZo1Ji</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328110392.2086";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2849</wp:comment_id>
			<wp:comment_author><![CDATA[Malte (@mlegenhausen)]]></wp:comment_author>
			<wp:comment_author_email>mlegenhausen@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mlegenhausen/status/164779605671165952/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-01 18:38:14</wp:comment_date>
			<wp:comment_date_gmt>2012-02-01 18:38:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>RT @nodejs: http://t.co/ei1dUzxr</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328124800.4277";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2850</wp:comment_id>
			<wp:comment_author><![CDATA[James F Blom (@nodejschina)]]></wp:comment_author>
			<wp:comment_author_email>nodejschina@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/nodejschina/status/164802411284803584/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-01 20:08:51</wp:comment_date>
			<wp:comment_date_gmt>2012-02-01 20:08:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Innovation &amp; impact of node.js-great blog by olympum
http://t.co/UIgG0fwU</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328128399.9761";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2854</wp:comment_id>
			<wp:comment_author><![CDATA[Kelvin (@kelvw)]]></wp:comment_author>
			<wp:comment_author_email>kelvw@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/kelvw/status/165461909099905024/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-03 15:49:27</wp:comment_date>
			<wp:comment_date_gmt>2012-02-03 15:49:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Strong-type and weak-type, and span from development to production. // Olympum: The NodeJS Innovation Advantage http://t.co/SA1BfZNh</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328286820.9293";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3007</wp:comment_id>
			<wp:comment_author><![CDATA[pantyjack]]></wp:comment_author>
			<wp:comment_author_email>pantyjack@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>186.22.107.4</wp:comment_author_IP>
			<wp:comment_date>2012-03-10 23:53:35</wp:comment_date>
			<wp:comment_date_gmt>2012-03-10 23:53:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>The argument for the strongly-typed-python is rushed. The just 'cause primitives types operators are not python functions, if i send a message to an object does not raise a type error. So, is bullshit.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1331423615.816";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2868</wp:comment_id>
			<wp:comment_author><![CDATA[PasteSoft (@pastesoft)]]></wp:comment_author>
			<wp:comment_author_email>pastesoft@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/pastesoft/status/166545885793239040/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-06 15:36:48</wp:comment_date>
			<wp:comment_date_gmt>2012-02-06 15:36:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>The #NodeJS Innovation Advantage http://t.co/LbkxOZfM</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328546050.2901";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2966</wp:comment_id>
			<wp:comment_author><![CDATA[JS Central (@jscentral)]]></wp:comment_author>
			<wp:comment_author_email>jscentral@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/jscentral/status/173650260189650944/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-26 06:07:02</wp:comment_date>
			<wp:comment_date_gmt>2012-02-26 06:07:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>The NodeJS Innovation Advantage [vs e.g. Java: prototype quickly, ensure correctness later+deeper] @olympum http://t.co/riMyeu2m ^ar</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330483411.8658";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2919</wp:comment_id>
			<wp:comment_author><![CDATA[Jorge I. Meza (@jimezam)]]></wp:comment_author>
			<wp:comment_author_email>jimezam@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/jimezam/status/169954834999541763/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-16 01:22:44</wp:comment_date>
			<wp:comment_date_gmt>2012-02-16 01:22:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>RT @NodeJsCommunity: 「The NodeJS Innovation Advantage」 http://t.co/dfTwcay8 #reader http://t.co/ieEWZJCG</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329356045.7191";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329974942.1217";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3068</wp:comment_id>
			<wp:comment_author><![CDATA[david van brink]]></wp:comment_author>
			<wp:comment_author_email>poly@omino.com</wp:comment_author_email>
			<wp:comment_author_url>http://omino.com</wp:comment_author_url>
			<wp:comment_author_IP>63.249.119.13</wp:comment_author_IP>
			<wp:comment_date>2012-03-30 20:15:26</wp:comment_date>
			<wp:comment_date_gmt>2012-03-30 20:15:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>When I look at this graph (which I do intuitively agree with, again from my own long &amp; painful experiences), what I see is at your "production ready" point, the green line is shallow, and the purple line is steep.</p>

<p>The question I see is, Where do versions 1.1, 1.5, and 2.0 appear on the graph?</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333138526.8251";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Failing to Scale Out Push Web Services</title>
		<link>http://www.olympum.com/future/failing-to-scale-out-push-web-services/</link>
		<pubDate>Thu, 23 Feb 2012 05:28:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/future/failing-to-scale-out-push-web-services/</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Problem</strong>: <em>on the web, enable a large number of message producers send a
very large number of messages to a much larger number of message consumers</em>.
Example: allow 100,000 publishers send a total of 1 million messages per
second to 100 million concurrently connected consumers.

We are dealing with the problem of <em>connection channels</em>, an abstraction that
allows a producer distribute the message to many connected consumers. Our
challenge is to design a distributed channel delivery mechanism that can scale
out to millions of connected consumers. Throughout, our assumption is that
this is a stateless delivery system, i.e. messages are either delivered or
dropped and no persistence guarantees exists; if a consumer is not connected,
it will miss the message.

The naïve approach is to perform <strong>consistent hashing by channel</strong>. In this
model, each channel and all its consumers are in the same server. Since the
channel identifier is part of the URI, the load balancer can effectively
perform this operation, and we can add servers as required without requiring
re-balancing. When we have many channels per server, the distribution is
eventually uniform. Problems arise however as some channels have an order of
magnitude more consumers than other channels. There is also a problem if a
channel has more consumers than a server can sustain.

To solve the limitations of hashing by channel, we can instead perform
<strong>consistent hashing by channel and connection (consumer)</strong>. In this model,
each consumer is consistently assigned to a pool of servers and we can add
servers without having to re-balance consumers among servers. The channel
stores a list of all the consumer identifiers and channels are consistently
hashed across servers. To deliver a message, the load balancer will find the
server holding the channel, and dispatch the request. The channel will lookup
the list of consumer identifiers and again apply the consistent hashing
algorithm to reach all the consumers.

Although the hashing by channel and connection is conceptually simple, it
presents significant operability challenges. First, the loss of the server
holding the channel metadata and list of connected consumers will require a
watchdog cleaning up all the stale consumer connections. Second, as consumers
join in and disappear, the channel server would need to maintain a consistent
view of the list of consumers by the means of locks, with the incurred
performance degradation of very large number of consumers. Third, as more
consumers connect uniformly across the nodes, the more chattiness that will
occur. At some point, all nodes will have consumer connections for a given
channel. In order to to fulfill every operation, we must issue <code>N</code> requests to
all nodes, where <code>N</code> is the number of nodes in the cluster. For the cluster to
be able to process and deliver <code>M</code> messages, every node must be capable of
processing <code>N*M</code> messages. This design will be limited in the number of
connections it can hold, because of the centralized channel-consumer tracking
problem, and will also only scale to the maximum request processing capacity
of an individual node.

We can solve some of the operability challenges by removing the channel
management of consumer connections, and instead of keeping a list, keeping the
visibility of the peer nodes. Here the thinking is that since we will
asymptotically reach the point where all nodes hold consumer connections for a
given channel, all we really need to do is keep a list of all nodes in the
cluster. Some centralized agent keeps a directory of all active peers holding
consumer connections, e.g. a Zookeeper ensemble.

<img src="/wordpress/wp-content/uploads/2012/02/design.png" alt="Ring-based Cluster" />

Consumers get uniformly connected to the nodes in the cluster by a "good"
load-balancing scheme. Since any node can hold connections to consumers on any
channel, there is therefore no snapshot of a channel's consumers, and to be
able to identify all consumers connected to a channel it is necessary to
interrogate all nodes in the cluster. Whereas this design improves the
previous ones in that it allows scaling to an infinite number of connections,
it will still only scale to the message processing throughput of an individual
node.

A popular alternative to the directory of nodes is the tree of nodes. In this
model, we start with a single node. As we reach the maximum number of
connections the node can hold, we add two new nodes. The original node still
accepts messages from publishers, but brokers the delivery to the two new
nodes. As those nodes themselves become saturated, we add a new layer of four
nodes. And so forth. This approach has the same limitation as the one using a
directory of nodes, i.e. the maximum throughput is bound to that of the
individual node.

We've seen how to hold the connections to an infinite number of consumers, but
not how to deliver an infinite number of messages. These solutions scale very
well to tens of thousands of messages and millions of active connected
consumers, but have an upper limit. For most producers out there, that upper
limit is probably high enough to be fine. But such limit exists in push-based
systems.

Both the messaging literature and the messaging praxis have historically
preferred using pull-based models rather than push-based ones. In a pull
model, consumers come back to the broker to fetch messages, at each consumer's
own rate, and the problem is therefore no longer dispatching across millions
of connections. Pull-based messaging systems chose to store the messages until
consumers come back to fetch them. In fact, the only scalable messaging system
to millions of messages and millions of consumers that we know of uses store-
and-forward: SMTP.

As much as I may think that the techniques that enable web push-models such as
HTTP streaming, long-poll and WebSockets are genuinely useful to solve point
problems, they are not techniques we can use to implement Internet-scale push-
based web services, as they are fundamentally based on a PubSub model. The
scalability of PubSub under high load remains an unresolved research question
and as such is not a paradigm we should apply at Internet-scale.

In fact, I am now <em>almost</em> convinced that we've been looking at this in the
wrong way, and that the right solution to this problem is a store-and-forward
solution, where web consumers connect at their own rate to fetch messages and
intermediaries throttle concurrent connection rates in order to achieve linear
scalability. Essentially, this is a web of <em>partially connected store-and-
forward almost real-time async data peers</em>. And that's a mouthful, but a really
exciting one.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>586</wp:post_id>
		<wp:post_date>2012-02-23 05:28:11</wp:post_date>
		<wp:post_date_gmt>2012-02-23 05:28:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>failing-to-scale-out-push-web-services</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="future"><![CDATA[Future]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409127738994688]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415507585;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:19;}i:1;a:1:{s:2:"id";i:315;}i:2;a:1:{s:2:"id";i:66;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2945</wp:comment_id>
			<wp:comment_author><![CDATA[Alex Kolundzija (@subchild)]]></wp:comment_author>
			<wp:comment_author_email>subchild@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/subchild/status/173089486744469504/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-24 16:58:44</wp:comment_date>
			<wp:comment_date_gmt>2012-02-24 16:58:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Failing to Scale Out Push Web Services. (via @foxxtrot) http://t.co/l4fJRiyL</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330104858.2626";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2946</wp:comment_id>
			<wp:comment_author><![CDATA[brian rountree (@pixelarchitect)]]></wp:comment_author>
			<wp:comment_author_email>pixelarchitect@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/pixelarchitect/status/173115522827821061/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-24 18:42:11</wp:comment_date>
			<wp:comment_date_gmt>2012-02-24 18:42:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>RT @olympum: the blog was too long, so here is the 140 chars version: web push is a bad idea, pubsub does NOT scale. http://t.co/QnaJB0Q2</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330112058.1872";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2948</wp:comment_id>
			<wp:comment_author><![CDATA[linklog (@linklog)]]></wp:comment_author>
			<wp:comment_author_email>linklog@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/linklog/status/173139007063072768/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-24 20:15:30</wp:comment_date>
			<wp:comment_date_gmt>2012-02-24 20:15:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Failing to Scale Out Push Web Services: An interesting look at a web-scale design challenge; how he approaches t... http://t.co/MKNYP4jq</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330115594.0004";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2943</wp:comment_id>
			<wp:comment_author><![CDATA[Jeff Craig (@foxxtrot)]]></wp:comment_author>
			<wp:comment_author_email>foxxtrot@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/foxxtrot/status/173078855635046401/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-24 16:16:29</wp:comment_date>
			<wp:comment_date_gmt>2012-02-24 16:16:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>"Failing to Scale Out Push Web Services" http://t.co/iNVrAdh4</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330101205.0446";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2940</wp:comment_id>
			<wp:comment_author><![CDATA[(@sallamar) (@sallamar)]]></wp:comment_author>
			<wp:comment_author_email>sallamar@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/sallamar/status/172919835142008833/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-24 05:44:36</wp:comment_date>
			<wp:comment_date_gmt>2012-02-24 05:44:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>http://t.co/0xPkV1Nw</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330065587.6114";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2957</wp:comment_id>
			<wp:comment_author><![CDATA[Cem Uzunlar (@cemuzunlar)]]></wp:comment_author>
			<wp:comment_author_email>cemuzunlar@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/cemuzunlar/status/174117362671427585/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-27 13:03:08</wp:comment_date>
			<wp:comment_date_gmt>2012-02-27 13:03:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Failing to Scale Out Push Web Services http://t.co/m9OM5i4s</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330349627.8183";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2980</wp:comment_id>
			<wp:comment_author><![CDATA[Distributed Weekly 144 &mdash; Scott Banwart&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://rogue-technology.com/blog/?p=1472</wp:comment_author_url>
			<wp:comment_author_IP>67.205.1.227</wp:comment_author_IP>
			<wp:comment_date>2012-03-02 16:04:01</wp:comment_date>
			<wp:comment_date_gmt>2012-03-02 16:04:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>[...] Failing to Scale Out Push Web Services [...]</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1330704241.535";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2978</wp:comment_id>
			<wp:comment_author><![CDATA[carl sturmer]]></wp:comment_author>
			<wp:comment_author_email>cs-temp@shc.com</wp:comment_author_email>
			<wp:comment_author_url>http://n/a</wp:comment_author_url>
			<wp:comment_author_IP>65.40.212.117</wp:comment_author_IP>
			<wp:comment_date>2012-03-02 13:49:26</wp:comment_date>
			<wp:comment_date_gmt>2012-03-02 13:49:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Bingo!  However, there are situations where push works on a large/internet scale but it is not typically a generalizable solution.  Instead it is almost a situation specific design.  To work it needs model/goal level constraints, such as, very loose delivery times, ability for messages/notifications to gracefully and efficiently fail due to consumers being offline, optimizations like one producer sends the same message to (n) consumers so the storage is the single message and the message send can be parallelized across as many devices as necessary, etc..  Basically, it can be done successfully at some level but at scale it likely needs a big dynamic infrastructure behind it (cloud/grid).  Having said all this, I would however vote with you and use the async poll method.  It is more controllable, robust to failure and flexible/adaptable to change.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1330696166.577";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2994</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno Fernandez-Ruiz]]></wp:comment_author>
			<wp:comment_author_email>brunofr@olympum.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olympum.com/</wp:comment_author_url>
			<wp:comment_author_IP>76.102.53.23</wp:comment_author_IP>
			<wp:comment_date>2012-03-06 16:40:14</wp:comment_date>
			<wp:comment_date_gmt>2012-03-06 16:40:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Thanks for the comment. I agree that adding constraints especially around graceful degradation allow push "practically". More of us need to think this way, using async poll and store &amp; forward patterns to scale the web in a decentralized fashion as we look forward at the evolution of the web for realtime delivery.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2978</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331052014.2593";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3075</wp:comment_id>
			<wp:comment_author><![CDATA[Trip Hawkins]]></wp:comment_author>
			<wp:comment_author_email>thawkins@dchoc.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.5.4.230</wp:comment_author_IP>
			<wp:comment_date>2012-04-01 02:21:29</wp:comment_date>
			<wp:comment_date_gmt>2012-04-01 02:21:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Hi Bruno, can you help me connect with someone in BD at Yahoo?</p>

<p>Trip
CEO
Digital Chocolate
(founder of EA)</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333246889.3065";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3080</wp:comment_id>
			<wp:comment_author><![CDATA[(@mbrevoort) (@mbrevoort)]]></wp:comment_author>
			<wp:comment_author_email>mbrevoort@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/mbrevoort/status/186821901425967105/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-04-02 14:26:26</wp:comment_date>
			<wp:comment_date_gmt>2012-04-02 14:26:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Interesting post on scaling out push web services http://t.co/eF7zDAOt by @olympum</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333377190.3563";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3617</wp:comment_id>
			<wp:comment_author><![CDATA[Nila]]></wp:comment_author>
			<wp:comment_author_email>neil@dragpack.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406004396</wp:comment_author_url>
			<wp:comment_author_IP>146.82.168.18</wp:comment_author_IP>
			<wp:comment_date>2012-05-22 13:55:20</wp:comment_date>
			<wp:comment_date_gmt>2012-05-22 13:55:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>I'd be surprised if that was the RHEL deafult as their docs talk about how to enable it in grub if you are having problems and include a warning that some systems won't boot properly without it..  But I don't have any RHEL6 boxes to be able to confirm/refute that with I'm afraid.   I'll prod our local LUG in case anyone has.@JeffWhilst the kernel developers are not necessarily enamoured with ACPI (include the need to have an interpreter embedded in the kernel) it's unfair to say that this is some private arrangement between Intel and Microsoft   Intel open sources their ACPI compiler and is an active contributer to the Linux kernels ACPI implementation (just try a  git log drivers/acpi ).Five of the top 10 committers to that kernel code are from Intel (all time they're at #1, #2, #6, #8 and #10 and for the last 1,000 commits they're at #1, #3, #5, #6 and #7), and there are also contributions from HP in there too (another co-developer of ACPI).</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2943</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337694920.8779";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3618</wp:comment_id>
			<wp:comment_author><![CDATA[Hugh]]></wp:comment_author>
			<wp:comment_author_email>cesci@cesci-net.eu</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406007103</wp:comment_author_url>
			<wp:comment_author_IP>173.36.126.5</wp:comment_author_IP>
			<wp:comment_date>2012-05-22 14:02:58</wp:comment_date>
			<wp:comment_date_gmt>2012-05-22 14:02:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>The benchmark was run using the tool that I wrote about in my blog today tetgoher with an updated version of the flexAsynch which hopefully will soon be a part of a release.Each data node used up about 5.5 CPU cores. The 6.82M reads per second used a cluster of 32 data nodes.I haven't tested flexSync (it's called flexBench and was the original benchmark program for MySQL Cluster, not used so much anymore).</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337695378.8484";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3707</wp:comment_id>
			<wp:comment_author><![CDATA[Batie]]></wp:comment_author>
			<wp:comment_author_email>menge@nabu-hamburg.de</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406023722</wp:comment_author_url>
			<wp:comment_author_IP>85.90.62.254</wp:comment_author_IP>
			<wp:comment_date>2012-05-24 00:18:00</wp:comment_date>
			<wp:comment_date_gmt>2012-05-24 00:18:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>. For me, it generally comes down to whehter I am reusing an asset or combining assets for one of many shots. If I am reusing an asset for an individual scene then  generally append, if I am creating one of many shots then I link</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2994</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337818680.4584";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Convert Mailbox from Mail.app to Microsoft Outlook 2011 in Lion</title>
		<link>http://www.olympum.com/architecture/convert-maibox-from-mail-app-to-microsoft-outlook-2011-in-lion/</link>
		<pubDate>Fri, 09 Nov 2012 07:45:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=602</guid>
		<description></description>
		<content:encoded><![CDATA[In Mac OS 10.7 (Lion) and 10.8 (Mountain Lion), it's not currently possible to export mailboxes from Mail.app to something that Microsoft Outlook 2011 can import directly. After a bit of research, and plenty of forum messages seeing the frustration of folks, including <a href="http://support.microsoft.com/kb/2598783">Microsoft's reluctance to fix Outlook 2011 for Mac</a> (instead they decided to just disable the feature, see in the release note "Import from Apple Mail is disabled in Outlook on Mac OS X 10.7 Lion"), I found the issue was due to the <code>FSTypeCode</code> not being set by Mail.app, which is actually really easy to fix.

First, in Mail.app, I export my mailbox. In my case, after I select my Archive mailbox, I get:

<pre><code>$ ls -1
Inbox2007.mbox
</code></pre>

From Lion onwards, the Apple mbox format is actually a folder that contains a few files inside:

<pre><code>$ ls -1 Inbox2007.mbox
Info.plist
mbox
table_of_contents
</code></pre>

Where <code>mbox</code> is the real mbox file we need to import into Outlook, but if we try now (Import -> Contacts or messages from a text file -> Import messages from an MBOX-format text file) we'll see the mbox file in the Finder is greyed out. This is because the <code>FSTypeCode</code> is not set:

<pre><code>$ mdls Inbox2007.mbox/mbox | grep 'FSTypeCode'
kMDItemFSTypeCode = ""
</code></pre>

What we need to do is to change the code to <code>'TEXT'</code>. We can do this with a simple command (I used <code>find</code> since I exported several mboxes at once):

<pre><code>$ find . -name '*.mbox' -exec SetFile -t 'TEXT' {}/mbox \; -print
./Inbox2007.mbox
</code></pre>

If we now test for the <code>FSTypeCode</code>, we verify it's correctly set as <code>'TEXT'</code>.

<pre><code>$ mdls Inbox2007.mbox/mbox | grep 'FSTypeCode'
kMDItemFSTypeCode              = "TEXT"
</code></pre>

We can now finally go back to Outlook and import the mbox file: Import -> Contacts or messages from a text file -> Import messages from an MBOX-format text file.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>602</wp:post_id>
		<wp:post_date>2012-11-09 07:45:14</wp:post_date>
		<wp:post_date_gmt>2012-11-09 07:45:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>convert-maibox-from-mail-app-to-microsoft-outlook-2011-in-lion</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="architecture"><![CDATA[Architecture]]></category>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409126648061952]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415458911;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:621;}i:1;a:1:{s:2:"id";i:129;}i:2;a:1:{s:2:"id";i:118;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>11518</wp:comment_id>
			<wp:comment_author><![CDATA[Steve]]></wp:comment_author>
			<wp:comment_author_email>scuba15steve@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.169.3.122</wp:comment_author_IP>
			<wp:comment_date>2013-01-30 20:19:24</wp:comment_date>
			<wp:comment_date_gmt>2013-01-30 20:19:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>I cant seem to make that command work could you please help.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1359577164.3293";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12190</wp:comment_id>
			<wp:comment_author><![CDATA[mechin]]></wp:comment_author>
			<wp:comment_author_email>z.lukenic@mediactive.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>83.167.35.245</wp:comment_author_IP>
			<wp:comment_date>2013-02-14 13:37:12</wp:comment_date>
			<wp:comment_date_gmt>2013-02-14 13:37:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>I hade to do the same thing and i found a difrent way.
at first i used beterFinderRename to rename all mbox file on parent-folder-name.mbox
after that i used "FileType" to change the type and creator. Prety simple.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1360849032.9024";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8626</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno Fernandez-Ruiz (@olympum)]]></wp:comment_author>
			<wp:comment_author_email>olympum@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/olympum/status/266809253795360768/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-11-09 07:47:37</wp:comment_date>
			<wp:comment_date_gmt>2012-11-09 07:47:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Found an easy way to convert from Mail.app to Outlook 2011 in Lion and Mountain Lion, a feature disabled by Microsoft. http://t.co/duOVXBe7</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1352450398.5611";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13122</wp:comment_id>
			<wp:comment_author><![CDATA[James]]></wp:comment_author>
			<wp:comment_author_email>trs80@ucc.asn.au</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.135.184.72</wp:comment_author_IP>
			<wp:comment_date>2013-03-08 07:54:35</wp:comment_date>
			<wp:comment_date_gmt>2013-03-08 07:54:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>Perfect! Thank you very much.</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1362729275.0331";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Golden Cheetah on OS X Mavericks</title>
		<link>http://www.olympum.com/other/golden-cheetah-on-os-x-mavericks/</link>
		<pubDate>Sun, 27 Apr 2014 08:01:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.olympum.com/?p=621</guid>
		<description></description>
		<content:encoded><![CDATA[I am a big fan of collecting and tracking the data from all the sensor device gadgets I use in my workout. For indoor cycling, I recently bought an Elite Qubo Power Fluid trainer, so I wanted to get the power curve into the software I am using for tracking cycling, Golden Cheetah.

<h2>First Build</h2>

Using homebrew we install Qt4. I did not try with Qt5 which is not as
widely used anyway as Qt4.

<pre><code>brew install qt4
</code></pre>

Then checkout the Golden Cheetah code out of github:

<pre><code>git clone git://github.com/GoldenCheetah/GoldenCheetah.git
</code></pre>

We then create the qmake config files that will generate the GNU Makefile:

<pre><code>cd GoldenCheetah
cp qwt/qwtconfig.pri.in qwt/qwtconfig.pri
cp src/gcconfig.pri.in src/gcconfig.pri
</code></pre>

We edit <code>src/gcconfig.pri</code> to uncomment the OSX options:

<pre><code># Uncomment this line if you have SDK 10.7 or higher
DEFINES += GC_HAVE_LION

#uncomment below if you are running on the 10.9 developer preview
INCLUDEPATH += /Library/Developer/CommandLineTools/SDKs/MacOSX10.9.sdk/usr/include/ 
</code></pre>

To enable the USB2 ANT+ dongle support (libusb-compat provides a 0.1
version wrapper interface using the libusb 1.0 implementation):

<pre><code>brew install libusb-compat
</code></pre>

And change <code>src/gcconfig.pri</code> to enable USB:

<pre><code>LIBUSB_INSTALL = /usr/local
#LIBUSB_INCLUDE = 
LIBUSB_LIBS    = -lusb
</code></pre>

Note the <code>LIBUSB_LIBS</code> directive to point to libusb.a, which if we
installed libusb with Homebrew, it is a symbolic link to the compat
version 0.1.4. If we leave the directive empty, which is the default,
the config make system will pick up libusb-1.0.a, which will be
missing symbols during final linking with the GoldenCheetah app.

I tried to make at this point but it failed saying it could not find
the .qm files. Looking on the web these seem to be generated
translation files. So I did init these translation files, although I
am not sure why this is required and not caught by the Makefile. In
any case:

<pre><code>lrelease src/src.pro
</code></pre>

And build:

<pre><code>qmake -recursive
make
</code></pre>

The app is found under <code>src/GoldenCheetah.app</code>.

<h2>Quick Note on Other Dependencies</h2>

<ul>
<li>SRMIO. Serial communication protocol to the SRM bike power meter. I
don't need it.</li>
<li>Liboauth. To post to twitter. I don't think need it.</li>
<li>libkml. Export to Google Earth. I don't think I need it.</li>
<li>QwtPlot3d. Hmm ... not sure what this is for, yet.</li>
<li>libical. Don't know, I skip.</li>
<li>clucene. Don't know yet if I need it, so I skip.</li>
</ul>

<h2>Adding Elite Qubo Power Fluid</h2>

I take the power curve from
<a href="http://www.powercurvesensor.com/files/45c.png">PowerCurveSensor.com</a>
and fit a cubic equation. The results are:

<pre><code>f(x) = 4.31746 * x + -2.59259e-002 * x^2 +  9.41799e-003 * x^3
</code></pre>

where x = km/h and f(x) are Watts. We add the switch case in
<code>RealtimeController.cpp</code>:

<pre><code>case 42:
    {
    double V = rtData.getSpeed();
    // Power curve fit from powercurvesensor
    rtData.setWatts(4.31746 * V - 2.59259e-002 * pow(V, 2) + 9.41799e-003 * pow(V, 3));
    }
    break;
</code></pre>

And in <code>AddDeviceWizard.cpp</code>:

<pre><code>virtualPower-&gt;addItem(tr("Power - Elite Supercrono Powermag (8)"));
virtualPower-&gt;addItem(tr("Power - Elite Qubo Power Fluid"));

wheelSize-&gt;addItem(tr("Road/Cross (700C/622)")); // 2100mm
wheelSize-&gt;addItem(tr("Tri/TT (650C)")); // 1960mm
</code></pre>

Recompile by invoking <code>make</code> and run the app:

<pre><code>open src/GoldenCheetah.app
</code></pre>

Open the app, add a new device, and voilá, the Qubo Fluid shows up in
GoldenCheetah.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>621</wp:post_id>
		<wp:post_date>2014-04-27 08:01:05</wp:post_date>
		<wp:post_date_gmt>2014-04-27 08:01:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>golden-cheetah-on-os-x-mavericks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1415296149;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:313;}i:1;a:1:{s:2:"id";i:355;}i:2;a:1:{s:2:"id";i:67;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tmac_last_id</wp:meta_key>
			<wp:meta_value><![CDATA[531409125490450433]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
